
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035e  00800100  00002c28  00002cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000867  0080045e  0080045e  0000301a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000301a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00003076  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002dbe  00000000  00000000  0000326e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f9  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000134c  00000000  00000000  00006825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000638  00000000  00000000  00007b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000929  00000000  00000000  000081ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001616  00000000  00000000  00008ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  0000a0eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	00 00       	nop
       4:	35 c1       	rjmp	.+618    	; 0x270 <__bad_interrupt>
       6:	00 00       	nop
       8:	33 c1       	rjmp	.+614    	; 0x270 <__bad_interrupt>
       a:	00 00       	nop
       c:	31 c1       	rjmp	.+610    	; 0x270 <__bad_interrupt>
       e:	00 00       	nop
      10:	2f c1       	rjmp	.+606    	; 0x270 <__bad_interrupt>
      12:	00 00       	nop
      14:	2d c1       	rjmp	.+602    	; 0x270 <__bad_interrupt>
      16:	00 00       	nop
      18:	2b c1       	rjmp	.+598    	; 0x270 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__bad_interrupt>
      1e:	00 00       	nop
      20:	27 c1       	rjmp	.+590    	; 0x270 <__bad_interrupt>
      22:	00 00       	nop
      24:	26 c1       	rjmp	.+588    	; 0x272 <__vector_9>
      26:	00 00       	nop
      28:	23 c1       	rjmp	.+582    	; 0x270 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c1       	rjmp	.+672    	; 0x2ce <__vector_11>
      2e:	00 00       	nop
      30:	1f c1       	rjmp	.+574    	; 0x270 <__bad_interrupt>
      32:	00 00       	nop
      34:	1d c1       	rjmp	.+570    	; 0x270 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c1       	rjmp	.+614    	; 0x2a0 <__vector_14>
      3a:	00 00       	nop
      3c:	19 c1       	rjmp	.+562    	; 0x270 <__bad_interrupt>
      3e:	00 00       	nop
      40:	17 c1       	rjmp	.+558    	; 0x270 <__bad_interrupt>
      42:	00 00       	nop
      44:	15 c1       	rjmp	.+554    	; 0x270 <__bad_interrupt>
      46:	00 00       	nop
      48:	13 c1       	rjmp	.+550    	; 0x270 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	11 c1       	rjmp	.+546    	; 0x270 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0f c1       	rjmp	.+542    	; 0x270 <__bad_interrupt>
      52:	00 00       	nop
      54:	0d c1       	rjmp	.+538    	; 0x270 <__bad_interrupt>
      56:	00 00       	nop
      58:	0b c1       	rjmp	.+534    	; 0x270 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	09 c1       	rjmp	.+530    	; 0x270 <__bad_interrupt>
      5e:	00 00       	nop
      60:	07 c1       	rjmp	.+526    	; 0x270 <__bad_interrupt>
      62:	00 00       	nop
      64:	05 c1       	rjmp	.+522    	; 0x270 <__bad_interrupt>
      66:	00 00       	nop
      68:	03 c1       	rjmp	.+518    	; 0x270 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	01 c1       	rjmp	.+514    	; 0x270 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ff c0       	rjmp	.+510    	; 0x270 <__bad_interrupt>
      72:	00 00       	nop
      74:	fd c0       	rjmp	.+506    	; 0x270 <__bad_interrupt>
      76:	00 00       	nop
      78:	fb c0       	rjmp	.+502    	; 0x270 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f9 c0       	rjmp	.+498    	; 0x270 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f7 c0       	rjmp	.+494    	; 0x270 <__bad_interrupt>
      82:	00 00       	nop
      84:	f5 c0       	rjmp	.+490    	; 0x270 <__bad_interrupt>
      86:	00 00       	nop
      88:	f3 c0       	rjmp	.+486    	; 0x270 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 64       	ori	r16, 0x46	; 70
      8e:	ec 1b       	sub	r30, r28
      90:	3c 04       	cpc	r3, r12
      92:	bc 16       	cp	r11, r28
      94:	3e 3b       	cpi	r19, 0xBE	; 190
      96:	e5 b9       	out	0x05, r30	; 5
      98:	3c c9       	rjmp	.-3464   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      9a:	3c 37       	cpi	r19, 0x7C	; 124
      9c:	c2 9e       	mul	r12, r18
      9e:	5a 3d       	cpi	r21, 0xDA	; 218
      a0:	66 04       	cpc	r6, r6
      a2:	98 08       	sbc	r9, r8
      a4:	3e ea       	ldi	r19, 0xAE	; 174
      a6:	69 aa       	std	Y+49, r6	; 0x31
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 80       	ld	r0, Z
      ae:	3f 07       	cpc	r19, r31
      b0:	63 42       	sbci	r22, 0x23	; 35
      b2:	36 b7       	in	r19, 0x36	; 54
      b4:	9b d8       	rcall	.-3786   	; 0xfffff1ec <__eeprom_end+0xff7ef1ec>
      b6:	a7 1a       	sub	r10, r23
      b8:	39 68       	ori	r19, 0x89	; 137
      ba:	56 18       	sub	r5, r6
      bc:	ae ba       	out	0x1e, r10	; 30
      be:	ab 55       	subi	r26, 0x5B	; 91
      c0:	8c 1d       	adc	r24, r12
      c2:	3c b7       	in	r19, 0x3c	; 60
      c4:	cc 57       	subi	r28, 0x7C	; 124
      c6:	63 bd       	out	0x23, r22	; 35
      c8:	6d ed       	ldi	r22, 0xDD	; 221
      ca:	fd 75       	andi	r31, 0x5D	; 93
      cc:	3e f6       	brtc	.-114    	; 0x5c <__SREG__+0x1d>
      ce:	17 72       	andi	r17, 0x27	; 39
      d0:	31 bf       	out	0x31, r19	; 49
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <move_forward+0x20c>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <IR_init+0x6>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <move_forward+0x19e>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
	...

00000132 <__trampolines_end>:
     132:	6e 61       	ori	r22, 0x1E	; 30
     134:	6e 00       	.word	0x006e	; ????

00000136 <__c.2159>:
     136:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     146:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     156:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     166:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     176:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     186:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     196:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     206:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     216:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     226:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e1       	ldi	r29, 0x10	; 16
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	14 e0       	ldi	r17, 0x04	; 4
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	e8 e2       	ldi	r30, 0x28	; 40
     248:	fc e2       	ldi	r31, 0x2C	; 44
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ae 35       	cpi	r26, 0x5E	; 94
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	2c e0       	ldi	r18, 0x0C	; 12
     25c:	ae e5       	ldi	r26, 0x5E	; 94
     25e:	b4 e0       	ldi	r27, 0x04	; 4
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a5 3c       	cpi	r26, 0xC5	; 197
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>
     26a:	0f d6       	rcall	.+3102   	; 0xe8a <main>
     26c:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <_exit>

00000270 <__bad_interrupt>:
     270:	c7 ce       	rjmp	.-626    	; 0x0 <__vectors>

00000272 <__vector_9>:

/////////////////////////////////////////////////////

/// Interrupt handler (runs every 1 ms)
/// Taken from given util.c
ISR (TIMER2_COMP_vect) {
     272:	1f 92       	push	r1
     274:	0f 92       	push	r0
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	8f 93       	push	r24
     27e:	9f 93       	push	r25
	timer2_tick++;
     280:	80 91 bd 0c 	lds	r24, 0x0CBD
     284:	90 91 be 0c 	lds	r25, 0x0CBE
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	90 93 be 0c 	sts	0x0CBE, r25
     28e:	80 93 bd 0c 	sts	0x0CBD, r24
}
     292:	9f 91       	pop	r25
     294:	8f 91       	pop	r24
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <__vector_14>:
ISR (TIMER1_OVF_vect)
{
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
	new_overflows++;
     2ae:	80 91 5e 04 	lds	r24, 0x045E
     2b2:	90 91 5f 04 	lds	r25, 0x045F
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	90 93 5f 04 	sts	0x045F, r25
     2bc:	80 93 5e 04 	sts	0x045E, r24
}
     2c0:	9f 91       	pop	r25
     2c2:	8f 91       	pop	r24
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <__vector_11>:
ISR (TIMER1_CAPT_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
	time_last = time_current;
     2e0:	80 91 bf 0c 	lds	r24, 0x0CBF
     2e4:	90 91 c0 0c 	lds	r25, 0x0CC0
     2e8:	90 93 ba 0c 	sts	0x0CBA, r25
     2ec:	80 93 b9 0c 	sts	0x0CB9, r24
	overflows = new_overflows;
     2f0:	80 91 5e 04 	lds	r24, 0x045E
     2f4:	90 91 5f 04 	lds	r25, 0x045F
     2f8:	90 93 61 04 	sts	0x0461, r25
     2fc:	80 93 60 04 	sts	0x0460, r24
	time_current = ICR1;
     300:	86 b5       	in	r24, 0x26	; 38
     302:	97 b5       	in	r25, 0x27	; 39
     304:	90 93 c0 0c 	sts	0x0CC0, r25
     308:	80 93 bf 0c 	sts	0x0CBF, r24
	new_overflows = 0;
     30c:	10 92 5f 04 	sts	0x045F, r1
     310:	10 92 5e 04 	sts	0x045E, r1
	
	time_diff = (overflows<<16) + time_diff;
     314:	80 91 60 04 	lds	r24, 0x0460
     318:	90 91 61 04 	lds	r25, 0x0461
     31c:	80 91 b3 04 	lds	r24, 0x04B3
     320:	90 91 b4 04 	lds	r25, 0x04B4
     324:	a0 91 b5 04 	lds	r26, 0x04B5
     328:	b0 91 b6 04 	lds	r27, 0x04B6
     32c:	80 93 b3 04 	sts	0x04B3, r24
     330:	90 93 b4 04 	sts	0x04B4, r25
     334:	a0 93 b5 04 	sts	0x04B5, r26
     338:	b0 93 b6 04 	sts	0x04B6, r27
	
	TIFR |= 0b00100000;
     33c:	86 b7       	in	r24, 0x36	; 54
     33e:	80 62       	ori	r24, 0x20	; 32
     340:	86 bf       	out	0x36, r24	; 54
	TCCR1B = 0b10000100;
     342:	84 e8       	ldi	r24, 0x84	; 132
     344:	8e bd       	out	0x2e, r24	; 46
}
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <timer2_start>:
	timer2_stop();
}

/// Start timer2 for use with wait_ms function
void timer2_start(char unit) {
	timer2_tick=0;
     358:	10 92 be 0c 	sts	0x0CBE, r1
     35c:	10 92 bd 0c 	sts	0x0CBD, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow
     360:	81 11       	cpse	r24, r1
     362:	06 c0       	rjmp	.+12     	; 0x370 <timer2_start+0x18>
		TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
     364:	8b e0       	ldi	r24, 0x0B	; 11
     366:	85 bd       	out	0x25, r24	; 37
		TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     368:	87 b7       	in	r24, 0x37	; 55
     36a:	80 68       	ori	r24, 0x80	; 128
     36c:	87 bf       	out	0x37, r24	; 55
     36e:	07 c0       	rjmp	.+14     	; 0x37e <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	29 f4       	brne	.+10     	; 0x37e <timer2_start+0x26>
		TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
     374:	89 e0       	ldi	r24, 0x09	; 9
     376:	85 bd       	out	0x25, r24	; 37
		TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
     378:	87 b7       	in	r24, 0x37	; 55
     37a:	80 68       	ori	r24, 0x80	; 128
     37c:	87 bf       	out	0x37, r24	; 55
	}
	sei();
     37e:	78 94       	sei
     380:	08 95       	ret

00000382 <timer2_stop>:
}

/// Stop timer2 for use with wait_ms funcion
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
     382:	87 b7       	in	r24, 0x37	; 55
     384:	8f 77       	andi	r24, 0x7F	; 127
     386:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
     388:	85 b5       	in	r24, 0x25	; 37
     38a:	8f 77       	andi	r24, 0x7F	; 127
     38c:	85 bd       	out	0x25, r24	; 37
     38e:	08 95       	ret

00000390 <wait_ms>:
	TCCR1B = 0b10000100;
}
//////////////////////////////////////////////////////

/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	OCR2=250; 				//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
     396:	8a ef       	ldi	r24, 0xFA	; 250
     398:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
     39a:	10 92 be 0c 	sts	0x0CBE, r1
     39e:	10 92 bd 0c 	sts	0x0CBD, r1
	timer2_start(0);
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	d9 df       	rcall	.-78     	; 0x358 <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
     3a6:	20 91 bd 0c 	lds	r18, 0x0CBD
     3aa:	30 91 be 0c 	lds	r19, 0x0CBE
     3ae:	2c 17       	cp	r18, r28
     3b0:	3d 07       	cpc	r19, r29
     3b2:	c8 f3       	brcs	.-14     	; 0x3a6 <wait_ms+0x16>

	timer2_stop();
     3b4:	e6 df       	rcall	.-52     	; 0x382 <timer2_stop>
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <UART_init>:
void UART_init() {

	//baud = (FCLK/8/baud)-1;
	
	//set up baud rate
	UBRR0H = (unsigned char) (BTBAUD >> 8);
     3bc:	10 92 90 00 	sts	0x0090, r1
	UBRR0L = (unsigned char) BTBAUD;
     3c0:	82 e2       	ldi	r24, 0x22	; 34
     3c2:	89 b9       	out	0x09, r24	; 9

	//double speed mode
	UCSR0A = 0b00000010;
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	8b b9       	out	0x0b, r24	; 11
	//TX and RX enable
	UCSR0B = 0b00011000;
     3c8:	88 e1       	ldi	r24, 0x18	; 24
     3ca:	8a b9       	out	0x0a, r24	; 10
	//8 Data bits, 2 stop bits
	UCSR0C = 0b00001110;
     3cc:	8e e0       	ldi	r24, 0x0E	; 14
     3ce:	80 93 95 00 	sts	0x0095, r24
     3d2:	08 95       	ret

000003d4 <UART_rec>:
}

/// Receive UART data
char UART_rec() {
	
	while((UCSR0A & 0b10000000) == 0);
     3d4:	5f 9b       	sbis	0x0b, 7	; 11
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <UART_rec>
	return UDR0;
     3d8:	8c b1       	in	r24, 0x0c	; 12
	
}
     3da:	08 95       	ret

000003dc <UART_transmit_str>:
/**
 * Takes a string input into the function and transmits the string to the robot one character at a time
 * @param data[] a char array that indicates the string that is being transmitted to the robot
 */
void UART_transmit_str(char data[]) {
	int len = (strlen(data));
     3dc:	fc 01       	movw	r30, r24
     3de:	01 90       	ld	r0, Z+
     3e0:	00 20       	and	r0, r0
     3e2:	e9 f7       	brne	.-6      	; 0x3de <UART_transmit_str+0x2>
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	af 01       	movw	r20, r30
     3e8:	48 1b       	sub	r20, r24
     3ea:	59 0b       	sbc	r21, r25
	
	for (int i = 0; i < len; i++) {
     3ec:	14 16       	cp	r1, r20
     3ee:	15 06       	cpc	r1, r21
     3f0:	64 f4       	brge	.+24     	; 0x40a <UART_transmit_str+0x2e>
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
		while ((UCSR0A & 0b00100000) == 0);
     3f8:	5d 9b       	sbis	0x0b, 5	; 11
     3fa:	fe cf       	rjmp	.-4      	; 0x3f8 <UART_transmit_str+0x1c>
		UDR0 = data[i];
     3fc:	81 91       	ld	r24, Z+
     3fe:	8c b9       	out	0x0c, r24	; 12
 * @param data[] a char array that indicates the string that is being transmitted to the robot
 */
void UART_transmit_str(char data[]) {
	int len = (strlen(data));
	
	for (int i = 0; i < len; i++) {
     400:	2f 5f       	subi	r18, 0xFF	; 255
     402:	3f 4f       	sbci	r19, 0xFF	; 255
     404:	42 17       	cp	r20, r18
     406:	53 07       	cpc	r21, r19
     408:	b9 f7       	brne	.-18     	; 0x3f8 <UART_transmit_str+0x1c>
     40a:	08 95       	ret

0000040c <UART_transmit_char>:
/**
 * Takes a character input into the function and transmits the character to the robot
 * @param character a char that indicates the character that is being transmitted to the robot
 */
void UART_transmit_char(char character){
	while ((UCSR0A & 0b00100000) == 0);
     40c:	5d 9b       	sbis	0x0b, 5	; 11
     40e:	fe cf       	rjmp	.-4      	; 0x40c <UART_transmit_char>
	UDR0 = character;
     410:	8c b9       	out	0x0c, r24	; 12
     412:	08 95       	ret

00000414 <IR_init>:
};

/////////////////////////////////////////////////////
/// Initialize IR Sensor
void IR_init(void){
	ADCSRA = 0b10000111;
     414:	87 e8       	ldi	r24, 0x87	; 135
     416:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0b110000010;
     418:	82 e8       	ldi	r24, 0x82	; 130
     41a:	87 b9       	out	0x07, r24	; 7
     41c:	08 95       	ret

0000041e <IR_read>:
}

///Read ADC values from IR sensor
unsigned int IR_read() {
	
	ADCSRA = (ADCSRA | 0b01000000);
     41e:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA == 0b11000111);
     420:	86 b1       	in	r24, 0x06	; 6
     422:	87 3c       	cpi	r24, 0xC7	; 199
     424:	e9 f3       	breq	.-6      	; 0x420 <IR_read+0x2>
	return ADC;
     426:	84 b1       	in	r24, 0x04	; 4
     428:	95 b1       	in	r25, 0x05	; 5
	
}
     42a:	08 95       	ret

0000042c <IR_lookup_init>:

/// Creates a lookup table to calculate the distance at each IR Sensor value
void IR_lookup_init()
{
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	09 eb       	ldi	r16, 0xB9	; 185
     436:	14 e0       	ldi	r17, 0x04	; 4
	for(int i = 0; i < 1024;)
     438:	c0 e0       	ldi	r28, 0x00	; 0
     43a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		IR_arr[i] = 15146 * pow(i,-1.066);
     43c:	be 01       	movw	r22, r28
     43e:	88 27       	eor	r24, r24
     440:	77 fd       	sbrc	r23, 7
     442:	80 95       	com	r24
     444:	98 2f       	mov	r25, r24
     446:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__floatsisf>
     44a:	20 eb       	ldi	r18, 0xB0	; 176
     44c:	32 e7       	ldi	r19, 0x72	; 114
     44e:	48 e8       	ldi	r20, 0x88	; 136
     450:	5f eb       	ldi	r21, 0xBF	; 191
     452:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <pow>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	38 ea       	ldi	r19, 0xA8	; 168
     45a:	4c e6       	ldi	r20, 0x6C	; 108
     45c:	56 e4       	ldi	r21, 0x46	; 70
     45e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__mulsf3>
     462:	0e 94 48 0c 	call	0x1890	; 0x1890 <__fixsfsi>
     466:	f8 01       	movw	r30, r16
     468:	61 93       	st	Z+, r22
     46a:	71 93       	st	Z+, r23
     46c:	8f 01       	movw	r16, r30
		i++;
     46e:	21 96       	adiw	r28, 0x01	; 1
}

/// Creates a lookup table to calculate the distance at each IR Sensor value
void IR_lookup_init()
{
	for(int i = 0; i < 1024;)
     470:	c1 15       	cp	r28, r1
     472:	f4 e0       	ldi	r31, 0x04	; 4
     474:	df 07       	cpc	r29, r31
     476:	11 f7       	brne	.-60     	; 0x43c <IR_lookup_init+0x10>
	{
		IR_arr[i] = 15146 * pow(i,-1.066);
		i++;
	}
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <IR_smooth>:

/// Smooths out the IR value by averaging the value of 5 IR readings and returns the value as a double
double IR_smooth()
{
     482:	cf 92       	push	r12
     484:	df 92       	push	r13
     486:	ef 92       	push	r14
     488:	ff 92       	push	r15
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	c5 e0       	ldi	r28, 0x05	; 5
     490:	d0 e0       	ldi	r29, 0x00	; 0
	double sum = 0;
     492:	c1 2c       	mov	r12, r1
     494:	d1 2c       	mov	r13, r1
     496:	76 01       	movw	r14, r12
	for(int i = 0; i < 5;)
	{
		int quantization = IR_read();
     498:	c2 df       	rcall	.-124    	; 0x41e <IR_read>
		sum = sum + IR_arr[quantization]; // 15146 * pow(quantization,-1.066);
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	fc 01       	movw	r30, r24
     4a0:	e7 54       	subi	r30, 0x47	; 71
     4a2:	fb 4f       	sbci	r31, 0xFB	; 251
     4a4:	60 81       	ld	r22, Z
     4a6:	71 81       	ldd	r23, Z+1	; 0x01
     4a8:	88 27       	eor	r24, r24
     4aa:	77 fd       	sbrc	r23, 7
     4ac:	80 95       	com	r24
     4ae:	98 2f       	mov	r25, r24
     4b0:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__floatsisf>
     4b4:	9b 01       	movw	r18, r22
     4b6:	ac 01       	movw	r20, r24
     4b8:	c7 01       	movw	r24, r14
     4ba:	b6 01       	movw	r22, r12
     4bc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     4c0:	6b 01       	movw	r12, r22
     4c2:	7c 01       	movw	r14, r24
     4c4:	21 97       	sbiw	r28, 0x01	; 1

/// Smooths out the IR value by averaging the value of 5 IR readings and returns the value as a double
double IR_smooth()
{
	double sum = 0;
	for(int i = 0; i < 5;)
     4c6:	20 97       	sbiw	r28, 0x00	; 0
     4c8:	39 f7       	brne	.-50     	; 0x498 <IR_smooth+0x16>
	{
		int quantization = IR_read();
		sum = sum + IR_arr[quantization]; // 15146 * pow(quantization,-1.066);
		i++;
	}
	return sum/5.0;
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 ea       	ldi	r20, 0xA0	; 160
     4d0:	50 e4       	ldi	r21, 0x40	; 64
     4d2:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__divsf3>
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	08 95       	ret

000004e4 <ping_init>:

/////////////////////////////////////////////////////
/// Initialize the Ping Sensor
void ping_init()
{
	TCCR1A = TCCR1A & 0b11111100;
     4e4:	8f b5       	in	r24, 0x2f	; 47
     4e6:	8c 7f       	andi	r24, 0xFC	; 252
     4e8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0b11000010;
     4ea:	82 ec       	ldi	r24, 0xC2	; 194
     4ec:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0b00000000;
     4ee:	10 92 7a 00 	sts	0x007A, r1
	TIMSK = 0b00100100;
     4f2:	84 e2       	ldi	r24, 0x24	; 36
     4f4:	87 bf       	out	0x37, r24	; 55
     4f6:	08 95       	ret

000004f8 <ping>:
}

/// Sends out a single ping
void ping()
{
	TIMSK &= 0b11011111;
     4f8:	87 b7       	in	r24, 0x37	; 55
     4fa:	8f 7d       	andi	r24, 0xDF	; 223
     4fc:	87 bf       	out	0x37, r24	; 55
	DDRD |= 0x10;
     4fe:	8c 9a       	sbi	0x11, 4	; 17
	PORTD |= 0x10;
     500:	94 9a       	sbi	0x12, 4	; 18
	wait_ms(1);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	44 df       	rcall	.-376    	; 0x390 <wait_ms>
	PORTD &= 0xEF;
     508:	94 98       	cbi	0x12, 4	; 18
	TIFR |= 0b00100000;
     50a:	86 b7       	in	r24, 0x36	; 54
     50c:	80 62       	ori	r24, 0x20	; 32
     50e:	86 bf       	out	0x36, r24	; 54
	DDRD &= 0xEF;
     510:	8c 98       	cbi	0x11, 4	; 17
	TIMSK |= 0b00100000;
     512:	87 b7       	in	r24, 0x37	; 55
     514:	80 62       	ori	r24, 0x20	; 32
     516:	87 bf       	out	0x37, r24	; 55
	TCCR1B = 0b11000100;
     518:	84 ec       	ldi	r24, 0xC4	; 196
     51a:	8e bd       	out	0x2e, r24	; 46
	
	wait_ms(25);
     51c:	89 e1       	ldi	r24, 0x19	; 25
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	37 cf       	rjmp	.-402    	; 0x390 <wait_ms>
     522:	08 95       	ret

00000524 <time_to_dist>:
 * Takes the input time and converts it to a distance value using the formula distance = velocity * time;
 * @param time a integer that indicates the desired time value
 */
void time_to_dist(int time)
{
	distance = (time * 0.000016)*17000;
     524:	bc 01       	movw	r22, r24
     526:	88 27       	eor	r24, r24
     528:	77 fd       	sbrc	r23, 7
     52a:	80 95       	com	r24
     52c:	98 2f       	mov	r25, r24
     52e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__floatsisf>
     532:	2d eb       	ldi	r18, 0xBD	; 189
     534:	37 e3       	ldi	r19, 0x37	; 55
     536:	46 e8       	ldi	r20, 0x86	; 134
     538:	57 e3       	ldi	r21, 0x37	; 55
     53a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__mulsf3>
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	30 ed       	ldi	r19, 0xD0	; 208
     542:	44 e8       	ldi	r20, 0x84	; 132
     544:	56 e4       	ldi	r21, 0x46	; 70
     546:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__mulsf3>
     54a:	0e 94 48 0c 	call	0x1890	; 0x1890 <__fixsfsi>
     54e:	70 93 b8 04 	sts	0x04B8, r23
     552:	60 93 b7 04 	sts	0x04B7, r22
     556:	08 95       	ret

00000558 <ping_read>:
}

/// Sends out a ping and calculates the distance between the object and the robot
void ping_read()
{
	ping();
     558:	cf df       	rcall	.-98     	; 0x4f8 <ping>
	time = time_current-time_last;
     55a:	80 91 bf 0c 	lds	r24, 0x0CBF
     55e:	90 91 c0 0c 	lds	r25, 0x0CC0
     562:	20 91 b9 0c 	lds	r18, 0x0CB9
     566:	30 91 ba 0c 	lds	r19, 0x0CBA
     56a:	82 1b       	sub	r24, r18
     56c:	93 0b       	sbc	r25, r19
     56e:	90 93 bc 0c 	sts	0x0CBC, r25
     572:	80 93 bb 0c 	sts	0x0CBB, r24
	time_to_dist(time);
     576:	80 91 bb 0c 	lds	r24, 0x0CBB
     57a:	90 91 bc 0c 	lds	r25, 0x0CBC
     57e:	d2 cf       	rjmp	.-92     	; 0x524 <time_to_dist>
     580:	08 95       	ret

00000582 <servo_init>:

/////////////////////////////////////////////////////
/// Initializes the servo
void servo_init()
{
	TCCR3B = 0b00011010;
     582:	8a e1       	ldi	r24, 0x1A	; 26
     584:	80 93 8a 00 	sts	0x008A, r24
	TCCR3A = 0b10101011;
     588:	8b ea       	ldi	r24, 0xAB	; 171
     58a:	80 93 8b 00 	sts	0x008B, r24
	OCR3A = 40000;
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	9c e9       	ldi	r25, 0x9C	; 156
     592:	90 93 87 00 	sts	0x0087, r25
     596:	80 93 86 00 	sts	0x0086, r24
	OCR3B = 3000;
     59a:	88 eb       	ldi	r24, 0xB8	; 184
     59c:	9b e0       	ldi	r25, 0x0B	; 11
     59e:	90 93 85 00 	sts	0x0085, r25
     5a2:	80 93 84 00 	sts	0x0084, r24
	
	DDRE = _BV(4);
     5a6:	80 e1       	ldi	r24, 0x10	; 16
     5a8:	82 b9       	out	0x02, r24	; 2
     5aa:	08 95       	ret

000005ac <move_servo>:
 * Adjusts the value of OCR3B so the servo faces the given direction between 0 and 180 degrees
 * @param deg a int between 0 and 180 indicating the desired position
 */
void move_servo(int deg)
{
	if(deg <= 180 && deg >= 0)
     5ac:	85 3b       	cpi	r24, 0xB5	; 181
     5ae:	91 05       	cpc	r25, r1
     5b0:	e0 f4       	brcc	.+56     	; 0x5ea <move_servo+0x3e>
	{
		OCR3B = CALIBRATE*deg + SERVO_BOT_VAL;
     5b2:	bc 01       	movw	r22, r24
     5b4:	88 27       	eor	r24, r24
     5b6:	77 fd       	sbrc	r23, 7
     5b8:	80 95       	com	r24
     5ba:	98 2f       	mov	r25, r24
     5bc:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <__floatsisf>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	44 ea       	ldi	r20, 0xA4	; 164
     5c6:	51 e4       	ldi	r21, 0x41	; 65
     5c8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <__mulsf3>
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	46 e1       	ldi	r20, 0x16	; 22
     5d2:	54 e4       	ldi	r21, 0x44	; 68
     5d4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     5d8:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fixunssfsi>
     5dc:	70 93 85 00 	sts	0x0085, r23
     5e0:	60 93 84 00 	sts	0x0084, r22
		//lprintf("Degree: %d\nDirection: %d\nRaw: %d",deg,dir,OCR3B);
		wait_ms(10);
     5e4:	8a e0       	ldi	r24, 0x0A	; 10
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	d3 ce       	rjmp	.-602    	; 0x390 <wait_ms>
     5ea:	08 95       	ret

000005ec <move_forward>:
 * Sets the wheels of the robot the desired speed for the distance given while constantly updating the sensor data to know when to stop the robot
 * @param sensor_data is a pointer that reads from the robots sensors and updates
 * @param speed a integer that indicates the desired speed of each wheel
 * @param distance_mm a integer that indicates the desired distance the robots needs to travel in millimeters 
 */
void move_forward(oi_t *sensor_data, int speed, int distance_mm) {
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	e2 97       	sbiw	r28, 0x32	; 50
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	8c 01       	movw	r16, r24
     60e:	cb 01       	movw	r24, r22
     610:	6a 01       	movw	r12, r20
	
	int sum = 0;
	oi_set_wheels(speed, speed); // move forward; full speed
     612:	30 d7       	rcall	.+3680   	; 0x1474 <oi_set_wheels>
	int force_stop_status = 0;	
	
	while (sum < distance_mm) {
     614:	1c 14       	cp	r1, r12
     616:	1d 04       	cpc	r1, r13
     618:	0c f0       	brlt	.+2      	; 0x61c <move_forward+0x30>
     61a:	88 c1       	rjmp	.+784    	; 0x92c <move_forward+0x340>
 * @param speed a integer that indicates the desired speed of each wheel
 * @param distance_mm a integer that indicates the desired distance the robots needs to travel in millimeters 
 */
void move_forward(oi_t *sensor_data, int speed, int distance_mm) {
	
	int sum = 0;
     61c:	e1 2c       	mov	r14, r1
     61e:	f1 2c       	mov	r15, r1
	oi_set_wheels(speed, speed); // move forward; full speed
	int force_stop_status = 0;	
	
	while (sum < distance_mm) {
		oi_update(sensor_data);
     620:	c8 01       	movw	r24, r16
     622:	80 d7       	rcall	.+3840   	; 0x1524 <oi_update>

		if(sensor_data->bumper_left) {
     624:	d8 01       	movw	r26, r16
     626:	8c 91       	ld	r24, X
     628:	81 ff       	sbrs	r24, 1
     62a:	19 c0       	rjmp	.+50     	; 0x65e <move_forward+0x72>
			oi_set_wheels(0, 0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	1f d7       	rcall	.+3646   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rLeft Bumper Hit\n\r";
     636:	84 e1       	ldi	r24, 0x14	; 20
     638:	e6 e0       	ldi	r30, 0x06	; 6
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	de 01       	movw	r26, r28
     63e:	55 96       	adiw	r26, 0x15	; 21
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <move_forward+0x54>
     648:	fe 01       	movw	r30, r28
     64a:	b9 96       	adiw	r30, 0x29	; 41
     64c:	8a e0       	ldi	r24, 0x0A	; 10
     64e:	df 01       	movw	r26, r30
     650:	1d 92       	st	X+, r1
     652:	8a 95       	dec	r24
     654:	e9 f7       	brne	.-6      	; 0x650 <move_forward+0x64>
			UART_transmit_str(warning);
     656:	ce 01       	movw	r24, r28
     658:	45 96       	adiw	r24, 0x15	; 21
     65a:	c0 de       	rcall	.-640    	; 0x3dc <UART_transmit_str>
     65c:	6f c1       	rjmp	.+734    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}	
		if(sensor_data->bumper_right) {
     65e:	80 ff       	sbrs	r24, 0
     660:	19 c0       	rjmp	.+50     	; 0x694 <move_forward+0xa8>
			oi_set_wheels(0, 0);
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	04 d7       	rcall	.+3592   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rRight Bumper Hit\n\r";
     66c:	85 e1       	ldi	r24, 0x15	; 21
     66e:	e4 e2       	ldi	r30, 0x24	; 36
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	de 01       	movw	r26, r28
     674:	55 96       	adiw	r26, 0x15	; 21
     676:	01 90       	ld	r0, Z+
     678:	0d 92       	st	X+, r0
     67a:	8a 95       	dec	r24
     67c:	e1 f7       	brne	.-8      	; 0x676 <move_forward+0x8a>
     67e:	fe 01       	movw	r30, r28
     680:	ba 96       	adiw	r30, 0x2a	; 42
     682:	89 e0       	ldi	r24, 0x09	; 9
     684:	df 01       	movw	r26, r30
     686:	1d 92       	st	X+, r1
     688:	8a 95       	dec	r24
     68a:	e9 f7       	brne	.-6      	; 0x686 <move_forward+0x9a>
			UART_transmit_str(warning);
     68c:	ce 01       	movw	r24, r28
     68e:	45 96       	adiw	r24, 0x15	; 21
     690:	a5 de       	rcall	.-694    	; 0x3dc <UART_transmit_str>
     692:	54 c1       	rjmp	.+680    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->wheeldrop_caster == 1) {
     694:	84 ff       	sbrs	r24, 4
     696:	19 c0       	rjmp	.+50     	; 0x6ca <move_forward+0xde>
			oi_set_wheels(0, 0);
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	e9 d6       	rcall	.+3538   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rFront Wheel Drop\n\r";
     6a2:	85 e1       	ldi	r24, 0x15	; 21
     6a4:	e2 e4       	ldi	r30, 0x42	; 66
     6a6:	f1 e0       	ldi	r31, 0x01	; 1
     6a8:	de 01       	movw	r26, r28
     6aa:	55 96       	adiw	r26, 0x15	; 21
     6ac:	01 90       	ld	r0, Z+
     6ae:	0d 92       	st	X+, r0
     6b0:	8a 95       	dec	r24
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <move_forward+0xc0>
     6b4:	fe 01       	movw	r30, r28
     6b6:	ba 96       	adiw	r30, 0x2a	; 42
     6b8:	89 e0       	ldi	r24, 0x09	; 9
     6ba:	df 01       	movw	r26, r30
     6bc:	1d 92       	st	X+, r1
     6be:	8a 95       	dec	r24
     6c0:	e9 f7       	brne	.-6      	; 0x6bc <move_forward+0xd0>
			UART_transmit_str(warning);
     6c2:	ce 01       	movw	r24, r28
     6c4:	45 96       	adiw	r24, 0x15	; 21
     6c6:	8a de       	rcall	.-748    	; 0x3dc <UART_transmit_str>
     6c8:	39 c1       	rjmp	.+626    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		/////////////////////////////////////////////////////
		if(sensor_data->cliff_frontleft_signal > FRONTLEFT_OB) {
     6ca:	f8 01       	movw	r30, r16
     6cc:	86 8d       	ldd	r24, Z+30	; 0x1e
     6ce:	97 8d       	ldd	r25, Z+31	; 0x1f
     6d0:	83 3c       	cpi	r24, 0xC3	; 195
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	9f 07       	cpc	r25, r31
     6d6:	c8 f0       	brcs	.+50     	; 0x70a <move_forward+0x11e>
			oi_set_wheels(0, 0);
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	c9 d6       	rcall	.+3474   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rFront Left OB\n\r";
     6e2:	82 e1       	ldi	r24, 0x12	; 18
     6e4:	e0 e6       	ldi	r30, 0x60	; 96
     6e6:	f1 e0       	ldi	r31, 0x01	; 1
     6e8:	de 01       	movw	r26, r28
     6ea:	55 96       	adiw	r26, 0x15	; 21
     6ec:	01 90       	ld	r0, Z+
     6ee:	0d 92       	st	X+, r0
     6f0:	8a 95       	dec	r24
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <move_forward+0x100>
     6f4:	fe 01       	movw	r30, r28
     6f6:	b7 96       	adiw	r30, 0x27	; 39
     6f8:	8c e0       	ldi	r24, 0x0C	; 12
     6fa:	df 01       	movw	r26, r30
     6fc:	1d 92       	st	X+, r1
     6fe:	8a 95       	dec	r24
     700:	e9 f7       	brne	.-6      	; 0x6fc <move_forward+0x110>
			UART_transmit_str(warning);
     702:	ce 01       	movw	r24, r28
     704:	45 96       	adiw	r24, 0x15	; 21
     706:	6a de       	rcall	.-812    	; 0x3dc <UART_transmit_str>
     708:	19 c1       	rjmp	.+562    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_frontright_signal > FRONTRIGHT_OB) {
     70a:	f8 01       	movw	r30, r16
     70c:	20 a1       	ldd	r18, Z+32	; 0x20
     70e:	31 a1       	ldd	r19, Z+33	; 0x21
     710:	27 32       	cpi	r18, 0x27	; 39
     712:	f2 e0       	ldi	r31, 0x02	; 2
     714:	3f 07       	cpc	r19, r31
     716:	c8 f0       	brcs	.+50     	; 0x74a <move_forward+0x15e>
			oi_set_wheels(0, 0);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	a9 d6       	rcall	.+3410   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rFront Right OB\n\r";
     722:	83 e1       	ldi	r24, 0x13	; 19
     724:	ee e7       	ldi	r30, 0x7E	; 126
     726:	f1 e0       	ldi	r31, 0x01	; 1
     728:	de 01       	movw	r26, r28
     72a:	55 96       	adiw	r26, 0x15	; 21
     72c:	01 90       	ld	r0, Z+
     72e:	0d 92       	st	X+, r0
     730:	8a 95       	dec	r24
     732:	e1 f7       	brne	.-8      	; 0x72c <move_forward+0x140>
     734:	fe 01       	movw	r30, r28
     736:	b8 96       	adiw	r30, 0x28	; 40
     738:	8b e0       	ldi	r24, 0x0B	; 11
     73a:	df 01       	movw	r26, r30
     73c:	1d 92       	st	X+, r1
     73e:	8a 95       	dec	r24
     740:	e9 f7       	brne	.-6      	; 0x73c <move_forward+0x150>
			UART_transmit_str(warning);
     742:	ce 01       	movw	r24, r28
     744:	45 96       	adiw	r24, 0x15	; 21
     746:	4a de       	rcall	.-876    	; 0x3dc <UART_transmit_str>
     748:	f9 c0       	rjmp	.+498    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_left_signal > LEFTSIDE_OB) {
     74a:	f8 01       	movw	r30, r16
     74c:	44 8d       	ldd	r20, Z+28	; 0x1c
     74e:	55 8d       	ldd	r21, Z+29	; 0x1d
     750:	49 3e       	cpi	r20, 0xE9	; 233
     752:	f3 e0       	ldi	r31, 0x03	; 3
     754:	5f 07       	cpc	r21, r31
     756:	c8 f0       	brcs	.+50     	; 0x78a <move_forward+0x19e>
			oi_set_wheels(0, 0);
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	89 d6       	rcall	.+3346   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rLeft Side OB\n\r";
     762:	81 e1       	ldi	r24, 0x11	; 17
     764:	ec e9       	ldi	r30, 0x9C	; 156
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	de 01       	movw	r26, r28
     76a:	55 96       	adiw	r26, 0x15	; 21
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <move_forward+0x180>
     774:	fe 01       	movw	r30, r28
     776:	b6 96       	adiw	r30, 0x26	; 38
     778:	8d e0       	ldi	r24, 0x0D	; 13
     77a:	df 01       	movw	r26, r30
     77c:	1d 92       	st	X+, r1
     77e:	8a 95       	dec	r24
     780:	e9 f7       	brne	.-6      	; 0x77c <move_forward+0x190>
			UART_transmit_str(warning);
     782:	ce 01       	movw	r24, r28
     784:	45 96       	adiw	r24, 0x15	; 21
     786:	2a de       	rcall	.-940    	; 0x3dc <UART_transmit_str>
     788:	d9 c0       	rjmp	.+434    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_right_signal > RIGHTSIDE_OB) {
     78a:	f8 01       	movw	r30, r16
     78c:	62 a1       	ldd	r22, Z+34	; 0x22
     78e:	73 a1       	ldd	r23, Z+35	; 0x23
     790:	63 3c       	cpi	r22, 0xC3	; 195
     792:	f1 e0       	ldi	r31, 0x01	; 1
     794:	7f 07       	cpc	r23, r31
     796:	c8 f0       	brcs	.+50     	; 0x7ca <move_forward+0x1de>
			oi_set_wheels(0, 0);
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	69 d6       	rcall	.+3282   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rRight Side OB\n\r";
     7a2:	82 e1       	ldi	r24, 0x12	; 18
     7a4:	ea eb       	ldi	r30, 0xBA	; 186
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	de 01       	movw	r26, r28
     7aa:	55 96       	adiw	r26, 0x15	; 21
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	8a 95       	dec	r24
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <move_forward+0x1c0>
     7b4:	fe 01       	movw	r30, r28
     7b6:	b7 96       	adiw	r30, 0x27	; 39
     7b8:	8c e0       	ldi	r24, 0x0C	; 12
     7ba:	df 01       	movw	r26, r30
     7bc:	1d 92       	st	X+, r1
     7be:	8a 95       	dec	r24
     7c0:	e9 f7       	brne	.-6      	; 0x7bc <move_forward+0x1d0>
			UART_transmit_str(warning);
     7c2:	ce 01       	movw	r24, r28
     7c4:	45 96       	adiw	r24, 0x15	; 21
     7c6:	0a de       	rcall	.-1004   	; 0x3dc <UART_transmit_str>
     7c8:	b9 c0       	rjmp	.+370    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		///////////////////////////////////////////////////
		if(sensor_data->cliff_frontleft_signal <= 0) {
     7ca:	89 2b       	or	r24, r25
     7cc:	c9 f4       	brne	.+50     	; 0x800 <move_forward+0x214>
			oi_set_wheels(0, 0);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	4e d6       	rcall	.+3228   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rFrontLeft Crater\n\r";
     7d8:	85 e1       	ldi	r24, 0x15	; 21
     7da:	e8 ed       	ldi	r30, 0xD8	; 216
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	de 01       	movw	r26, r28
     7e0:	55 96       	adiw	r26, 0x15	; 21
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <move_forward+0x1f6>
     7ea:	fe 01       	movw	r30, r28
     7ec:	ba 96       	adiw	r30, 0x2a	; 42
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	df 01       	movw	r26, r30
     7f2:	1d 92       	st	X+, r1
     7f4:	8a 95       	dec	r24
     7f6:	e9 f7       	brne	.-6      	; 0x7f2 <move_forward+0x206>
			UART_transmit_str(warning);
     7f8:	ce 01       	movw	r24, r28
     7fa:	45 96       	adiw	r24, 0x15	; 21
     7fc:	ef dd       	rcall	.-1058   	; 0x3dc <UART_transmit_str>
     7fe:	9e c0       	rjmp	.+316    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_frontright_signal <= 0) {
     800:	23 2b       	or	r18, r19
     802:	c9 f4       	brne	.+50     	; 0x836 <move_forward+0x24a>
			oi_set_wheels(0, 0);
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	33 d6       	rcall	.+3174   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rFrontRight Crater\n\r";
     80e:	86 e1       	ldi	r24, 0x16	; 22
     810:	e6 ef       	ldi	r30, 0xF6	; 246
     812:	f1 e0       	ldi	r31, 0x01	; 1
     814:	de 01       	movw	r26, r28
     816:	55 96       	adiw	r26, 0x15	; 21
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	8a 95       	dec	r24
     81e:	e1 f7       	brne	.-8      	; 0x818 <move_forward+0x22c>
     820:	fe 01       	movw	r30, r28
     822:	bb 96       	adiw	r30, 0x2b	; 43
     824:	88 e0       	ldi	r24, 0x08	; 8
     826:	df 01       	movw	r26, r30
     828:	1d 92       	st	X+, r1
     82a:	8a 95       	dec	r24
     82c:	e9 f7       	brne	.-6      	; 0x828 <move_forward+0x23c>
			UART_transmit_str(warning);
     82e:	ce 01       	movw	r24, r28
     830:	45 96       	adiw	r24, 0x15	; 21
     832:	d4 dd       	rcall	.-1112   	; 0x3dc <UART_transmit_str>
     834:	83 c0       	rjmp	.+262    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_left_signal <= 0) {
     836:	45 2b       	or	r20, r21
     838:	c9 f4       	brne	.+50     	; 0x86c <move_forward+0x280>
			oi_set_wheels(0, 0);
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	18 d6       	rcall	.+3120   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rLeft Side Crater\n\r";
     844:	85 e1       	ldi	r24, 0x15	; 21
     846:	e4 e1       	ldi	r30, 0x14	; 20
     848:	f2 e0       	ldi	r31, 0x02	; 2
     84a:	de 01       	movw	r26, r28
     84c:	55 96       	adiw	r26, 0x15	; 21
     84e:	01 90       	ld	r0, Z+
     850:	0d 92       	st	X+, r0
     852:	8a 95       	dec	r24
     854:	e1 f7       	brne	.-8      	; 0x84e <move_forward+0x262>
     856:	fe 01       	movw	r30, r28
     858:	ba 96       	adiw	r30, 0x2a	; 42
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	df 01       	movw	r26, r30
     85e:	1d 92       	st	X+, r1
     860:	8a 95       	dec	r24
     862:	e9 f7       	brne	.-6      	; 0x85e <move_forward+0x272>
			UART_transmit_str(warning);
     864:	ce 01       	movw	r24, r28
     866:	45 96       	adiw	r24, 0x15	; 21
     868:	b9 dd       	rcall	.-1166   	; 0x3dc <UART_transmit_str>
     86a:	68 c0       	rjmp	.+208    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		if(sensor_data->cliff_right_signal <= 0) {
     86c:	67 2b       	or	r22, r23
     86e:	c9 f4       	brne	.+50     	; 0x8a2 <move_forward+0x2b6>
			oi_set_wheels(0, 0);
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	fd d5       	rcall	.+3066   	; 0x1474 <oi_set_wheels>
			char warning[30] = "\n\rRight Side Crater\n\r";
     87a:	86 e1       	ldi	r24, 0x16	; 22
     87c:	e2 e3       	ldi	r30, 0x32	; 50
     87e:	f2 e0       	ldi	r31, 0x02	; 2
     880:	de 01       	movw	r26, r28
     882:	55 96       	adiw	r26, 0x15	; 21
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	8a 95       	dec	r24
     88a:	e1 f7       	brne	.-8      	; 0x884 <move_forward+0x298>
     88c:	fe 01       	movw	r30, r28
     88e:	bb 96       	adiw	r30, 0x2b	; 43
     890:	88 e0       	ldi	r24, 0x08	; 8
     892:	df 01       	movw	r26, r30
     894:	1d 92       	st	X+, r1
     896:	8a 95       	dec	r24
     898:	e9 f7       	brne	.-6      	; 0x894 <move_forward+0x2a8>
			UART_transmit_str(warning);
     89a:	ce 01       	movw	r24, r28
     89c:	45 96       	adiw	r24, 0x15	; 21
     89e:	9e dd       	rcall	.-1220   	; 0x3dc <UART_transmit_str>
     8a0:	4d c0       	rjmp	.+154    	; 0x93c <move_forward+0x350>
			force_stop_status = 1;
			break;
		}
		/////////////////////////////////////////////////
		else sum += sensor_data->distance;
     8a2:	f8 01       	movw	r30, r16
     8a4:	84 85       	ldd	r24, Z+12	; 0x0c
     8a6:	95 85       	ldd	r25, Z+13	; 0x0d
     8a8:	e8 0e       	add	r14, r24
     8aa:	f9 1e       	adc	r15, r25
	
	int sum = 0;
	oi_set_wheels(speed, speed); // move forward; full speed
	int force_stop_status = 0;	
	
	while (sum < distance_mm) {
     8ac:	ec 14       	cp	r14, r12
     8ae:	fd 04       	cpc	r15, r13
     8b0:	0c f4       	brge	.+2      	; 0x8b4 <move_forward+0x2c8>
     8b2:	b6 ce       	rjmp	.-660    	; 0x620 <move_forward+0x34>
     8b4:	3d c0       	rjmp	.+122    	; 0x930 <move_forward+0x344>
	
	if(force_stop_status == 1){
		int sum2 = 0;
		 oi_set_wheels(-50,-50);
		 while(sum2 > -50) {
			oi_update(sensor_data);	 
     8b6:	c8 01       	movw	r24, r16
     8b8:	35 d6       	rcall	.+3178   	; 0x1524 <oi_update>
			sum2 += sensor_data->distance;
     8ba:	d8 01       	movw	r26, r16
     8bc:	1c 96       	adiw	r26, 0x0c	; 12
     8be:	8d 91       	ld	r24, X+
     8c0:	9c 91       	ld	r25, X
     8c2:	1d 97       	sbiw	r26, 0x0d	; 13
     8c4:	c8 0e       	add	r12, r24
     8c6:	d9 1e       	adc	r13, r25
	oi_set_wheels(0, 0); // stop
	
	if(force_stop_status == 1){
		int sum2 = 0;
		 oi_set_wheels(-50,-50);
		 while(sum2 > -50) {
     8c8:	bf ec       	ldi	r27, 0xCF	; 207
     8ca:	cb 16       	cp	r12, r27
     8cc:	bf ef       	ldi	r27, 0xFF	; 255
     8ce:	db 06       	cpc	r13, r27
     8d0:	94 f7       	brge	.-28     	; 0x8b6 <move_forward+0x2ca>
			oi_update(sensor_data);	 
			sum2 += sensor_data->distance;
		 }
		oi_set_wheels(0,0);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	cc d5       	rcall	.+2968   	; 0x1474 <oi_set_wheels>
		sum = sum + sum2;
     8dc:	ec 0c       	add	r14, r12
     8de:	fd 1c       	adc	r15, r13
	}
	
	
	
	char traveldist[20] = "";
     8e0:	19 82       	std	Y+1, r1	; 0x01
     8e2:	1a 82       	std	Y+2, r1	; 0x02
     8e4:	1b 82       	std	Y+3, r1	; 0x03
     8e6:	1c 82       	std	Y+4, r1	; 0x04
     8e8:	fe 01       	movw	r30, r28
     8ea:	35 96       	adiw	r30, 0x05	; 5
     8ec:	80 e1       	ldi	r24, 0x10	; 16
     8ee:	df 01       	movw	r26, r30
     8f0:	1d 92       	st	X+, r1
     8f2:	8a 95       	dec	r24
     8f4:	e9 f7       	brne	.-6      	; 0x8f0 <move_forward+0x304>
	int cm_dist = sum/10;
     8f6:	c7 01       	movw	r24, r14
     8f8:	6a e0       	ldi	r22, 0x0A	; 10
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	0e 94 af 12 	call	0x255e	; 0x255e <__divmodhi4>
	sprintf(traveldist, "\n\r%d\n\r", cm_dist);
     900:	7f 93       	push	r23
     902:	6f 93       	push	r22
     904:	86 ed       	ldi	r24, 0xD6	; 214
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	8e 01       	movw	r16, r28
     90e:	0f 5f       	subi	r16, 0xFF	; 255
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	1f 93       	push	r17
     914:	0f 93       	push	r16
     916:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
	UART_transmit_str(traveldist);
     91a:	c8 01       	movw	r24, r16
     91c:	5f dd       	rcall	.-1346   	; 0x3dc <UART_transmit_str>
	
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	15 c0       	rjmp	.+42     	; 0x956 <move_forward+0x36a>
 * @param speed a integer that indicates the desired speed of each wheel
 * @param distance_mm a integer that indicates the desired distance the robots needs to travel in millimeters 
 */
void move_forward(oi_t *sensor_data, int speed, int distance_mm) {
	
	int sum = 0;
     92c:	e1 2c       	mov	r14, r1
     92e:	f1 2c       	mov	r15, r1
		}
		/////////////////////////////////////////////////
		else sum += sensor_data->distance;
	}
	
	oi_set_wheels(0, 0); // stop
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	9d d5       	rcall	.+2874   	; 0x1474 <oi_set_wheels>
     93a:	d2 cf       	rjmp	.-92     	; 0x8e0 <move_forward+0x2f4>
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	97 d5       	rcall	.+2862   	; 0x1474 <oi_set_wheels>
	
	if(force_stop_status == 1){
		int sum2 = 0;
		 oi_set_wheels(-50,-50);
     946:	6e ec       	ldi	r22, 0xCE	; 206
     948:	7f ef       	ldi	r23, 0xFF	; 255
     94a:	8e ec       	ldi	r24, 0xCE	; 206
     94c:	9f ef       	ldi	r25, 0xFF	; 255
     94e:	92 d5       	rcall	.+2852   	; 0x1474 <oi_set_wheels>
	}
	
	oi_set_wheels(0, 0); // stop
	
	if(force_stop_status == 1){
		int sum2 = 0;
     950:	c1 2c       	mov	r12, r1
     952:	d1 2c       	mov	r13, r1
     954:	b0 cf       	rjmp	.-160    	; 0x8b6 <move_forward+0x2ca>
	char traveldist[20] = "";
	int cm_dist = sum/10;
	sprintf(traveldist, "\n\r%d\n\r", cm_dist);
	UART_transmit_str(traveldist);
	
}
     956:	e2 96       	adiw	r28, 0x32	; 50
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	08 95       	ret

00000974 <turn_cw>:
/*
 * Sets each wheel of the robot to equal and opposite speeds to rotate the robot the desired degrees while constantly updating the sensor data to know when to stop the robot 
 * @param sensor_data is a pointer that reads from the robots sensors and updates
 * @param degrees a integer that indicates the desired rotation angle
 */
void turn_cw(oi_t *sensor_data, int degrees) {
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	8c 01       	movw	r16, r24
     982:	7b 01       	movw	r14, r22
	
	int degrees_turned = 0;
	oi_set_wheels(-100,100);
     984:	64 e6       	ldi	r22, 0x64	; 100
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	8c e9       	ldi	r24, 0x9C	; 156
     98a:	9f ef       	ldi	r25, 0xFF	; 255
     98c:	73 d5       	rcall	.+2790   	; 0x1474 <oi_set_wheels>
	
	while(abs(degrees_turned) < degrees) {
     98e:	1e 14       	cp	r1, r14
     990:	1f 04       	cpc	r1, r15
     992:	b4 f4       	brge	.+44     	; 0x9c0 <turn_cw+0x4c>
 * @param sensor_data is a pointer that reads from the robots sensors and updates
 * @param degrees a integer that indicates the desired rotation angle
 */
void turn_cw(oi_t *sensor_data, int degrees) {
	
	int degrees_turned = 0;
     994:	c0 e0       	ldi	r28, 0x00	; 0
     996:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(-100,100);
	
	while(abs(degrees_turned) < degrees) {
		wait_ms(5);
     998:	85 e0       	ldi	r24, 0x05	; 5
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	f9 dc       	rcall	.-1550   	; 0x390 <wait_ms>
		oi_update(sensor_data);
     99e:	c8 01       	movw	r24, r16
     9a0:	c1 d5       	rcall	.+2946   	; 0x1524 <oi_update>
		degrees_turned += sensor_data->angle;
     9a2:	f8 01       	movw	r30, r16
     9a4:	86 85       	ldd	r24, Z+14	; 0x0e
     9a6:	97 85       	ldd	r25, Z+15	; 0x0f
     9a8:	c8 0f       	add	r28, r24
     9aa:	d9 1f       	adc	r29, r25
void turn_cw(oi_t *sensor_data, int degrees) {
	
	int degrees_turned = 0;
	oi_set_wheels(-100,100);
	
	while(abs(degrees_turned) < degrees) {
     9ac:	9e 01       	movw	r18, r28
     9ae:	dd 23       	and	r29, r29
     9b0:	24 f4       	brge	.+8      	; 0x9ba <turn_cw+0x46>
     9b2:	22 27       	eor	r18, r18
     9b4:	33 27       	eor	r19, r19
     9b6:	2c 1b       	sub	r18, r28
     9b8:	3d 0b       	sbc	r19, r29
     9ba:	2e 15       	cp	r18, r14
     9bc:	3f 05       	cpc	r19, r15
     9be:	64 f3       	brlt	.-40     	; 0x998 <turn_cw+0x24>
		wait_ms(5);
		oi_update(sensor_data);
		degrees_turned += sensor_data->angle;
	}
	
	oi_set_wheels(0,0);
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	55 d5       	rcall	.+2730   	; 0x1474 <oi_set_wheels>
	
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	08 95       	ret

000009d8 <turn_ccw>:
/*
 * Sets each wheel of the robot to equal and opposite speeds to rotate the robot the desired degrees while constantly updating the sensor data to know when to stop the robot 
 * @param sensor_data is a pointer that reads from the robots sensors and updates
 * @param degrees a integer that indicates the desired rotation angle
 */
void turn_ccw(oi_t *sensor_data, int degrees) {
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	8c 01       	movw	r16, r24
     9e6:	7b 01       	movw	r14, r22
	int degrees_turned = 0;
	oi_set_wheels(100,-100);
     9e8:	6c e9       	ldi	r22, 0x9C	; 156
     9ea:	7f ef       	ldi	r23, 0xFF	; 255
     9ec:	84 e6       	ldi	r24, 0x64	; 100
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	41 d5       	rcall	.+2690   	; 0x1474 <oi_set_wheels>
	
	while(degrees_turned < degrees) {
     9f2:	1e 14       	cp	r1, r14
     9f4:	1f 04       	cpc	r1, r15
     9f6:	7c f4       	brge	.+30     	; 0xa16 <turn_ccw+0x3e>
 * Sets each wheel of the robot to equal and opposite speeds to rotate the robot the desired degrees while constantly updating the sensor data to know when to stop the robot 
 * @param sensor_data is a pointer that reads from the robots sensors and updates
 * @param degrees a integer that indicates the desired rotation angle
 */
void turn_ccw(oi_t *sensor_data, int degrees) {
	int degrees_turned = 0;
     9f8:	c0 e0       	ldi	r28, 0x00	; 0
     9fa:	d0 e0       	ldi	r29, 0x00	; 0
	oi_set_wheels(100,-100);
	
	while(degrees_turned < degrees) {
		wait_ms(5);
     9fc:	85 e0       	ldi	r24, 0x05	; 5
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	c7 dc       	rcall	.-1650   	; 0x390 <wait_ms>
		oi_update(sensor_data);
     a02:	c8 01       	movw	r24, r16
     a04:	8f d5       	rcall	.+2846   	; 0x1524 <oi_update>
		degrees_turned += sensor_data->angle;
     a06:	f8 01       	movw	r30, r16
     a08:	86 85       	ldd	r24, Z+14	; 0x0e
     a0a:	97 85       	ldd	r25, Z+15	; 0x0f
     a0c:	c8 0f       	add	r28, r24
     a0e:	d9 1f       	adc	r29, r25
 */
void turn_ccw(oi_t *sensor_data, int degrees) {
	int degrees_turned = 0;
	oi_set_wheels(100,-100);
	
	while(degrees_turned < degrees) {
     a10:	ce 15       	cp	r28, r14
     a12:	df 05       	cpc	r29, r15
     a14:	9c f3       	brlt	.-26     	; 0x9fc <turn_ccw+0x24>
		wait_ms(5);
		oi_update(sensor_data);
		degrees_turned += sensor_data->angle;
	}
	
	oi_set_wheels(0,0);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	2a d5       	rcall	.+2644   	; 0x1474 <oi_set_wheels>
	
	
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <sensor_sweep_init>:
/*
 * Displays the degrees, IR distance, and sonar distance column 
 * headers so the data received from the sensor can be displayed 
 * underneath their respected columns.
 */
void sensor_sweep_init() {
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	e3 97       	sbiw	r28, 0x33	; 51
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
	
	char print1[] = "Degrees   ";
     a42:	8b e0       	ldi	r24, 0x0B	; 11
     a44:	ed ed       	ldi	r30, 0xDD	; 221
     a46:	f3 e0       	ldi	r31, 0x03	; 3
     a48:	de 01       	movw	r26, r28
     a4a:	11 96       	adiw	r26, 0x01	; 1
     a4c:	01 90       	ld	r0, Z+
     a4e:	0d 92       	st	X+, r0
     a50:	8a 95       	dec	r24
     a52:	e1 f7       	brne	.-8      	; 0xa4c <sensor_sweep_init+0x1e>
	char print2[] = "IR Distance (cm)   ";
     a54:	84 e1       	ldi	r24, 0x14	; 20
     a56:	e8 ee       	ldi	r30, 0xE8	; 232
     a58:	f3 e0       	ldi	r31, 0x03	; 3
     a5a:	de 01       	movw	r26, r28
     a5c:	1c 96       	adiw	r26, 0x0c	; 12
     a5e:	01 90       	ld	r0, Z+
     a60:	0d 92       	st	X+, r0
     a62:	8a 95       	dec	r24
     a64:	e1 f7       	brne	.-8      	; 0xa5e <sensor_sweep_init+0x30>
	char print3[] = "Sonar Distance (cm)";
     a66:	84 e1       	ldi	r24, 0x14	; 20
     a68:	ec ef       	ldi	r30, 0xFC	; 252
     a6a:	f3 e0       	ldi	r31, 0x03	; 3
     a6c:	de 01       	movw	r26, r28
     a6e:	90 96       	adiw	r26, 0x20	; 32
     a70:	01 90       	ld	r0, Z+
     a72:	0d 92       	st	X+, r0
     a74:	8a 95       	dec	r24
     a76:	e1 f7       	brne	.-8      	; 0xa70 <sensor_sweep_init+0x42>
	
	UART_transmit_str(print1);
     a78:	ce 01       	movw	r24, r28
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	af dc       	rcall	.-1698   	; 0x3dc <UART_transmit_str>
	UART_transmit_str(print2);
     a7e:	ce 01       	movw	r24, r28
     a80:	0c 96       	adiw	r24, 0x0c	; 12
     a82:	ac dc       	rcall	.-1704   	; 0x3dc <UART_transmit_str>
	UART_transmit_str(print3);
     a84:	ce 01       	movw	r24, r28
     a86:	80 96       	adiw	r24, 0x20	; 32
     a88:	a9 dc       	rcall	.-1710   	; 0x3dc <UART_transmit_str>
	
	UART_transmit_char('\n');
     a8a:	8a e0       	ldi	r24, 0x0A	; 10
     a8c:	bf dc       	rcall	.-1666   	; 0x40c <UART_transmit_char>
	UART_transmit_char('\r');
     a8e:	8d e0       	ldi	r24, 0x0D	; 13
     a90:	bd dc       	rcall	.-1670   	; 0x40c <UART_transmit_char>
}
     a92:	e3 96       	adiw	r28, 0x33	; 51
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <sensor_sweep>:
/// Sweeps the servo to collect data while running the ping sensor and IR sensor.
/*
 * Uses the move_servo function to move servo from 0 to 180 degrees to gather data from the sensors in order to 
 * know the amount of objects, size of objects, and the distance of the objects from the robot 
 */
void sensor_sweep() {
     aa4:	2f 92       	push	r2
     aa6:	3f 92       	push	r3
     aa8:	4f 92       	push	r4
     aaa:	5f 92       	push	r5
     aac:	6f 92       	push	r6
     aae:	7f 92       	push	r7
     ab0:	8f 92       	push	r8
     ab2:	9f 92       	push	r9
     ab4:	af 92       	push	r10
     ab6:	bf 92       	push	r11
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
     acc:	c4 5b       	subi	r28, 0xB4	; 180
     ace:	d1 09       	sbc	r29, r1
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	f8 94       	cli
     ad4:	de bf       	out	0x3e, r29	; 62
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	cd bf       	out	0x3d, r28	; 61
	int startDegrees;
	int timesSeen = 0;
	int sonarDistance;
	struct Object objects[10];
	
	for(int deg = 0; deg <= 180; deg+=2) {
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	10 e0       	ldi	r17, 0x00	; 0
void sensor_sweep() {
	
	int objectIndex = 0;
	int lastSeenDegrees;
	int startDegrees;
	int timesSeen = 0;
     ade:	e1 2c       	mov	r14, r1
     ae0:	f1 2c       	mov	r15, r1
 * Uses the move_servo function to move servo from 0 to 180 degrees to gather data from the sensors in order to 
 * know the amount of objects, size of objects, and the distance of the objects from the robot 
 */
void sensor_sweep() {
	
	int objectIndex = 0;
     ae2:	c5 55       	subi	r28, 0x55	; 85
     ae4:	df 4f       	sbci	r29, 0xFF	; 255
     ae6:	19 82       	std	Y+1, r1	; 0x01
     ae8:	18 82       	st	Y, r1
     aea:	cb 5a       	subi	r28, 0xAB	; 171
     aec:	d0 40       	sbci	r29, 0x00	; 0
			ang_dist = 0;
			x = 0;
			prev_dist = IR_dist;
			*/
		}
		char output[50] = "";
     aee:	1e 01       	movw	r2, r28
     af0:	29 e7       	ldi	r18, 0x79	; 121
     af2:	22 0e       	add	r2, r18
     af4:	31 1c       	adc	r3, r1
     af6:	c1 01       	movw	r24, r2
     af8:	04 96       	adiw	r24, 0x04	; 4
     afa:	cd 54       	subi	r28, 0x4D	; 77
     afc:	df 4f       	sbci	r29, 0xFF	; 255
     afe:	99 83       	std	Y+1, r25	; 0x01
     b00:	88 83       	st	Y, r24
     b02:	c3 5b       	subi	r28, 0xB3	; 179
     b04:	d0 40       	sbci	r29, 0x00	; 0
	int sonarDistance;
	struct Object objects[10];
	
	for(int deg = 0; deg <= 180; deg+=2) {
		
		move_servo(deg);
     b06:	c8 01       	movw	r24, r16
     b08:	51 dd       	rcall	.-1374   	; 0x5ac <move_servo>
		double IR_dist = IR_smooth();
     b0a:	bb dc       	rcall	.-1674   	; 0x482 <IR_smooth>
     b0c:	b6 2e       	mov	r11, r22
     b0e:	a7 2e       	mov	r10, r23
     b10:	98 2e       	mov	r9, r24
     b12:	89 2e       	mov	r8, r25
		ping_read();
     b14:	21 dd       	rcall	.-1470   	; 0x558 <ping_read>
		int Sonar_dist = distance;
     b16:	c0 90 b7 04 	lds	r12, 0x04B7
     b1a:	d0 90 b8 04 	lds	r13, 0x04B8
		wait_ms(100);
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	36 dc       	rcall	.-1940   	; 0x390 <wait_ms>
		
		//if(IR_dist < 100)
		if ((abs(Sonar_dist - IR_dist) <= 30) && (Sonar_dist < 60) && (deg != 180))
     b24:	b6 01       	movw	r22, r12
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	e3 d6       	rcall	.+3526   	; 0x18f6 <__floatsisf>
     b30:	2b 2d       	mov	r18, r11
     b32:	3a 2d       	mov	r19, r10
     b34:	49 2d       	mov	r20, r9
     b36:	58 2d       	mov	r21, r8
     b38:	de d5       	rcall	.+3004   	; 0x16f6 <__subsf3>
     b3a:	aa d6       	rcall	.+3412   	; 0x1890 <__fixsfsi>
     b3c:	62 5e       	subi	r22, 0xE2	; 226
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	6d 33       	cpi	r22, 0x3D	; 61
     b42:	71 05       	cpc	r23, r1
     b44:	00 f5       	brcc	.+64     	; 0xb86 <sensor_sweep+0xe2>
     b46:	9c e3       	ldi	r25, 0x3C	; 60
     b48:	c9 16       	cp	r12, r25
     b4a:	d1 04       	cpc	r13, r1
     b4c:	e4 f4       	brge	.+56     	; 0xb86 <sensor_sweep+0xe2>
     b4e:	04 3b       	cpi	r16, 0xB4	; 180
     b50:	11 05       	cpc	r17, r1
     b52:	c9 f0       	breq	.+50     	; 0xb86 <sensor_sweep+0xe2>
		{
			if ((lastSeenDegrees + 2 == deg) && (deg != 178)) {
     b54:	c3 55       	subi	r28, 0x53	; 83
     b56:	df 4f       	sbci	r29, 0xFF	; 255
     b58:	a8 81       	ld	r26, Y
     b5a:	b9 81       	ldd	r27, Y+1	; 0x01
     b5c:	cd 5a       	subi	r28, 0xAD	; 173
     b5e:	d0 40       	sbci	r29, 0x00	; 0
     b60:	12 96       	adiw	r26, 0x02	; 2
     b62:	c3 55       	subi	r28, 0x53	; 83
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	b9 83       	std	Y+1, r27	; 0x01
     b68:	a8 83       	st	Y, r26
     b6a:	cd 5a       	subi	r28, 0xAD	; 173
     b6c:	d0 40       	sbci	r29, 0x00	; 0
     b6e:	a0 17       	cp	r26, r16
     b70:	b1 07       	cpc	r27, r17
     b72:	09 f0       	breq	.+2      	; 0xb76 <sensor_sweep+0xd2>
     b74:	85 c0       	rjmp	.+266    	; 0xc80 <sensor_sweep+0x1dc>
     b76:	a2 3b       	cpi	r26, 0xB2	; 178
     b78:	b1 05       	cpc	r27, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <sensor_sweep+0xda>
     b7c:	97 c0       	rjmp	.+302    	; 0xcac <sensor_sweep+0x208>
				lastSeenDegrees = deg;
				timesSeen++;
     b7e:	bf ef       	ldi	r27, 0xFF	; 255
     b80:	eb 1a       	sub	r14, r27
     b82:	fb 0a       	sbc	r15, r27
     b84:	a8 c0       	rjmp	.+336    	; 0xcd6 <sensor_sweep+0x232>
			//prev_dist = IR_dist;
			//avg_Sonar = Son_dist;
			//farEdge = deg;
		}
		//else if(prev_dist < 100 && IR_dist > 100 && ang_dist > 8)
		else if (timesSeen >= 1)
     b86:	1e 14       	cp	r1, r14
     b88:	1f 04       	cpc	r1, r15
     b8a:	0c f0       	brlt	.+2      	; 0xb8e <sensor_sweep+0xea>
     b8c:	a4 c0       	rjmp	.+328    	; 0xcd6 <sensor_sweep+0x232>
		{
			objects[objectIndex].firstDegrees = startDegrees;
     b8e:	c5 55       	subi	r28, 0x55	; 85
     b90:	df 4f       	sbci	r29, 0xFF	; 255
     b92:	e8 80       	ld	r14, Y
     b94:	f9 80       	ldd	r15, Y+1	; 0x01
     b96:	cb 5a       	subi	r28, 0xAB	; 171
     b98:	d0 40       	sbci	r29, 0x00	; 0
     b9a:	ee 0c       	add	r14, r14
     b9c:	ff 1c       	adc	r15, r15
     b9e:	c5 55       	subi	r28, 0x55	; 85
     ba0:	df 4f       	sbci	r29, 0xFF	; 255
     ba2:	e8 81       	ld	r30, Y
     ba4:	f9 81       	ldd	r31, Y+1	; 0x01
     ba6:	cb 5a       	subi	r28, 0xAB	; 171
     ba8:	d0 40       	sbci	r29, 0x00	; 0
     baa:	ee 0e       	add	r14, r30
     bac:	ff 1e       	adc	r15, r31
     bae:	ee 0c       	add	r14, r14
     bb0:	ff 1c       	adc	r15, r15
     bb2:	ee 0c       	add	r14, r14
     bb4:	ff 1c       	adc	r15, r15
     bb6:	21 e0       	ldi	r18, 0x01	; 1
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	2c 0f       	add	r18, r28
     bbc:	3d 1f       	adc	r19, r29
     bbe:	e2 0e       	add	r14, r18
     bc0:	f3 1e       	adc	r15, r19
     bc2:	c1 55       	subi	r28, 0x51	; 81
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	e8 81       	ld	r30, Y
     bc8:	f9 81       	ldd	r31, Y+1	; 0x01
     bca:	cf 5a       	subi	r28, 0xAF	; 175
     bcc:	d0 40       	sbci	r29, 0x00	; 0
     bce:	d7 01       	movw	r26, r14
     bd0:	17 96       	adiw	r26, 0x07	; 7
     bd2:	fc 93       	st	X, r31
     bd4:	ee 93       	st	-X, r30
     bd6:	16 97       	sbiw	r26, 0x06	; 6
			objects[objectIndex].finalDegrees = lastSeenDegrees;
     bd8:	c3 55       	subi	r28, 0x53	; 83
     bda:	df 4f       	sbci	r29, 0xFF	; 255
     bdc:	28 81       	ld	r18, Y
     bde:	39 81       	ldd	r19, Y+1	; 0x01
     be0:	cd 5a       	subi	r28, 0xAD	; 173
     be2:	d0 40       	sbci	r29, 0x00	; 0
     be4:	19 96       	adiw	r26, 0x09	; 9
     be6:	3c 93       	st	X, r19
     be8:	2e 93       	st	-X, r18
     bea:	18 97       	sbiw	r26, 0x08	; 8
			objects[objectIndex].angularSize = lastSeenDegrees - startDegrees + 2;
     bec:	b9 01       	movw	r22, r18
     bee:	6e 1b       	sub	r22, r30
     bf0:	7f 0b       	sbc	r23, r31
     bf2:	6e 5f       	subi	r22, 0xFE	; 254
     bf4:	7f 4f       	sbci	r23, 0xFF	; 255
     bf6:	15 96       	adiw	r26, 0x05	; 5
     bf8:	7c 93       	st	X, r23
     bfa:	6e 93       	st	-X, r22
     bfc:	14 97       	sbiw	r26, 0x04	; 4
			objects[objectIndex].diameter = 2.0 * sonarDistance * tan((objects[objectIndex].angularSize/360.0) * PI);
     bfe:	88 27       	eor	r24, r24
     c00:	77 fd       	sbrc	r23, 7
     c02:	80 95       	com	r24
     c04:	98 2f       	mov	r25, r24
     c06:	77 d6       	rcall	.+3310   	; 0x18f6 <__floatsisf>
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	44 eb       	ldi	r20, 0xB4	; 180
     c0e:	53 e4       	ldi	r21, 0x43	; 67
     c10:	d7 d5       	rcall	.+2990   	; 0x17c0 <__divsf3>
     c12:	20 ed       	ldi	r18, 0xD0	; 208
     c14:	3f e0       	ldi	r19, 0x0F	; 15
     c16:	49 e4       	ldi	r20, 0x49	; 73
     c18:	50 e4       	ldi	r21, 0x40	; 64
     c1a:	f9 d6       	rcall	.+3570   	; 0x1a0e <__mulsf3>
     c1c:	a7 d7       	rcall	.+3918   	; 0x1b6c <tan>
     c1e:	2b 01       	movw	r4, r22
     c20:	3c 01       	movw	r6, r24
     c22:	cf 54       	subi	r28, 0x4F	; 79
     c24:	df 4f       	sbci	r29, 0xFF	; 255
     c26:	a8 81       	ld	r26, Y
     c28:	b9 81       	ldd	r27, Y+1	; 0x01
     c2a:	c1 5b       	subi	r28, 0xB1	; 177
     c2c:	d0 40       	sbci	r29, 0x00	; 0
     c2e:	bd 01       	movw	r22, r26
     c30:	88 27       	eor	r24, r24
     c32:	77 fd       	sbrc	r23, 7
     c34:	80 95       	com	r24
     c36:	98 2f       	mov	r25, r24
     c38:	5e d6       	rcall	.+3260   	; 0x18f6 <__floatsisf>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	5c d5       	rcall	.+2744   	; 0x16f8 <__addsf3>
     c40:	a3 01       	movw	r20, r6
     c42:	92 01       	movw	r18, r4
     c44:	e4 d6       	rcall	.+3528   	; 0x1a0e <__mulsf3>
     c46:	f7 01       	movw	r30, r14
     c48:	60 83       	st	Z, r22
     c4a:	71 83       	std	Z+1, r23	; 0x01
     c4c:	82 83       	std	Z+2, r24	; 0x02
     c4e:	93 83       	std	Z+3, r25	; 0x03
			objects[objectIndex].objectDistance = sonarDistance;
     c50:	cf 54       	subi	r28, 0x4F	; 79
     c52:	df 4f       	sbci	r29, 0xFF	; 255
     c54:	28 81       	ld	r18, Y
     c56:	39 81       	ldd	r19, Y+1	; 0x01
     c58:	c1 5b       	subi	r28, 0xB1	; 177
     c5a:	d0 40       	sbci	r29, 0x00	; 0
     c5c:	33 87       	std	Z+11, r19	; 0x0b
     c5e:	22 87       	std	Z+10, r18	; 0x0a
			objectIndex++;
     c60:	c5 55       	subi	r28, 0x55	; 85
     c62:	df 4f       	sbci	r29, 0xFF	; 255
     c64:	88 81       	ld	r24, Y
     c66:	99 81       	ldd	r25, Y+1	; 0x01
     c68:	cb 5a       	subi	r28, 0xAB	; 171
     c6a:	d0 40       	sbci	r29, 0x00	; 0
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	c5 55       	subi	r28, 0x55	; 85
     c70:	df 4f       	sbci	r29, 0xFF	; 255
     c72:	99 83       	std	Y+1, r25	; 0x01
     c74:	88 83       	st	Y, r24
     c76:	cb 5a       	subi	r28, 0xAB	; 171
     c78:	d0 40       	sbci	r29, 0x00	; 0
			timesSeen = 0;
     c7a:	e1 2c       	mov	r14, r1
     c7c:	f1 2c       	mov	r15, r1
     c7e:	2b c0       	rjmp	.+86     	; 0xcd6 <sensor_sweep+0x232>
			} 
			else {
				timesSeen = 1;
				startDegrees = deg;
				lastSeenDegrees = deg;
				sonarDistance = Sonar_dist;
     c80:	cf 54       	subi	r28, 0x4F	; 79
     c82:	df 4f       	sbci	r29, 0xFF	; 255
     c84:	d9 82       	std	Y+1, r13	; 0x01
     c86:	c8 82       	st	Y, r12
     c88:	c1 5b       	subi	r28, 0xB1	; 177
     c8a:	d0 40       	sbci	r29, 0x00	; 0
     c8c:	c1 55       	subi	r28, 0x51	; 81
     c8e:	df 4f       	sbci	r29, 0xFF	; 255
     c90:	19 83       	std	Y+1, r17	; 0x01
     c92:	08 83       	st	Y, r16
     c94:	cf 5a       	subi	r28, 0xAF	; 175
     c96:	d0 40       	sbci	r29, 0x00	; 0
     c98:	c3 55       	subi	r28, 0x53	; 83
     c9a:	df 4f       	sbci	r29, 0xFF	; 255
     c9c:	19 83       	std	Y+1, r17	; 0x01
     c9e:	08 83       	st	Y, r16
     ca0:	cd 5a       	subi	r28, 0xAD	; 173
     ca2:	d0 40       	sbci	r29, 0x00	; 0
			if ((lastSeenDegrees + 2 == deg) && (deg != 178)) {
				lastSeenDegrees = deg;
				timesSeen++;
			} 
			else {
				timesSeen = 1;
     ca4:	ee 24       	eor	r14, r14
     ca6:	e3 94       	inc	r14
     ca8:	f1 2c       	mov	r15, r1
     caa:	15 c0       	rjmp	.+42     	; 0xcd6 <sensor_sweep+0x232>
				startDegrees = deg;
				lastSeenDegrees = deg;
				sonarDistance = Sonar_dist;
     cac:	cf 54       	subi	r28, 0x4F	; 79
     cae:	df 4f       	sbci	r29, 0xFF	; 255
     cb0:	d9 82       	std	Y+1, r13	; 0x01
     cb2:	c8 82       	st	Y, r12
     cb4:	c1 5b       	subi	r28, 0xB1	; 177
     cb6:	d0 40       	sbci	r29, 0x00	; 0
     cb8:	c3 55       	subi	r28, 0x53	; 83
     cba:	df 4f       	sbci	r29, 0xFF	; 255
     cbc:	a8 81       	ld	r26, Y
     cbe:	b9 81       	ldd	r27, Y+1	; 0x01
     cc0:	cd 5a       	subi	r28, 0xAD	; 173
     cc2:	d0 40       	sbci	r29, 0x00	; 0
     cc4:	c1 55       	subi	r28, 0x51	; 81
     cc6:	df 4f       	sbci	r29, 0xFF	; 255
     cc8:	b9 83       	std	Y+1, r27	; 0x01
     cca:	a8 83       	st	Y, r26
     ccc:	cf 5a       	subi	r28, 0xAF	; 175
     cce:	d0 40       	sbci	r29, 0x00	; 0
			if ((lastSeenDegrees + 2 == deg) && (deg != 178)) {
				lastSeenDegrees = deg;
				timesSeen++;
			} 
			else {
				timesSeen = 1;
     cd0:	ee 24       	eor	r14, r14
     cd2:	e3 94       	inc	r14
     cd4:	f1 2c       	mov	r15, r1
			ang_dist = 0;
			x = 0;
			prev_dist = IR_dist;
			*/
		}
		char output[50] = "";
     cd6:	f1 01       	movw	r30, r2
     cd8:	10 82       	st	Z, r1
     cda:	11 82       	std	Z+1, r1	; 0x01
     cdc:	12 82       	std	Z+2, r1	; 0x02
     cde:	13 82       	std	Z+3, r1	; 0x03
     ce0:	cd 54       	subi	r28, 0x4D	; 77
     ce2:	df 4f       	sbci	r29, 0xFF	; 255
     ce4:	a8 81       	ld	r26, Y
     ce6:	b9 81       	ldd	r27, Y+1	; 0x01
     ce8:	c3 5b       	subi	r28, 0xB3	; 179
     cea:	d0 40       	sbci	r29, 0x00	; 0
     cec:	ee e2       	ldi	r30, 0x2E	; 46
     cee:	1d 92       	st	X+, r1
     cf0:	ea 95       	dec	r30
     cf2:	e9 f7       	brne	.-6      	; 0xcee <sensor_sweep+0x24a>
		sprintf(output, "%d       %4.2f               %4.2d\n\r", deg,IR_dist,Sonar_dist);
     cf4:	df 92       	push	r13
     cf6:	cf 92       	push	r12
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	1f 93       	push	r17
     d02:	0f 93       	push	r16
     d04:	a0 e1       	ldi	r26, 0x10	; 16
     d06:	b4 e0       	ldi	r27, 0x04	; 4
     d08:	bf 93       	push	r27
     d0a:	af 93       	push	r26
     d0c:	3f 92       	push	r3
     d0e:	2f 92       	push	r2
     d10:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
		UART_transmit_str(output);
     d14:	c1 01       	movw	r24, r2
     d16:	62 db       	rcall	.-2364   	; 0x3dc <UART_transmit_str>
	int startDegrees;
	int timesSeen = 0;
	int sonarDistance;
	struct Object objects[10];
	
	for(int deg = 0; deg <= 180; deg+=2) {
     d18:	0e 5f       	subi	r16, 0xFE	; 254
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	06 3b       	cpi	r16, 0xB6	; 182
     d28:	11 05       	cpc	r17, r1
     d2a:	09 f0       	breq	.+2      	; 0xd2e <sensor_sweep+0x28a>
     d2c:	ec ce       	rjmp	.-552    	; 0xb06 <sensor_sweep+0x62>
		sprintf(output, "%d       %4.2f               %4.2d\n\r", deg,IR_dist,Sonar_dist);
		UART_transmit_str(output);
		//lprintf("%d\n%d, %d\n%d",objects, data[0][0], data[1][0], Center[0]);
	}
	
	for(int i = 0; i < objectIndex; i++)
     d2e:	c5 55       	subi	r28, 0x55	; 85
     d30:	df 4f       	sbci	r29, 0xFF	; 255
     d32:	88 81       	ld	r24, Y
     d34:	99 81       	ldd	r25, Y+1	; 0x01
     d36:	cb 5a       	subi	r28, 0xAB	; 171
     d38:	d0 40       	sbci	r29, 0x00	; 0
     d3a:	18 16       	cp	r1, r24
     d3c:	19 06       	cpc	r1, r25
     d3e:	0c f0       	brlt	.+2      	; 0xd42 <sensor_sweep+0x29e>
     d40:	57 c0       	rjmp	.+174    	; 0xdf0 <sensor_sweep+0x34c>
     d42:	8e 01       	movw	r16, r28
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
		//{
			//min = width;
			//min_loc = Center[i];
			//min_index = i;
			
			char obj_ID[40] = "";
     d4c:	7e 01       	movw	r14, r28
     d4e:	99 e7       	ldi	r25, 0x79	; 121
     d50:	e9 0e       	add	r14, r25
     d52:	f1 1c       	adc	r15, r1
     d54:	0f 2e       	mov	r0, r31
     d56:	f4 e2       	ldi	r31, 0x24	; 36
     d58:	7f 2e       	mov	r7, r31
     d5a:	f0 2d       	mov	r31, r0
     d5c:	47 01       	movw	r8, r14
     d5e:	a4 e0       	ldi	r26, 0x04	; 4
     d60:	8a 0e       	add	r8, r26
     d62:	91 1c       	adc	r9, r1
			sprintf(obj_ID, "width: %f, angle: %d, distance: %d\n\r", objects[i].diameter, objects[i].finalDegrees - objects[i].angularSize/2, objects[i].objectDistance);
     d64:	0f 2e       	mov	r0, r31
     d66:	f5 e3       	ldi	r31, 0x35	; 53
     d68:	af 2e       	mov	r10, r31
     d6a:	f4 e0       	ldi	r31, 0x04	; 4
     d6c:	bf 2e       	mov	r11, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	c5 55       	subi	r28, 0x55	; 85
     d72:	df 4f       	sbci	r29, 0xFF	; 255
     d74:	48 80       	ld	r4, Y
     d76:	59 80       	ldd	r5, Y+1	; 0x01
     d78:	cb 5a       	subi	r28, 0xAB	; 171
     d7a:	d0 40       	sbci	r29, 0x00	; 0
		//{
			//min = width;
			//min_loc = Center[i];
			//min_index = i;
			
			char obj_ID[40] = "";
     d7c:	f7 01       	movw	r30, r14
     d7e:	10 82       	st	Z, r1
     d80:	11 82       	std	Z+1, r1	; 0x01
     d82:	12 82       	std	Z+2, r1	; 0x02
     d84:	13 82       	std	Z+3, r1	; 0x03
     d86:	d4 01       	movw	r26, r8
     d88:	e7 2d       	mov	r30, r7
     d8a:	1d 92       	st	X+, r1
     d8c:	ea 95       	dec	r30
     d8e:	e9 f7       	brne	.-6      	; 0xd8a <sensor_sweep+0x2e6>
     d90:	f8 01       	movw	r30, r16
			sprintf(obj_ID, "width: %f, angle: %d, distance: %d\n\r", objects[i].diameter, objects[i].finalDegrees - objects[i].angularSize/2, objects[i].objectDistance);
     d92:	83 85       	ldd	r24, Z+11	; 0x0b
     d94:	8f 93       	push	r24
     d96:	82 85       	ldd	r24, Z+10	; 0x0a
     d98:	8f 93       	push	r24
     d9a:	84 81       	ldd	r24, Z+4	; 0x04
     d9c:	95 81       	ldd	r25, Z+5	; 0x05
     d9e:	99 23       	and	r25, r25
     da0:	0c f4       	brge	.+2      	; 0xda4 <sensor_sweep+0x300>
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	9c 01       	movw	r18, r24
     da6:	35 95       	asr	r19
     da8:	27 95       	ror	r18
     daa:	80 85       	ldd	r24, Z+8	; 0x08
     dac:	91 85       	ldd	r25, Z+9	; 0x09
     dae:	82 1b       	sub	r24, r18
     db0:	93 0b       	sbc	r25, r19
     db2:	9f 93       	push	r25
     db4:	8f 93       	push	r24
     db6:	83 81       	ldd	r24, Z+3	; 0x03
     db8:	8f 93       	push	r24
     dba:	82 81       	ldd	r24, Z+2	; 0x02
     dbc:	8f 93       	push	r24
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	8f 93       	push	r24
     dc2:	80 81       	ld	r24, Z
     dc4:	8f 93       	push	r24
     dc6:	bf 92       	push	r11
     dc8:	af 92       	push	r10
     dca:	ff 92       	push	r15
     dcc:	ef 92       	push	r14
     dce:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
			UART_transmit_str(obj_ID);
     dd2:	c7 01       	movw	r24, r14
     dd4:	03 db       	rcall	.-2554   	; 0x3dc <UART_transmit_str>
		sprintf(output, "%d       %4.2f               %4.2d\n\r", deg,IR_dist,Sonar_dist);
		UART_transmit_str(output);
		//lprintf("%d\n%d, %d\n%d",objects, data[0][0], data[1][0], Center[0]);
	}
	
	for(int i = 0; i < objectIndex; i++)
     dd6:	ff ef       	ldi	r31, 0xFF	; 255
     dd8:	cf 1a       	sub	r12, r31
     dda:	df 0a       	sbc	r13, r31
     ddc:	04 5f       	subi	r16, 0xF4	; 244
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	c4 14       	cp	r12, r4
     dec:	d5 04       	cpc	r13, r5
     dee:	31 f6       	brne	.-116    	; 0xd7c <sensor_sweep+0x2d8>
	}
	/*char smallest_obj[40] = "";
	sprintf(smallest_obj, "smallest object at %d degrees\n\r", min_loc);
	UART_transmit_str(smallest_obj);
	*/
}
     df0:	cc 54       	subi	r28, 0x4C	; 76
     df2:	df 4f       	sbci	r29, 0xFF	; 255
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	df 90       	pop	r13
     e0c:	cf 90       	pop	r12
     e0e:	bf 90       	pop	r11
     e10:	af 90       	pop	r10
     e12:	9f 90       	pop	r9
     e14:	8f 90       	pop	r8
     e16:	7f 90       	pop	r7
     e18:	6f 90       	pop	r6
     e1a:	5f 90       	pop	r5
     e1c:	4f 90       	pop	r4
     e1e:	3f 90       	pop	r3
     e20:	2f 90       	pop	r2
     e22:	08 95       	ret

00000e24 <play_song>:

///////////////////////////////////////////////////

/// Plays song of choice when function is called
void play_song() {
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	2c 97       	sbiw	r28, 0x0c	; 12
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
	int song_index = 0;
	int num_notes = 6; //Number of notes
	
	unsigned char notes[6] = {57,50,53,57,50,53};
     e38:	86 e0       	ldi	r24, 0x06	; 6
     e3a:	e0 e5       	ldi	r30, 0x50	; 80
     e3c:	f2 e0       	ldi	r31, 0x02	; 2
     e3e:	de 01       	movw	r26, r28
     e40:	11 96       	adiw	r26, 0x01	; 1
     e42:	01 90       	ld	r0, Z+
     e44:	0d 92       	st	X+, r0
     e46:	8a 95       	dec	r24
     e48:	e1 f7       	brne	.-8      	; 0xe42 <play_song+0x1e>
	unsigned char duration[6] = {64,84,32,64,84,32};
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	e6 e5       	ldi	r30, 0x56	; 86
     e4e:	f2 e0       	ldi	r31, 0x02	; 2
     e50:	de 01       	movw	r26, r28
     e52:	17 96       	adiw	r26, 0x07	; 7
     e54:	01 90       	ld	r0, Z+
     e56:	0d 92       	st	X+, r0
     e58:	8a 95       	dec	r24
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <play_song+0x30>
	//AD_F AD_F (Song of Time - Zelda Ocarina of Time)
	
	oi_load_song(song_index, num_notes, notes, duration);
     e5c:	9e 01       	movw	r18, r28
     e5e:	29 5f       	subi	r18, 0xF9	; 249
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	ae 01       	movw	r20, r28
     e64:	4f 5f       	subi	r20, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	66 e0       	ldi	r22, 0x06	; 6
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	18 d3       	rcall	.+1584   	; 0x14a2 <oi_load_song>
	oi_play_song(song_index);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	46 d3       	rcall	.+1676   	; 0x1504 <oi_play_song>
}
     e78:	2c 96       	adiw	r28, 0x0c	; 12
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df 91       	pop	r29
     e86:	cf 91       	pop	r28
     e88:	08 95       	ret

00000e8a <main>:
 * If the first character of the array is a letter then if it is an m, moves robot, r, rotates the robot clock-wise, l, rotates the robot counter clock-wise, s, sweep with the servo, or p, play music and stop the program.
 * If the second character of the array is a number, then that number is the corresponding value that the robot rotates or the speed at which the robot moves.
 */

int main(void)
{
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	64 97       	sbiw	r28, 0x14	; 20
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
	oi_t *sensor_data = oi_alloc();
     eb2:	b2 d2       	rcall	.+1380   	; 0x1418 <oi_alloc>
     eb4:	7c 01       	movw	r14, r24
	oi_init(sensor_data);
     eb6:	f2 d3       	rcall	.+2020   	; 0x169c <oi_init>
	lcd_init();
     eb8:	e4 d1       	rcall	.+968    	; 0x1282 <lcd_init>
	IR_init();
     eba:	ac da       	rcall	.-2728   	; 0x414 <IR_init>
	IR_lookup_init();
     ebc:	b7 da       	rcall	.-2706   	; 0x42c <IR_lookup_init>
	UART_init();
     ebe:	7e da       	rcall	.-2820   	; 0x3bc <UART_init>
	servo_init();
     ec0:	60 db       	rcall	.-2368   	; 0x582 <servo_init>
	ping_init();
     ec2:	10 db       	rcall	.-2528   	; 0x4e4 <ping_init>
	
    while(finished != 1)
    {
		cmd_char = UART_rec();
	
		lprintf("%c", cmd_char);
     ec4:	0f 2e       	mov	r0, r31
     ec6:	fa e5       	ldi	r31, 0x5A	; 90
     ec8:	6f 2e       	mov	r6, r31
     eca:	f4 e0       	ldi	r31, 0x04	; 4
     ecc:	7f 2e       	mov	r7, r31
     ece:	f0 2d       	mov	r31, r0
		if(cmd_char == 's') {	
			UART_transmit_str("Sending Sweep\n\r\0");
			sensor_sweep_init();
			sensor_sweep();
			
			char confirm[20] = "\n\rSweep Complete\n\r\0";
     ed0:	0f 2e       	mov	r0, r31
     ed2:	f4 e1       	ldi	r31, 0x14	; 20
     ed4:	cf 2e       	mov	r12, r31
     ed6:	f0 2d       	mov	r31, r0
				char confirm[20] = "\n\rRotate -45deg\n\r\0";
				UART_transmit_str(confirm);
				turn_ccw(sensor_data,45);
			}
			if(cmd_char == '4') {
				char confirm[20] = "\n\rRotate -90deg\n\r\0";
     ed8:	0f 2e       	mov	r0, r31
     eda:	f3 e1       	ldi	r31, 0x13	; 19
     edc:	af 2e       	mov	r10, r31
     ede:	f0 2d       	mov	r31, r0
				char confirm[20] = "\n\rRotate 45deg\n\r\0";
				UART_transmit_str(confirm);
				turn_cw(sensor_data,45);
			}
			if(cmd_char == '4') {
				char confirm[20] = "\n\rRotate 90deg\n\r\0";
     ee0:	0f 2e       	mov	r0, r31
     ee2:	f2 e1       	ldi	r31, 0x12	; 18
     ee4:	bf 2e       	mov	r11, r31
     ee6:	f0 2d       	mov	r31, r0
				char confirm[20] = "\n\rMoving 25cm\n\r\0";
				UART_transmit_str(confirm);
				move_forward(sensor_data, CONST_SPEED, 250);
			}
			if(cmd_char == '4') {
				char confirm[20] = "\n\rMoving 50cm\n\r\0";
     ee8:	0f 2e       	mov	r0, r31
     eea:	f1 e1       	ldi	r31, 0x11	; 17
     eec:	9f 2e       	mov	r9, r31
     eee:	f0 2d       	mov	r31, r0
		
		if(cmd_char == 'm') {
			cmd_char = UART_rec();
			
			if(cmd_char == '1') {
				char confirm[20] = "\n\rMoving 5cm\n\r\0";
     ef0:	68 94       	set
     ef2:	88 24       	eor	r8, r8
     ef4:	84 f8       	bld	r8, 4
	int finished = 0;
	char cmd_char;
	
    while(finished != 1)
    {
		cmd_char = UART_rec();
     ef6:	6e da       	rcall	.-2852   	; 0x3d4 <UART_rec>
     ef8:	18 2f       	mov	r17, r24
	
		lprintf("%c", cmd_char);
     efa:	1f 92       	push	r1
     efc:	8f 93       	push	r24
     efe:	7f 92       	push	r7
     f00:	6f 92       	push	r6
     f02:	10 d2       	rcall	.+1056   	; 0x1324 <lprintf>
		
		if(cmd_char == 'm') {
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	1d 36       	cpi	r17, 0x6D	; 109
     f0e:	09 f0       	breq	.+2      	; 0xf12 <main+0x88>
     f10:	7a c0       	rjmp	.+244    	; 0x1006 <main+0x17c>
			cmd_char = UART_rec();
     f12:	60 da       	rcall	.-2880   	; 0x3d4 <UART_rec>
     f14:	18 2f       	mov	r17, r24
			
			if(cmd_char == '1') {
     f16:	81 33       	cpi	r24, 0x31	; 49
     f18:	b9 f4       	brne	.+46     	; 0xf48 <main+0xbe>
				char confirm[20] = "\n\rMoving 5cm\n\r\0";
     f1a:	e2 e8       	ldi	r30, 0x82	; 130
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	de 01       	movw	r26, r28
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	88 2d       	mov	r24, r8
     f24:	01 90       	ld	r0, Z+
     f26:	0d 92       	st	X+, r0
     f28:	8a 95       	dec	r24
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <main+0x9a>
     f2c:	19 8a       	std	Y+17, r1	; 0x11
     f2e:	1a 8a       	std	Y+18, r1	; 0x12
     f30:	1b 8a       	std	Y+19, r1	; 0x13
     f32:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	51 da       	rcall	.-2910   	; 0x3dc <UART_transmit_str>
				move_forward(sensor_data, CONST_SPEED, 50);
     f3a:	42 e3       	ldi	r20, 0x32	; 50
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	68 ec       	ldi	r22, 0xC8	; 200
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	c7 01       	movw	r24, r14
     f44:	53 db       	rcall	.-2394   	; 0x5ec <move_forward>
     f46:	30 c0       	rjmp	.+96     	; 0xfa8 <main+0x11e>
			}
			if(cmd_char == '2') {
     f48:	82 33       	cpi	r24, 0x32	; 50
     f4a:	b1 f4       	brne	.+44     	; 0xf78 <main+0xee>
				char confirm[20] = "\n\rMoving 15cm\n\r\0";
     f4c:	e6 e9       	ldi	r30, 0x96	; 150
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
     f50:	de 01       	movw	r26, r28
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	89 2d       	mov	r24, r9
     f56:	01 90       	ld	r0, Z+
     f58:	0d 92       	st	X+, r0
     f5a:	8a 95       	dec	r24
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <main+0xcc>
     f5e:	1a 8a       	std	Y+18, r1	; 0x12
     f60:	1b 8a       	std	Y+19, r1	; 0x13
     f62:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	39 da       	rcall	.-2958   	; 0x3dc <UART_transmit_str>
				move_forward(sensor_data, CONST_SPEED, 150);
     f6a:	46 e9       	ldi	r20, 0x96	; 150
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	68 ec       	ldi	r22, 0xC8	; 200
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	c7 01       	movw	r24, r14
     f74:	3b db       	rcall	.-2442   	; 0x5ec <move_forward>
     f76:	30 c0       	rjmp	.+96     	; 0xfd8 <main+0x14e>
			}
			if(cmd_char == '3') {
     f78:	83 33       	cpi	r24, 0x33	; 51
     f7a:	b1 f4       	brne	.+44     	; 0xfa8 <main+0x11e>
				char confirm[20] = "\n\rMoving 25cm\n\r\0";
     f7c:	ea ea       	ldi	r30, 0xAA	; 170
     f7e:	f2 e0       	ldi	r31, 0x02	; 2
     f80:	de 01       	movw	r26, r28
     f82:	11 96       	adiw	r26, 0x01	; 1
     f84:	89 2d       	mov	r24, r9
     f86:	01 90       	ld	r0, Z+
     f88:	0d 92       	st	X+, r0
     f8a:	8a 95       	dec	r24
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <main+0xfc>
     f8e:	1a 8a       	std	Y+18, r1	; 0x12
     f90:	1b 8a       	std	Y+19, r1	; 0x13
     f92:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	21 da       	rcall	.-3006   	; 0x3dc <UART_transmit_str>
				move_forward(sensor_data, CONST_SPEED, 250);
     f9a:	4a ef       	ldi	r20, 0xFA	; 250
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	68 ec       	ldi	r22, 0xC8	; 200
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	c7 01       	movw	r24, r14
     fa4:	23 db       	rcall	.-2490   	; 0x5ec <move_forward>
     fa6:	2f c0       	rjmp	.+94     	; 0x1006 <main+0x17c>
			}
			if(cmd_char == '4') {
     fa8:	14 33       	cpi	r17, 0x34	; 52
     faa:	b1 f4       	brne	.+44     	; 0xfd8 <main+0x14e>
				char confirm[20] = "\n\rMoving 50cm\n\r\0";
     fac:	ee eb       	ldi	r30, 0xBE	; 190
     fae:	f2 e0       	ldi	r31, 0x02	; 2
     fb0:	de 01       	movw	r26, r28
     fb2:	11 96       	adiw	r26, 0x01	; 1
     fb4:	89 2d       	mov	r24, r9
     fb6:	01 90       	ld	r0, Z+
     fb8:	0d 92       	st	X+, r0
     fba:	8a 95       	dec	r24
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <main+0x12c>
     fbe:	1a 8a       	std	Y+18, r1	; 0x12
     fc0:	1b 8a       	std	Y+19, r1	; 0x13
     fc2:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	09 da       	rcall	.-3054   	; 0x3dc <UART_transmit_str>
				move_forward(sensor_data, CONST_SPEED, 500);
     fca:	44 ef       	ldi	r20, 0xF4	; 244
     fcc:	51 e0       	ldi	r21, 0x01	; 1
     fce:	68 ec       	ldi	r22, 0xC8	; 200
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	c7 01       	movw	r24, r14
     fd4:	0b db       	rcall	.-2538   	; 0x5ec <move_forward>
     fd6:	84 c0       	rjmp	.+264    	; 0x10e0 <main+0x256>
			}
			if(cmd_char == '5') {
     fd8:	15 33       	cpi	r17, 0x35	; 53
     fda:	a9 f4       	brne	.+42     	; 0x1006 <main+0x17c>
				char confirm[20] = "\n\rMoving 100cm\n\r\0";
     fdc:	e2 ed       	ldi	r30, 0xD2	; 210
     fde:	f2 e0       	ldi	r31, 0x02	; 2
     fe0:	de 01       	movw	r26, r28
     fe2:	11 96       	adiw	r26, 0x01	; 1
     fe4:	8b 2d       	mov	r24, r11
     fe6:	01 90       	ld	r0, Z+
     fe8:	0d 92       	st	X+, r0
     fea:	8a 95       	dec	r24
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <main+0x15c>
     fee:	1c 8a       	std	Y+20, r1	; 0x14
     ff0:	1b 8a       	std	Y+19, r1	; 0x13
				UART_transmit_str(confirm);
     ff2:	ce 01       	movw	r24, r28
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	f2 d9       	rcall	.-3100   	; 0x3dc <UART_transmit_str>
				move_forward(sensor_data, CONST_SPEED, 1000);
     ff8:	48 ee       	ldi	r20, 0xE8	; 232
     ffa:	53 e0       	ldi	r21, 0x03	; 3
     ffc:	68 ec       	ldi	r22, 0xC8	; 200
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	c7 01       	movw	r24, r14
    1002:	f4 da       	rcall	.-2584   	; 0x5ec <move_forward>
    1004:	d5 c0       	rjmp	.+426    	; 0x11b0 <__stack+0xb1>
				//turn_cw(sensor_data, 45);
			}	
		}
		
		if(cmd_char == 'r') {
    1006:	12 37       	cpi	r17, 0x72	; 114
    1008:	09 f0       	breq	.+2      	; 0x100c <main+0x182>
    100a:	6a c0       	rjmp	.+212    	; 0x10e0 <main+0x256>
			cmd_char = UART_rec();
    100c:	e3 d9       	rcall	.-3130   	; 0x3d4 <UART_rec>
    100e:	18 2f       	mov	r17, r24
			
			if(cmd_char == '1') {
    1010:	81 33       	cpi	r24, 0x31	; 49
    1012:	99 f4       	brne	.+38     	; 0x103a <main+0x1b0>
				char confirm[20] = "\n\rRotate 10deg\n\r\0";
    1014:	e6 ee       	ldi	r30, 0xE6	; 230
    1016:	f2 e0       	ldi	r31, 0x02	; 2
    1018:	de 01       	movw	r26, r28
    101a:	11 96       	adiw	r26, 0x01	; 1
    101c:	8b 2d       	mov	r24, r11
    101e:	01 90       	ld	r0, Z+
    1020:	0d 92       	st	X+, r0
    1022:	8a 95       	dec	r24
    1024:	e1 f7       	brne	.-8      	; 0x101e <main+0x194>
    1026:	1c 8a       	std	Y+20, r1	; 0x14
    1028:	1b 8a       	std	Y+19, r1	; 0x13
				UART_transmit_str(confirm);
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	d6 d9       	rcall	.-3156   	; 0x3dc <UART_transmit_str>
				turn_cw(sensor_data,10);
    1030:	6a e0       	ldi	r22, 0x0A	; 10
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	c7 01       	movw	r24, r14
    1036:	9e dc       	rcall	.-1732   	; 0x974 <turn_cw>
    1038:	2a c0       	rjmp	.+84     	; 0x108e <main+0x204>
			}
			if(cmd_char == '2') {
    103a:	82 33       	cpi	r24, 0x32	; 50
    103c:	99 f4       	brne	.+38     	; 0x1064 <main+0x1da>
				char confirm[20] = "\n\rRotate 25deg\n\r\0";
    103e:	ea ef       	ldi	r30, 0xFA	; 250
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	de 01       	movw	r26, r28
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	8b 2d       	mov	r24, r11
    1048:	01 90       	ld	r0, Z+
    104a:	0d 92       	st	X+, r0
    104c:	8a 95       	dec	r24
    104e:	e1 f7       	brne	.-8      	; 0x1048 <main+0x1be>
    1050:	1c 8a       	std	Y+20, r1	; 0x14
    1052:	1b 8a       	std	Y+19, r1	; 0x13
				UART_transmit_str(confirm);
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	c1 d9       	rcall	.-3198   	; 0x3dc <UART_transmit_str>
				turn_cw(sensor_data,25);
    105a:	69 e1       	ldi	r22, 0x19	; 25
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	c7 01       	movw	r24, r14
    1060:	89 dc       	rcall	.-1774   	; 0x974 <turn_cw>
    1062:	2a c0       	rjmp	.+84     	; 0x10b8 <main+0x22e>
			}
			if(cmd_char == '3') {
    1064:	83 33       	cpi	r24, 0x33	; 51
    1066:	99 f4       	brne	.+38     	; 0x108e <main+0x204>
				char confirm[20] = "\n\rRotate 45deg\n\r\0";
    1068:	ee e0       	ldi	r30, 0x0E	; 14
    106a:	f3 e0       	ldi	r31, 0x03	; 3
    106c:	de 01       	movw	r26, r28
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	8b 2d       	mov	r24, r11
    1072:	01 90       	ld	r0, Z+
    1074:	0d 92       	st	X+, r0
    1076:	8a 95       	dec	r24
    1078:	e1 f7       	brne	.-8      	; 0x1072 <main+0x1e8>
    107a:	1c 8a       	std	Y+20, r1	; 0x14
    107c:	1b 8a       	std	Y+19, r1	; 0x13
				UART_transmit_str(confirm);
    107e:	ce 01       	movw	r24, r28
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	ac d9       	rcall	.-3240   	; 0x3dc <UART_transmit_str>
				turn_cw(sensor_data,45);
    1084:	6d e2       	ldi	r22, 0x2D	; 45
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	c7 01       	movw	r24, r14
    108a:	74 dc       	rcall	.-1816   	; 0x974 <turn_cw>
    108c:	29 c0       	rjmp	.+82     	; 0x10e0 <main+0x256>
			}
			if(cmd_char == '4') {
    108e:	14 33       	cpi	r17, 0x34	; 52
    1090:	99 f4       	brne	.+38     	; 0x10b8 <main+0x22e>
				char confirm[20] = "\n\rRotate 90deg\n\r\0";
    1092:	e2 e2       	ldi	r30, 0x22	; 34
    1094:	f3 e0       	ldi	r31, 0x03	; 3
    1096:	de 01       	movw	r26, r28
    1098:	11 96       	adiw	r26, 0x01	; 1
    109a:	8b 2d       	mov	r24, r11
    109c:	01 90       	ld	r0, Z+
    109e:	0d 92       	st	X+, r0
    10a0:	8a 95       	dec	r24
    10a2:	e1 f7       	brne	.-8      	; 0x109c <main+0x212>
    10a4:	1c 8a       	std	Y+20, r1	; 0x14
    10a6:	1b 8a       	std	Y+19, r1	; 0x13
				UART_transmit_str(confirm);
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	97 d9       	rcall	.-3282   	; 0x3dc <UART_transmit_str>
				turn_cw(sensor_data,90);
    10ae:	6a e5       	ldi	r22, 0x5A	; 90
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	c7 01       	movw	r24, r14
    10b4:	5f dc       	rcall	.-1858   	; 0x974 <turn_cw>
    10b6:	7c c0       	rjmp	.+248    	; 0x11b0 <__stack+0xb1>
				
			}
			if(cmd_char == '5') {
    10b8:	15 33       	cpi	r17, 0x35	; 53
    10ba:	91 f4       	brne	.+36     	; 0x10e0 <main+0x256>
				
				char confirm[20] = "\n\rRotate 180deg\n\r\0";
    10bc:	e6 e3       	ldi	r30, 0x36	; 54
    10be:	f3 e0       	ldi	r31, 0x03	; 3
    10c0:	de 01       	movw	r26, r28
    10c2:	11 96       	adiw	r26, 0x01	; 1
    10c4:	8a 2d       	mov	r24, r10
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	8a 95       	dec	r24
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <main+0x23c>
    10ce:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	83 d9       	rcall	.-3322   	; 0x3dc <UART_transmit_str>
				turn_cw(sensor_data,180);
    10d6:	64 eb       	ldi	r22, 0xB4	; 180
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	c7 01       	movw	r24, r14
    10dc:	4b dc       	rcall	.-1898   	; 0x974 <turn_cw>
    10de:	7c c0       	rjmp	.+248    	; 0x11d8 <__stack+0xd9>
			}
		}
		
		if(cmd_char == 'l') {
    10e0:	1c 36       	cpi	r17, 0x6C	; 108
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <main+0x25c>
    10e4:	65 c0       	rjmp	.+202    	; 0x11b0 <__stack+0xb1>
			cmd_char = UART_rec();
    10e6:	76 d9       	rcall	.-3348   	; 0x3d4 <UART_rec>
    10e8:	18 2f       	mov	r17, r24
			
			if(cmd_char == '1') {
    10ea:	81 33       	cpi	r24, 0x31	; 49
    10ec:	91 f4       	brne	.+36     	; 0x1112 <__stack+0x13>
				char confirm[20] = "\n\rRotate -10deg\n\r\0";
    10ee:	ea e4       	ldi	r30, 0x4A	; 74
    10f0:	f3 e0       	ldi	r31, 0x03	; 3
    10f2:	de 01       	movw	r26, r28
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	8a 2d       	mov	r24, r10
    10f8:	01 90       	ld	r0, Z+
    10fa:	0d 92       	st	X+, r0
    10fc:	8a 95       	dec	r24
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <main+0x26e>
    1100:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    1102:	ce 01       	movw	r24, r28
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	6a d9       	rcall	.-3372   	; 0x3dc <UART_transmit_str>
				turn_ccw(sensor_data,10);
    1108:	6a e0       	ldi	r22, 0x0A	; 10
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	c7 01       	movw	r24, r14
    110e:	64 dc       	rcall	.-1848   	; 0x9d8 <turn_ccw>
    1110:	28 c0       	rjmp	.+80     	; 0x1162 <__stack+0x63>
			}
			if(cmd_char == '2') {
    1112:	82 33       	cpi	r24, 0x32	; 50
    1114:	91 f4       	brne	.+36     	; 0x113a <__stack+0x3b>
				char confirm[20] = "\n\rRotate -25deg\n\r\0";
    1116:	ee e5       	ldi	r30, 0x5E	; 94
    1118:	f3 e0       	ldi	r31, 0x03	; 3
    111a:	de 01       	movw	r26, r28
    111c:	11 96       	adiw	r26, 0x01	; 1
    111e:	8a 2d       	mov	r24, r10
    1120:	01 90       	ld	r0, Z+
    1122:	0d 92       	st	X+, r0
    1124:	8a 95       	dec	r24
    1126:	e1 f7       	brne	.-8      	; 0x1120 <__stack+0x21>
    1128:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	56 d9       	rcall	.-3412   	; 0x3dc <UART_transmit_str>
				turn_ccw(sensor_data,25);
    1130:	69 e1       	ldi	r22, 0x19	; 25
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	c7 01       	movw	r24, r14
    1136:	50 dc       	rcall	.-1888   	; 0x9d8 <turn_ccw>
    1138:	28 c0       	rjmp	.+80     	; 0x118a <__stack+0x8b>
			}
			if(cmd_char == '3') {
    113a:	83 33       	cpi	r24, 0x33	; 51
    113c:	91 f4       	brne	.+36     	; 0x1162 <__stack+0x63>
				char confirm[20] = "\n\rRotate -45deg\n\r\0";
    113e:	e2 e7       	ldi	r30, 0x72	; 114
    1140:	f3 e0       	ldi	r31, 0x03	; 3
    1142:	de 01       	movw	r26, r28
    1144:	11 96       	adiw	r26, 0x01	; 1
    1146:	8a 2d       	mov	r24, r10
    1148:	01 90       	ld	r0, Z+
    114a:	0d 92       	st	X+, r0
    114c:	8a 95       	dec	r24
    114e:	e1 f7       	brne	.-8      	; 0x1148 <__stack+0x49>
    1150:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    1152:	ce 01       	movw	r24, r28
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	42 d9       	rcall	.-3452   	; 0x3dc <UART_transmit_str>
				turn_ccw(sensor_data,45);
    1158:	6d e2       	ldi	r22, 0x2D	; 45
    115a:	70 e0       	ldi	r23, 0x00	; 0
    115c:	c7 01       	movw	r24, r14
    115e:	3c dc       	rcall	.-1928   	; 0x9d8 <turn_ccw>
    1160:	27 c0       	rjmp	.+78     	; 0x11b0 <__stack+0xb1>
			}
			if(cmd_char == '4') {
    1162:	14 33       	cpi	r17, 0x34	; 52
    1164:	91 f4       	brne	.+36     	; 0x118a <__stack+0x8b>
				char confirm[20] = "\n\rRotate -90deg\n\r\0";
    1166:	e6 e8       	ldi	r30, 0x86	; 134
    1168:	f3 e0       	ldi	r31, 0x03	; 3
    116a:	de 01       	movw	r26, r28
    116c:	11 96       	adiw	r26, 0x01	; 1
    116e:	8a 2d       	mov	r24, r10
    1170:	01 90       	ld	r0, Z+
    1172:	0d 92       	st	X+, r0
    1174:	8a 95       	dec	r24
    1176:	e1 f7       	brne	.-8      	; 0x1170 <__stack+0x71>
    1178:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    117a:	ce 01       	movw	r24, r28
    117c:	01 96       	adiw	r24, 0x01	; 1
    117e:	2e d9       	rcall	.-3492   	; 0x3dc <UART_transmit_str>
				turn_ccw(sensor_data,90);
    1180:	6a e5       	ldi	r22, 0x5A	; 90
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	c7 01       	movw	r24, r14
    1186:	28 dc       	rcall	.-1968   	; 0x9d8 <turn_ccw>
    1188:	27 c0       	rjmp	.+78     	; 0x11d8 <__stack+0xd9>
			}
			if(cmd_char == '5') {
    118a:	15 33       	cpi	r17, 0x35	; 53
    118c:	89 f4       	brne	.+34     	; 0x11b0 <__stack+0xb1>
				char confirm[20] = "\n\rRotate -180deg\n\r\0";
    118e:	ea e9       	ldi	r30, 0x9A	; 154
    1190:	f3 e0       	ldi	r31, 0x03	; 3
    1192:	de 01       	movw	r26, r28
    1194:	11 96       	adiw	r26, 0x01	; 1
    1196:	8c 2d       	mov	r24, r12
    1198:	01 90       	ld	r0, Z+
    119a:	0d 92       	st	X+, r0
    119c:	8a 95       	dec	r24
    119e:	e1 f7       	brne	.-8      	; 0x1198 <__stack+0x99>
				UART_transmit_str(confirm);
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	1b d9       	rcall	.-3530   	; 0x3dc <UART_transmit_str>
				turn_ccw(sensor_data,180);
    11a6:	64 eb       	ldi	r22, 0xB4	; 180
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	c7 01       	movw	r24, r14
    11ac:	15 dc       	rcall	.-2006   	; 0x9d8 <turn_ccw>
    11ae:	a3 ce       	rjmp	.-698    	; 0xef6 <main+0x6c>
			}
		}
		
		if(cmd_char == 's') {	
    11b0:	13 37       	cpi	r17, 0x73	; 115
    11b2:	91 f4       	brne	.+36     	; 0x11d8 <__stack+0xd9>
			UART_transmit_str("Sending Sweep\n\r\0");
    11b4:	8c e5       	ldi	r24, 0x5C	; 92
    11b6:	92 e0       	ldi	r25, 0x02	; 2
    11b8:	11 d9       	rcall	.-3550   	; 0x3dc <UART_transmit_str>
			sensor_sweep_init();
    11ba:	39 dc       	rcall	.-1934   	; 0xa2e <sensor_sweep_init>
			sensor_sweep();
    11bc:	73 dc       	rcall	.-1818   	; 0xaa4 <sensor_sweep>
			
			char confirm[20] = "\n\rSweep Complete\n\r\0";
    11be:	ee ea       	ldi	r30, 0xAE	; 174
    11c0:	f3 e0       	ldi	r31, 0x03	; 3
    11c2:	de 01       	movw	r26, r28
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	8c 2d       	mov	r24, r12
    11c8:	01 90       	ld	r0, Z+
    11ca:	0d 92       	st	X+, r0
    11cc:	8a 95       	dec	r24
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <__stack+0xc9>
			UART_transmit_str(confirm);
    11d0:	ce 01       	movw	r24, r28
    11d2:	01 96       	adiw	r24, 0x01	; 1
    11d4:	03 d9       	rcall	.-3578   	; 0x3dc <UART_transmit_str>
    11d6:	8f ce       	rjmp	.-738    	; 0xef6 <main+0x6c>
			
		}
	
		if(cmd_char == 'p') {
    11d8:	10 37       	cpi	r17, 0x70	; 112
    11da:	09 f0       	breq	.+2      	; 0x11de <__stack+0xdf>
    11dc:	8c ce       	rjmp	.-744    	; 0xef6 <main+0x6c>
			UART_transmit_str("Confirm play? Y/N\n\r\0");
    11de:	8d e6       	ldi	r24, 0x6D	; 109
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	fc d8       	rcall	.-3592   	; 0x3dc <UART_transmit_str>
			cmd_char = UART_rec();
    11e4:	f7 d8       	rcall	.-3602   	; 0x3d4 <UART_rec>
			if(cmd_char == 'y' || cmd_char == 'Y') {
    11e6:	8f 7d       	andi	r24, 0xDF	; 223
    11e8:	89 35       	cpi	r24, 0x59	; 89
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__stack+0xef>
    11ec:	84 ce       	rjmp	.-760    	; 0xef6 <main+0x6c>
				char confirm[20] = "\n\rPlaying Audio\n\r\0";
    11ee:	83 e1       	ldi	r24, 0x13	; 19
    11f0:	e2 ec       	ldi	r30, 0xC2	; 194
    11f2:	f3 e0       	ldi	r31, 0x03	; 3
    11f4:	de 01       	movw	r26, r28
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	8a 95       	dec	r24
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <__stack+0xf9>
    1200:	1c 8a       	std	Y+20, r1	; 0x14
				UART_transmit_str(confirm);
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	ea d8       	rcall	.-3628   	; 0x3dc <UART_transmit_str>
				play_song();
    1208:	0d de       	rcall	.-998    	; 0xe24 <play_song>
			}	
		}
		
    }
	
	if(finished == 1) oi_free(sensor_data);
    120a:	c7 01       	movw	r24, r14
    120c:	0c d1       	rcall	.+536    	; 0x1426 <oi_free>
}
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	64 96       	adiw	r28, 0x14	; 20
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	9f 90       	pop	r9
    1230:	8f 90       	pop	r8
    1232:	7f 90       	pop	r7
    1234:	6f 90       	pop	r6
    1236:	08 95       	ret

00001238 <lcd_toggle_clear>:
	int i;

	for (i=0;i<size;i++) {		
		lcd_putc(string[i]);
	}
}
    1238:	de 9a       	sbi	0x1b, 6	; 27
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	a9 d8       	rcall	.-3758   	; 0x390 <wait_ms>
    123e:	de 98       	cbi	0x1b, 6	; 27
    1240:	8b b3       	in	r24, 0x1b	; 27
    1242:	80 7f       	andi	r24, 0xF0	; 240
    1244:	8b bb       	out	0x1b, r24	; 27
    1246:	08 95       	ret

00001248 <lcd_command>:
    1248:	cf 93       	push	r28
    124a:	c8 2f       	mov	r28, r24
    124c:	dc 98       	cbi	0x1b, 4	; 27
    124e:	8b b3       	in	r24, 0x1b	; 27
    1250:	9c 2f       	mov	r25, r28
    1252:	92 95       	swap	r25
    1254:	9f 70       	andi	r25, 0x0F	; 15
    1256:	89 2b       	or	r24, r25
    1258:	8b bb       	out	0x1b, r24	; 27
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	ed df       	rcall	.-38     	; 0x1238 <lcd_toggle_clear>
    125e:	8b b3       	in	r24, 0x1b	; 27
    1260:	cf 70       	andi	r28, 0x0F	; 15
    1262:	c8 2b       	or	r28, r24
    1264:	cb bb       	out	0x1b, r28	; 27
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	e7 df       	rcall	.-50     	; 0x1238 <lcd_toggle_clear>
    126a:	dc 9a       	sbi	0x1b, 4	; 27
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <lcd_clear>:
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	ea df       	rcall	.-44     	; 0x1248 <lcd_command>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	8b c8       	rjmp	.-3818   	; 0x390 <wait_ms>
    127a:	08 95       	ret

0000127c <lcd_home_line1>:
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	e4 cf       	rjmp	.-56     	; 0x1248 <lcd_command>
    1280:	08 95       	ret

00001282 <lcd_init>:
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	8a bb       	out	0x1a, r24	; 26
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	8b bb       	out	0x1b, r24	; 27
    128a:	de 9a       	sbi	0x1b, 6	; 27
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	7f d8       	rcall	.-3842   	; 0x390 <wait_ms>
    1292:	de 98       	cbi	0x1b, 6	; 27
    1294:	85 e0       	ldi	r24, 0x05	; 5
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	7b d8       	rcall	.-3850   	; 0x390 <wait_ms>
    129a:	de 9a       	sbi	0x1b, 6	; 27
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	77 d8       	rcall	.-3858   	; 0x390 <wait_ms>
    12a2:	de 98       	cbi	0x1b, 6	; 27
    12a4:	de 9a       	sbi	0x1b, 6	; 27
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	72 d8       	rcall	.-3868   	; 0x390 <wait_ms>
    12ac:	de 98       	cbi	0x1b, 6	; 27
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	8b bb       	out	0x1b, r24	; 27
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	c1 df       	rcall	.-126    	; 0x1238 <lcd_toggle_clear>
    12b6:	8b b3       	in	r24, 0x1b	; 27
    12b8:	8b bb       	out	0x1b, r24	; 27
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	bd df       	rcall	.-134    	; 0x1238 <lcd_toggle_clear>
    12be:	8b b3       	in	r24, 0x1b	; 27
    12c0:	8e 60       	ori	r24, 0x0E	; 14
    12c2:	8b bb       	out	0x1b, r24	; 27
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	b8 df       	rcall	.-144    	; 0x1238 <lcd_toggle_clear>
    12c8:	8b b3       	in	r24, 0x1b	; 27
    12ca:	8b bb       	out	0x1b, r24	; 27
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	b4 df       	rcall	.-152    	; 0x1238 <lcd_toggle_clear>
    12d0:	8b b3       	in	r24, 0x1b	; 27
    12d2:	86 60       	ori	r24, 0x06	; 6
    12d4:	8b bb       	out	0x1b, r24	; 27
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	af df       	rcall	.-162    	; 0x1238 <lcd_toggle_clear>
    12da:	8b b3       	in	r24, 0x1b	; 27
    12dc:	8b bb       	out	0x1b, r24	; 27
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	ab df       	rcall	.-170    	; 0x1238 <lcd_toggle_clear>
    12e2:	d8 9a       	sbi	0x1b, 0	; 27
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	a8 df       	rcall	.-176    	; 0x1238 <lcd_toggle_clear>
    12e8:	dc 9a       	sbi	0x1b, 4	; 27
    12ea:	c8 cf       	rjmp	.-112    	; 0x127c <lcd_home_line1>
    12ec:	08 95       	ret

000012ee <lcd_home_line2>:
    12ee:	80 ec       	ldi	r24, 0xC0	; 192
    12f0:	ab cf       	rjmp	.-170    	; 0x1248 <lcd_command>
    12f2:	08 95       	ret

000012f4 <lcd_home_line3>:
    12f4:	84 e9       	ldi	r24, 0x94	; 148
    12f6:	a8 cf       	rjmp	.-176    	; 0x1248 <lcd_command>
    12f8:	08 95       	ret

000012fa <lcd_home_line4>:
    12fa:	84 ed       	ldi	r24, 0xD4	; 212
    12fc:	a5 cf       	rjmp	.-182    	; 0x1248 <lcd_command>
    12fe:	08 95       	ret

00001300 <lcd_putc>:
    1300:	cf 93       	push	r28
    1302:	c8 2f       	mov	r28, r24
    1304:	8b b3       	in	r24, 0x1b	; 27
    1306:	9c 2f       	mov	r25, r28
    1308:	92 95       	swap	r25
    130a:	9f 70       	andi	r25, 0x0F	; 15
    130c:	89 2b       	or	r24, r25
    130e:	8b bb       	out	0x1b, r24	; 27
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	92 df       	rcall	.-220    	; 0x1238 <lcd_toggle_clear>
    1314:	8b b3       	in	r24, 0x1b	; 27
    1316:	cf 70       	andi	r28, 0x0F	; 15
    1318:	c8 2b       	or	r28, r24
    131a:	cb bb       	out	0x1b, r28	; 27
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	8c df       	rcall	.-232    	; 0x1238 <lcd_toggle_clear>
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <lprintf>:
 *
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) {
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	c1 55       	subi	r28, 0x51	; 81
    133a:	d1 09       	sbc	r29, r1
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	fe 01       	movw	r30, r28
    1348:	e4 5a       	subi	r30, 0xA4	; 164
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	41 91       	ld	r20, Z+
    134e:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
    1350:	9f 01       	movw	r18, r30
    1352:	61 e5       	ldi	r22, 0x51	; 81
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	ce 01       	movw	r24, r28
    1358:	01 96       	adiw	r24, 0x01	; 1
    135a:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
    135e:	be 01       	movw	r22, r28
    1360:	6f 5f       	subi	r22, 0xFF	; 255
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	82 e6       	ldi	r24, 0x62	; 98
    1366:	94 e0       	ldi	r25, 0x04	; 4
    1368:	0e 94 01 15 	call	0x2a02	; 0x2a02 <strcmp>
    136c:	89 2b       	or	r24, r25
    136e:	09 f4       	brne	.+2      	; 0x1372 <lprintf+0x4e>
    1370:	43 c0       	rjmp	.+134    	; 0x13f8 <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
    1372:	be 01       	movw	r22, r28
    1374:	6f 5f       	subi	r22, 0xFF	; 255
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	82 e6       	ldi	r24, 0x62	; 98
    137a:	94 e0       	ldi	r25, 0x04	; 4
    137c:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <strcpy>
	lcd_clear();
    1380:	77 df       	rcall	.-274    	; 0x1270 <lcd_clear>
    1382:	9e 01       	movw	r18, r28
    1384:	2f 5f       	subi	r18, 0xFF	; 255
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) {
		if (*str == '\n') {
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
    138e:	0f 2e       	mov	r0, r31
    1390:	f4 e1       	ldi	r31, 0x14	; 20
    1392:	ef 2e       	mov	r14, r31
    1394:	f1 2c       	mov	r15, r1
    1396:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
    1398:	27 c0       	rjmp	.+78     	; 0x13e8 <lprintf+0xc4>
		if (*str == '\n') {
    139a:	8a 30       	cpi	r24, 0x0A	; 10
    139c:	51 f4       	brne	.+20     	; 0x13b2 <lprintf+0x8e>
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
    139e:	c8 01       	movw	r24, r16
    13a0:	b7 01       	movw	r22, r14
    13a2:	0e 94 af 12 	call	0x255e	; 0x255e <__divmodhi4>
    13a6:	f7 01       	movw	r30, r14
    13a8:	e8 1b       	sub	r30, r24
    13aa:	f9 0b       	sbc	r31, r25
    13ac:	0e 0f       	add	r16, r30
    13ae:	1f 1f       	adc	r17, r31
    13b0:	03 c0       	rjmp	.+6      	; 0x13b8 <lprintf+0x94>
		} else {
			lcd_putc(*str);
    13b2:	a6 df       	rcall	.-180    	; 0x1300 <lcd_putc>
			charnum++;
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) { 
    13b8:	c8 01       	movw	r24, r16
    13ba:	b7 01       	movw	r22, r14
    13bc:	0e 94 af 12 	call	0x255e	; 0x255e <__divmodhi4>
    13c0:	89 2b       	or	r24, r25
    13c2:	91 f4       	brne	.+36     	; 0x13e8 <lprintf+0xc4>
			switch (charnum / LCD_WIDTH) {
    13c4:	c8 01       	movw	r24, r16
    13c6:	b7 01       	movw	r22, r14
    13c8:	0e 94 af 12 	call	0x255e	; 0x255e <__divmodhi4>
    13cc:	62 30       	cpi	r22, 0x02	; 2
    13ce:	71 05       	cpc	r23, r1
    13d0:	41 f0       	breq	.+16     	; 0x13e2 <lprintf+0xbe>
    13d2:	63 30       	cpi	r22, 0x03	; 3
    13d4:	71 05       	cpc	r23, r1
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <lprintf+0xc2>
    13d8:	61 30       	cpi	r22, 0x01	; 1
    13da:	71 05       	cpc	r23, r1
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <lprintf+0xc4>
			case 1:
				lcd_home_line2();
    13de:	87 df       	rcall	.-242    	; 0x12ee <lcd_home_line2>
				break;
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <lprintf+0xc4>
			case 2:
				lcd_home_line3();
    13e2:	88 df       	rcall	.-240    	; 0x12f4 <lcd_home_line3>
				break;
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <lprintf+0xc4>
			case 3:
				lcd_home_line4();
    13e6:	89 df       	rcall	.-238    	; 0x12fa <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) {
    13e8:	f6 01       	movw	r30, r12
    13ea:	81 91       	ld	r24, Z+
    13ec:	6f 01       	movw	r12, r30
    13ee:	88 23       	and	r24, r24
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <lprintf+0xd4>
    13f2:	00 35       	cpi	r16, 0x50	; 80
    13f4:	11 05       	cpc	r17, r1
    13f6:	8c f2       	brlt	.-94     	; 0x139a <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
    13f8:	cf 5a       	subi	r28, 0xAF	; 175
    13fa:	df 4f       	sbci	r29, 0xFF	; 255
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	08 95       	ret

00001418 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
    1418:	64 e3       	ldi	r22, 0x34	; 52
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <calloc>
    1424:	08 95       	ret

00001426 <oi_free>:
    1426:	0c 94 88 13 	jmp	0x2710	; 0x2710 <free>
    142a:	08 95       	ret

0000142c <oi_byte_tx>:
    142c:	eb e9       	ldi	r30, 0x9B	; 155
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	90 81       	ld	r25, Z
    1432:	95 ff       	sbrs	r25, 5
    1434:	fd cf       	rjmp	.-6      	; 0x1430 <oi_byte_tx+0x4>
    1436:	80 93 9c 00 	sts	0x009C, r24
    143a:	08 95       	ret

0000143c <oi_set_leds>:
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	08 2f       	mov	r16, r24
    1446:	16 2f       	mov	r17, r22
    1448:	d4 2f       	mov	r29, r20
    144a:	c2 2f       	mov	r28, r18
    144c:	8b e8       	ldi	r24, 0x8B	; 139
    144e:	ee df       	rcall	.-36     	; 0x142c <oi_byte_tx>
    1450:	11 23       	and	r17, r17
    1452:	29 f0       	breq	.+10     	; 0x145e <oi_set_leds+0x22>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	01 11       	cpse	r16, r1
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <oi_set_leds+0x24>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <oi_set_leds+0x24>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	e5 df       	rcall	.-54     	; 0x142c <oi_byte_tx>
    1462:	8d 2f       	mov	r24, r29
    1464:	e3 df       	rcall	.-58     	; 0x142c <oi_byte_tx>
    1466:	8c 2f       	mov	r24, r28
    1468:	e1 df       	rcall	.-62     	; 0x142c <oi_byte_tx>
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	08 95       	ret

00001474 <oi_set_wheels>:
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	18 2f       	mov	r17, r24
    147e:	09 2f       	mov	r16, r25
    1480:	c6 2f       	mov	r28, r22
    1482:	d7 2f       	mov	r29, r23
    1484:	81 e9       	ldi	r24, 0x91	; 145
    1486:	d2 df       	rcall	.-92     	; 0x142c <oi_byte_tx>
    1488:	80 2f       	mov	r24, r16
    148a:	d0 df       	rcall	.-96     	; 0x142c <oi_byte_tx>
    148c:	81 2f       	mov	r24, r17
    148e:	ce df       	rcall	.-100    	; 0x142c <oi_byte_tx>
    1490:	8d 2f       	mov	r24, r29
    1492:	cc df       	rcall	.-104    	; 0x142c <oi_byte_tx>
    1494:	8c 2f       	mov	r24, r28
    1496:	ca df       	rcall	.-108    	; 0x142c <oi_byte_tx>
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <oi_load_song>:
    14a2:	af 92       	push	r10
    14a4:	bf 92       	push	r11
    14a6:	cf 92       	push	r12
    14a8:	df 92       	push	r13
    14aa:	ef 92       	push	r14
    14ac:	ff 92       	push	r15
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	c8 2f       	mov	r28, r24
    14b8:	7b 01       	movw	r14, r22
    14ba:	6a 01       	movw	r12, r20
    14bc:	a2 2e       	mov	r10, r18
    14be:	b3 2e       	mov	r11, r19
    14c0:	8c e8       	ldi	r24, 0x8C	; 140
    14c2:	b4 df       	rcall	.-152    	; 0x142c <oi_byte_tx>
    14c4:	8c 2f       	mov	r24, r28
    14c6:	b2 df       	rcall	.-156    	; 0x142c <oi_byte_tx>
    14c8:	8e 2d       	mov	r24, r14
    14ca:	b0 df       	rcall	.-160    	; 0x142c <oi_byte_tx>
    14cc:	1e 14       	cp	r1, r14
    14ce:	1f 04       	cpc	r1, r15
    14d0:	74 f4       	brge	.+28     	; 0x14ee <oi_load_song+0x4c>
    14d2:	e6 01       	movw	r28, r12
    14d4:	0a 2d       	mov	r16, r10
    14d6:	1b 2d       	mov	r17, r11
    14d8:	ec 0c       	add	r14, r12
    14da:	fd 1c       	adc	r15, r13
    14dc:	89 91       	ld	r24, Y+
    14de:	a6 df       	rcall	.-180    	; 0x142c <oi_byte_tx>
    14e0:	f8 01       	movw	r30, r16
    14e2:	81 91       	ld	r24, Z+
    14e4:	8f 01       	movw	r16, r30
    14e6:	a2 df       	rcall	.-188    	; 0x142c <oi_byte_tx>
    14e8:	ce 15       	cp	r28, r14
    14ea:	df 05       	cpc	r29, r15
    14ec:	b9 f7       	brne	.-18     	; 0x14dc <oi_load_song+0x3a>
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	08 95       	ret

00001504 <oi_play_song>:
    1504:	cf 93       	push	r28
    1506:	c8 2f       	mov	r28, r24
    1508:	8d e8       	ldi	r24, 0x8D	; 141
    150a:	90 df       	rcall	.-224    	; 0x142c <oi_byte_tx>
    150c:	8c 2f       	mov	r24, r28
    150e:	8e df       	rcall	.-228    	; 0x142c <oi_byte_tx>
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
    1514:	eb e9       	ldi	r30, 0x9B	; 155
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	88 23       	and	r24, r24
    151c:	ec f7       	brge	.-6      	; 0x1518 <oi_byte_rx+0x4>

	return UDR1;
    151e:	80 91 9c 00 	lds	r24, 0x009C
}
    1522:	08 95       	ret

00001524 <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1532:	80 91 9b 00 	lds	r24, 0x009B
    1536:	88 23       	and	r24, r24
    1538:	44 f4       	brge	.+16     	; 0x154a <oi_update+0x26>
		i = UDR1;
    153a:	ac e9       	ldi	r26, 0x9C	; 156
    153c:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    153e:	eb e9       	ldi	r30, 0x9B	; 155
    1540:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
    1542:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
    1544:	80 81       	ld	r24, Z
    1546:	88 23       	and	r24, r24
    1548:	e4 f3       	brlt	.-8      	; 0x1542 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
    154a:	8e e8       	ldi	r24, 0x8E	; 142
    154c:	6f df       	rcall	.-290    	; 0x142c <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
    154e:	86 e0       	ldi	r24, 0x06	; 6
    1550:	6d df       	rcall	.-294    	; 0x142c <oi_byte_tx>
    1552:	e7 01       	movw	r28, r14
    1554:	87 01       	movw	r16, r14
    1556:	0c 5c       	subi	r16, 0xCC	; 204
    1558:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
    155a:	dc df       	rcall	.-72     	; 0x1514 <oi_byte_rx>
    155c:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
    155e:	c0 17       	cp	r28, r16
    1560:	d1 07       	cpc	r29, r17
    1562:	d9 f7       	brne	.-10     	; 0x155a <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
    1564:	f7 01       	movw	r30, r14
    1566:	84 85       	ldd	r24, Z+12	; 0x0c
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	98 2f       	mov	r25, r24
    156c:	88 27       	eor	r24, r24
    156e:	25 85       	ldd	r18, Z+13	; 0x0d
    1570:	82 0f       	add	r24, r18
    1572:	91 1d       	adc	r25, r1
    1574:	95 87       	std	Z+13, r25	; 0x0d
    1576:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
    1578:	86 85       	ldd	r24, Z+14	; 0x0e
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	98 2f       	mov	r25, r24
    157e:	88 27       	eor	r24, r24
    1580:	27 85       	ldd	r18, Z+15	; 0x0f
    1582:	82 0f       	add	r24, r18
    1584:	91 1d       	adc	r25, r1
    1586:	97 87       	std	Z+15, r25	; 0x0f
    1588:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
    158a:	81 89       	ldd	r24, Z+17	; 0x11
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	98 2f       	mov	r25, r24
    1590:	88 27       	eor	r24, r24
    1592:	22 89       	ldd	r18, Z+18	; 0x12
    1594:	82 0f       	add	r24, r18
    1596:	91 1d       	adc	r25, r1
    1598:	92 8b       	std	Z+18, r25	; 0x12
    159a:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
    159c:	83 89       	ldd	r24, Z+19	; 0x13
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	98 2f       	mov	r25, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	24 89       	ldd	r18, Z+20	; 0x14
    15a6:	82 0f       	add	r24, r18
    15a8:	91 1d       	adc	r25, r1
    15aa:	94 8b       	std	Z+20, r25	; 0x14
    15ac:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
    15ae:	86 89       	ldd	r24, Z+22	; 0x16
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	98 2f       	mov	r25, r24
    15b4:	88 27       	eor	r24, r24
    15b6:	27 89       	ldd	r18, Z+23	; 0x17
    15b8:	82 0f       	add	r24, r18
    15ba:	91 1d       	adc	r25, r1
    15bc:	97 8b       	std	Z+23, r25	; 0x17
    15be:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
    15c0:	80 8d       	ldd	r24, Z+24	; 0x18
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	98 2f       	mov	r25, r24
    15c6:	88 27       	eor	r24, r24
    15c8:	21 8d       	ldd	r18, Z+25	; 0x19
    15ca:	82 0f       	add	r24, r18
    15cc:	91 1d       	adc	r25, r1
    15ce:	91 8f       	std	Z+25, r25	; 0x19
    15d0:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
    15d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	98 2f       	mov	r25, r24
    15d8:	88 27       	eor	r24, r24
    15da:	23 8d       	ldd	r18, Z+27	; 0x1b
    15dc:	82 0f       	add	r24, r18
    15de:	91 1d       	adc	r25, r1
    15e0:	93 8f       	std	Z+27, r25	; 0x1b
    15e2:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
    15e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	98 2f       	mov	r25, r24
    15ea:	88 27       	eor	r24, r24
    15ec:	25 8d       	ldd	r18, Z+29	; 0x1d
    15ee:	82 0f       	add	r24, r18
    15f0:	91 1d       	adc	r25, r1
    15f2:	95 8f       	std	Z+29, r25	; 0x1d
    15f4:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
    15f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	98 2f       	mov	r25, r24
    15fc:	88 27       	eor	r24, r24
    15fe:	27 8d       	ldd	r18, Z+31	; 0x1f
    1600:	82 0f       	add	r24, r18
    1602:	91 1d       	adc	r25, r1
    1604:	97 8f       	std	Z+31, r25	; 0x1f
    1606:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
    1608:	80 a1       	ldd	r24, Z+32	; 0x20
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	98 2f       	mov	r25, r24
    160e:	88 27       	eor	r24, r24
    1610:	21 a1       	ldd	r18, Z+33	; 0x21
    1612:	82 0f       	add	r24, r18
    1614:	91 1d       	adc	r25, r1
    1616:	91 a3       	std	Z+33, r25	; 0x21
    1618:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
    161a:	82 a1       	ldd	r24, Z+34	; 0x22
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	98 2f       	mov	r25, r24
    1620:	88 27       	eor	r24, r24
    1622:	23 a1       	ldd	r18, Z+35	; 0x23
    1624:	82 0f       	add	r24, r18
    1626:	91 1d       	adc	r25, r1
    1628:	93 a3       	std	Z+35, r25	; 0x23
    162a:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
    162c:	82 a5       	ldd	r24, Z+42	; 0x2a
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	21 a5       	ldd	r18, Z+41	; 0x29
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	32 2f       	mov	r19, r18
    1636:	22 27       	eor	r18, r18
    1638:	28 0f       	add	r18, r24
    163a:	39 1f       	adc	r19, r25
    163c:	36 a3       	std	Z+38, r19	; 0x26
    163e:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
    1640:	20 a9       	ldd	r18, Z+48	; 0x30
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	32 2f       	mov	r19, r18
    1646:	22 27       	eor	r18, r18
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	95 a7       	std	Z+45, r25	; 0x2d
    164e:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
    1650:	82 a9       	ldd	r24, Z+50	; 0x32
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	98 2f       	mov	r25, r24
    1656:	88 27       	eor	r24, r24
    1658:	23 a9       	ldd	r18, Z+51	; 0x33
    165a:	82 0f       	add	r24, r18
    165c:	91 1d       	adc	r25, r1
    165e:	97 a7       	std	Z+47, r25	; 0x2f
    1660:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
    1662:	84 a9       	ldd	r24, Z+52	; 0x34
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	98 2f       	mov	r25, r24
    1668:	88 27       	eor	r24, r24
    166a:	25 a9       	ldd	r18, Z+53	; 0x35
    166c:	82 0f       	add	r24, r18
    166e:	91 1d       	adc	r25, r1
    1670:	91 ab       	std	Z+49, r25	; 0x31
    1672:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
    1674:	86 a9       	ldd	r24, Z+54	; 0x36
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	98 2f       	mov	r25, r24
    167a:	88 27       	eor	r24, r24
    167c:	27 a9       	ldd	r18, Z+55	; 0x37
    167e:	82 0f       	add	r24, r18
    1680:	91 1d       	adc	r25, r1
    1682:	93 ab       	std	Z+51, r25	; 0x33
    1684:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
    1686:	83 e2       	ldi	r24, 0x23	; 35
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	0e 94 c8 01 	call	0x390	; 0x390 <wait_ms>
}
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	08 95       	ret

0000169c <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
    16a6:	09 e9       	ldi	r16, 0x99	; 153
    16a8:	10 e0       	ldi	r17, 0x00	; 0
    16aa:	80 e1       	ldi	r24, 0x10	; 16
    16ac:	f8 01       	movw	r30, r16
    16ae:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
    16b0:	88 e1       	ldi	r24, 0x18	; 24
    16b2:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
    16b6:	86 e0       	ldi	r24, 0x06	; 6
    16b8:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
    16bc:	80 e8       	ldi	r24, 0x80	; 128
    16be:	b6 de       	rcall	.-660    	; 0x142c <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
    16c0:	81 e8       	ldi	r24, 0x81	; 129
    16c2:	b4 de       	rcall	.-664    	; 0x142c <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
    16c4:	88 e0       	ldi	r24, 0x08	; 8
    16c6:	b2 de       	rcall	.-668    	; 0x142c <oi_byte_tx>
	wait_ms(100);
    16c8:	84 e6       	ldi	r24, 0x64	; 100
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 c8 01 	call	0x390	; 0x390 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
    16d0:	81 e2       	ldi	r24, 0x21	; 33
    16d2:	f8 01       	movw	r30, r16
    16d4:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
    16d6:	84 e8       	ldi	r24, 0x84	; 132
    16d8:	a9 de       	rcall	.-686    	; 0x142c <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
    16da:	2f ef       	ldi	r18, 0xFF	; 255
    16dc:	47 e0       	ldi	r20, 0x07	; 7
    16de:	61 e0       	ldi	r22, 0x01	; 1
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	ac de       	rcall	.-680    	; 0x143c <oi_set_leds>
	
	oi_update(self);
    16e4:	ce 01       	movw	r24, r28
    16e6:	1e df       	rcall	.-452    	; 0x1524 <oi_update>
	oi_update(self); // call twice to clear distance/angle
    16e8:	ce 01       	movw	r24, r28
    16ea:	1c df       	rcall	.-456    	; 0x1524 <oi_update>
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <__subsf3>:
    16f6:	50 58       	subi	r21, 0x80	; 128

000016f8 <__addsf3>:
    16f8:	bb 27       	eor	r27, r27
    16fa:	aa 27       	eor	r26, r26
    16fc:	0e d0       	rcall	.+28     	; 0x171a <__addsf3x>
    16fe:	4d c1       	rjmp	.+666    	; 0x199a <__fp_round>
    1700:	3e d1       	rcall	.+636    	; 0x197e <__fp_pscA>
    1702:	30 f0       	brcs	.+12     	; 0x1710 <__addsf3+0x18>
    1704:	43 d1       	rcall	.+646    	; 0x198c <__fp_pscB>
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__addsf3+0x18>
    1708:	31 f4       	brne	.+12     	; 0x1716 <__addsf3+0x1e>
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	11 f4       	brne	.+4      	; 0x1712 <__addsf3+0x1a>
    170e:	1e f4       	brtc	.+6      	; 0x1716 <__addsf3+0x1e>
    1710:	33 c1       	rjmp	.+614    	; 0x1978 <__fp_nan>
    1712:	0e f4       	brtc	.+2      	; 0x1716 <__addsf3+0x1e>
    1714:	e0 95       	com	r30
    1716:	e7 fb       	bst	r30, 7
    1718:	29 c1       	rjmp	.+594    	; 0x196c <__fp_inf>

0000171a <__addsf3x>:
    171a:	e9 2f       	mov	r30, r25
    171c:	4f d1       	rcall	.+670    	; 0x19bc <__fp_split3>
    171e:	80 f3       	brcs	.-32     	; 0x1700 <__addsf3+0x8>
    1720:	ba 17       	cp	r27, r26
    1722:	62 07       	cpc	r22, r18
    1724:	73 07       	cpc	r23, r19
    1726:	84 07       	cpc	r24, r20
    1728:	95 07       	cpc	r25, r21
    172a:	18 f0       	brcs	.+6      	; 0x1732 <__addsf3x+0x18>
    172c:	71 f4       	brne	.+28     	; 0x174a <__addsf3x+0x30>
    172e:	9e f5       	brtc	.+102    	; 0x1796 <__addsf3x+0x7c>
    1730:	67 c1       	rjmp	.+718    	; 0x1a00 <__fp_zero>
    1732:	0e f4       	brtc	.+2      	; 0x1736 <__addsf3x+0x1c>
    1734:	e0 95       	com	r30
    1736:	0b 2e       	mov	r0, r27
    1738:	ba 2f       	mov	r27, r26
    173a:	a0 2d       	mov	r26, r0
    173c:	0b 01       	movw	r0, r22
    173e:	b9 01       	movw	r22, r18
    1740:	90 01       	movw	r18, r0
    1742:	0c 01       	movw	r0, r24
    1744:	ca 01       	movw	r24, r20
    1746:	a0 01       	movw	r20, r0
    1748:	11 24       	eor	r1, r1
    174a:	ff 27       	eor	r31, r31
    174c:	59 1b       	sub	r21, r25
    174e:	99 f0       	breq	.+38     	; 0x1776 <__addsf3x+0x5c>
    1750:	59 3f       	cpi	r21, 0xF9	; 249
    1752:	50 f4       	brcc	.+20     	; 0x1768 <__addsf3x+0x4e>
    1754:	50 3e       	cpi	r21, 0xE0	; 224
    1756:	68 f1       	brcs	.+90     	; 0x17b2 <__addsf3x+0x98>
    1758:	1a 16       	cp	r1, r26
    175a:	f0 40       	sbci	r31, 0x00	; 0
    175c:	a2 2f       	mov	r26, r18
    175e:	23 2f       	mov	r18, r19
    1760:	34 2f       	mov	r19, r20
    1762:	44 27       	eor	r20, r20
    1764:	58 5f       	subi	r21, 0xF8	; 248
    1766:	f3 cf       	rjmp	.-26     	; 0x174e <__addsf3x+0x34>
    1768:	46 95       	lsr	r20
    176a:	37 95       	ror	r19
    176c:	27 95       	ror	r18
    176e:	a7 95       	ror	r26
    1770:	f0 40       	sbci	r31, 0x00	; 0
    1772:	53 95       	inc	r21
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__addsf3x+0x4e>
    1776:	7e f4       	brtc	.+30     	; 0x1796 <__addsf3x+0x7c>
    1778:	1f 16       	cp	r1, r31
    177a:	ba 0b       	sbc	r27, r26
    177c:	62 0b       	sbc	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	ba f0       	brmi	.+46     	; 0x17b2 <__addsf3x+0x98>
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	a1 f0       	breq	.+40     	; 0x17b0 <__addsf3x+0x96>
    1788:	ff 0f       	add	r31, r31
    178a:	bb 1f       	adc	r27, r27
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	c2 f7       	brpl	.-16     	; 0x1784 <__addsf3x+0x6a>
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <__addsf3x+0x98>
    1796:	ba 0f       	add	r27, r26
    1798:	62 1f       	adc	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	48 f4       	brcc	.+18     	; 0x17b2 <__addsf3x+0x98>
    17a0:	87 95       	ror	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	9e 3f       	cpi	r25, 0xFE	; 254
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <__addsf3x+0x96>
    17ae:	b3 cf       	rjmp	.-154    	; 0x1716 <__addsf3+0x1e>
    17b0:	93 95       	inc	r25
    17b2:	88 0f       	add	r24, r24
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <__addsf3x+0x9e>
    17b6:	99 27       	eor	r25, r25
    17b8:	ee 0f       	add	r30, r30
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	08 95       	ret

000017c0 <__divsf3>:
    17c0:	0c d0       	rcall	.+24     	; 0x17da <__divsf3x>
    17c2:	eb c0       	rjmp	.+470    	; 0x199a <__fp_round>
    17c4:	e3 d0       	rcall	.+454    	; 0x198c <__fp_pscB>
    17c6:	40 f0       	brcs	.+16     	; 0x17d8 <__divsf3+0x18>
    17c8:	da d0       	rcall	.+436    	; 0x197e <__fp_pscA>
    17ca:	30 f0       	brcs	.+12     	; 0x17d8 <__divsf3+0x18>
    17cc:	21 f4       	brne	.+8      	; 0x17d6 <__divsf3+0x16>
    17ce:	5f 3f       	cpi	r21, 0xFF	; 255
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <__divsf3+0x18>
    17d2:	cc c0       	rjmp	.+408    	; 0x196c <__fp_inf>
    17d4:	51 11       	cpse	r21, r1
    17d6:	15 c1       	rjmp	.+554    	; 0x1a02 <__fp_szero>
    17d8:	cf c0       	rjmp	.+414    	; 0x1978 <__fp_nan>

000017da <__divsf3x>:
    17da:	f0 d0       	rcall	.+480    	; 0x19bc <__fp_split3>
    17dc:	98 f3       	brcs	.-26     	; 0x17c4 <__divsf3+0x4>

000017de <__divsf3_pse>:
    17de:	99 23       	and	r25, r25
    17e0:	c9 f3       	breq	.-14     	; 0x17d4 <__divsf3+0x14>
    17e2:	55 23       	and	r21, r21
    17e4:	b1 f3       	breq	.-20     	; 0x17d2 <__divsf3+0x12>
    17e6:	95 1b       	sub	r25, r21
    17e8:	55 0b       	sbc	r21, r21
    17ea:	bb 27       	eor	r27, r27
    17ec:	aa 27       	eor	r26, r26
    17ee:	62 17       	cp	r22, r18
    17f0:	73 07       	cpc	r23, r19
    17f2:	84 07       	cpc	r24, r20
    17f4:	38 f0       	brcs	.+14     	; 0x1804 <__divsf3_pse+0x26>
    17f6:	9f 5f       	subi	r25, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	44 1f       	adc	r20, r20
    1800:	aa 1f       	adc	r26, r26
    1802:	a9 f3       	breq	.-22     	; 0x17ee <__divsf3_pse+0x10>
    1804:	33 d0       	rcall	.+102    	; 0x186c <__divsf3_pse+0x8e>
    1806:	0e 2e       	mov	r0, r30
    1808:	3a f0       	brmi	.+14     	; 0x1818 <__divsf3_pse+0x3a>
    180a:	e0 e8       	ldi	r30, 0x80	; 128
    180c:	30 d0       	rcall	.+96     	; 0x186e <__divsf3_pse+0x90>
    180e:	91 50       	subi	r25, 0x01	; 1
    1810:	50 40       	sbci	r21, 0x00	; 0
    1812:	e6 95       	lsr	r30
    1814:	00 1c       	adc	r0, r0
    1816:	ca f7       	brpl	.-14     	; 0x180a <__divsf3_pse+0x2c>
    1818:	29 d0       	rcall	.+82     	; 0x186c <__divsf3_pse+0x8e>
    181a:	fe 2f       	mov	r31, r30
    181c:	27 d0       	rcall	.+78     	; 0x186c <__divsf3_pse+0x8e>
    181e:	66 0f       	add	r22, r22
    1820:	77 1f       	adc	r23, r23
    1822:	88 1f       	adc	r24, r24
    1824:	bb 1f       	adc	r27, r27
    1826:	26 17       	cp	r18, r22
    1828:	37 07       	cpc	r19, r23
    182a:	48 07       	cpc	r20, r24
    182c:	ab 07       	cpc	r26, r27
    182e:	b0 e8       	ldi	r27, 0x80	; 128
    1830:	09 f0       	breq	.+2      	; 0x1834 <__divsf3_pse+0x56>
    1832:	bb 0b       	sbc	r27, r27
    1834:	80 2d       	mov	r24, r0
    1836:	bf 01       	movw	r22, r30
    1838:	ff 27       	eor	r31, r31
    183a:	93 58       	subi	r25, 0x83	; 131
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	2a f0       	brmi	.+10     	; 0x184a <__divsf3_pse+0x6c>
    1840:	9e 3f       	cpi	r25, 0xFE	; 254
    1842:	51 05       	cpc	r21, r1
    1844:	68 f0       	brcs	.+26     	; 0x1860 <__divsf3_pse+0x82>
    1846:	92 c0       	rjmp	.+292    	; 0x196c <__fp_inf>
    1848:	dc c0       	rjmp	.+440    	; 0x1a02 <__fp_szero>
    184a:	5f 3f       	cpi	r21, 0xFF	; 255
    184c:	ec f3       	brlt	.-6      	; 0x1848 <__divsf3_pse+0x6a>
    184e:	98 3e       	cpi	r25, 0xE8	; 232
    1850:	dc f3       	brlt	.-10     	; 0x1848 <__divsf3_pse+0x6a>
    1852:	86 95       	lsr	r24
    1854:	77 95       	ror	r23
    1856:	67 95       	ror	r22
    1858:	b7 95       	ror	r27
    185a:	f7 95       	ror	r31
    185c:	9f 5f       	subi	r25, 0xFF	; 255
    185e:	c9 f7       	brne	.-14     	; 0x1852 <__divsf3_pse+0x74>
    1860:	88 0f       	add	r24, r24
    1862:	91 1d       	adc	r25, r1
    1864:	96 95       	lsr	r25
    1866:	87 95       	ror	r24
    1868:	97 f9       	bld	r25, 7
    186a:	08 95       	ret
    186c:	e1 e0       	ldi	r30, 0x01	; 1
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	bb 1f       	adc	r27, r27
    1876:	62 17       	cp	r22, r18
    1878:	73 07       	cpc	r23, r19
    187a:	84 07       	cpc	r24, r20
    187c:	ba 07       	cpc	r27, r26
    187e:	20 f0       	brcs	.+8      	; 0x1888 <__divsf3_pse+0xaa>
    1880:	62 1b       	sub	r22, r18
    1882:	73 0b       	sbc	r23, r19
    1884:	84 0b       	sbc	r24, r20
    1886:	ba 0b       	sbc	r27, r26
    1888:	ee 1f       	adc	r30, r30
    188a:	88 f7       	brcc	.-30     	; 0x186e <__divsf3_pse+0x90>
    188c:	e0 95       	com	r30
    188e:	08 95       	ret

00001890 <__fixsfsi>:
    1890:	04 d0       	rcall	.+8      	; 0x189a <__fixunssfsi>
    1892:	68 94       	set
    1894:	b1 11       	cpse	r27, r1
    1896:	b5 c0       	rjmp	.+362    	; 0x1a02 <__fp_szero>
    1898:	08 95       	ret

0000189a <__fixunssfsi>:
    189a:	98 d0       	rcall	.+304    	; 0x19cc <__fp_splitA>
    189c:	88 f0       	brcs	.+34     	; 0x18c0 <__fixunssfsi+0x26>
    189e:	9f 57       	subi	r25, 0x7F	; 127
    18a0:	90 f0       	brcs	.+36     	; 0x18c6 <__fixunssfsi+0x2c>
    18a2:	b9 2f       	mov	r27, r25
    18a4:	99 27       	eor	r25, r25
    18a6:	b7 51       	subi	r27, 0x17	; 23
    18a8:	a0 f0       	brcs	.+40     	; 0x18d2 <__fixunssfsi+0x38>
    18aa:	d1 f0       	breq	.+52     	; 0x18e0 <__fixunssfsi+0x46>
    18ac:	66 0f       	add	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	88 1f       	adc	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	1a f0       	brmi	.+6      	; 0x18bc <__fixunssfsi+0x22>
    18b6:	ba 95       	dec	r27
    18b8:	c9 f7       	brne	.-14     	; 0x18ac <__fixunssfsi+0x12>
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <__fixunssfsi+0x46>
    18bc:	b1 30       	cpi	r27, 0x01	; 1
    18be:	81 f0       	breq	.+32     	; 0x18e0 <__fixunssfsi+0x46>
    18c0:	9f d0       	rcall	.+318    	; 0x1a00 <__fp_zero>
    18c2:	b1 e0       	ldi	r27, 0x01	; 1
    18c4:	08 95       	ret
    18c6:	9c c0       	rjmp	.+312    	; 0x1a00 <__fp_zero>
    18c8:	67 2f       	mov	r22, r23
    18ca:	78 2f       	mov	r23, r24
    18cc:	88 27       	eor	r24, r24
    18ce:	b8 5f       	subi	r27, 0xF8	; 248
    18d0:	39 f0       	breq	.+14     	; 0x18e0 <__fixunssfsi+0x46>
    18d2:	b9 3f       	cpi	r27, 0xF9	; 249
    18d4:	cc f3       	brlt	.-14     	; 0x18c8 <__fixunssfsi+0x2e>
    18d6:	86 95       	lsr	r24
    18d8:	77 95       	ror	r23
    18da:	67 95       	ror	r22
    18dc:	b3 95       	inc	r27
    18de:	d9 f7       	brne	.-10     	; 0x18d6 <__fixunssfsi+0x3c>
    18e0:	3e f4       	brtc	.+14     	; 0x18f0 <__fixunssfsi+0x56>
    18e2:	90 95       	com	r25
    18e4:	80 95       	com	r24
    18e6:	70 95       	com	r23
    18e8:	61 95       	neg	r22
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	08 95       	ret

000018f2 <__floatunsisf>:
    18f2:	e8 94       	clt
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <__floatsisf+0x12>

000018f6 <__floatsisf>:
    18f6:	97 fb       	bst	r25, 7
    18f8:	3e f4       	brtc	.+14     	; 0x1908 <__floatsisf+0x12>
    18fa:	90 95       	com	r25
    18fc:	80 95       	com	r24
    18fe:	70 95       	com	r23
    1900:	61 95       	neg	r22
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	99 23       	and	r25, r25
    190a:	a9 f0       	breq	.+42     	; 0x1936 <__floatsisf+0x40>
    190c:	f9 2f       	mov	r31, r25
    190e:	96 e9       	ldi	r25, 0x96	; 150
    1910:	bb 27       	eor	r27, r27
    1912:	93 95       	inc	r25
    1914:	f6 95       	lsr	r31
    1916:	87 95       	ror	r24
    1918:	77 95       	ror	r23
    191a:	67 95       	ror	r22
    191c:	b7 95       	ror	r27
    191e:	f1 11       	cpse	r31, r1
    1920:	f8 cf       	rjmp	.-16     	; 0x1912 <__floatsisf+0x1c>
    1922:	fa f4       	brpl	.+62     	; 0x1962 <__floatsisf+0x6c>
    1924:	bb 0f       	add	r27, r27
    1926:	11 f4       	brne	.+4      	; 0x192c <__floatsisf+0x36>
    1928:	60 ff       	sbrs	r22, 0
    192a:	1b c0       	rjmp	.+54     	; 0x1962 <__floatsisf+0x6c>
    192c:	6f 5f       	subi	r22, 0xFF	; 255
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	8f 4f       	sbci	r24, 0xFF	; 255
    1932:	9f 4f       	sbci	r25, 0xFF	; 255
    1934:	16 c0       	rjmp	.+44     	; 0x1962 <__floatsisf+0x6c>
    1936:	88 23       	and	r24, r24
    1938:	11 f0       	breq	.+4      	; 0x193e <__floatsisf+0x48>
    193a:	96 e9       	ldi	r25, 0x96	; 150
    193c:	11 c0       	rjmp	.+34     	; 0x1960 <__floatsisf+0x6a>
    193e:	77 23       	and	r23, r23
    1940:	21 f0       	breq	.+8      	; 0x194a <__floatsisf+0x54>
    1942:	9e e8       	ldi	r25, 0x8E	; 142
    1944:	87 2f       	mov	r24, r23
    1946:	76 2f       	mov	r23, r22
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <__floatsisf+0x5e>
    194a:	66 23       	and	r22, r22
    194c:	71 f0       	breq	.+28     	; 0x196a <__floatsisf+0x74>
    194e:	96 e8       	ldi	r25, 0x86	; 134
    1950:	86 2f       	mov	r24, r22
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	2a f0       	brmi	.+10     	; 0x1962 <__floatsisf+0x6c>
    1958:	9a 95       	dec	r25
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	88 1f       	adc	r24, r24
    1960:	da f7       	brpl	.-10     	; 0x1958 <__floatsisf+0x62>
    1962:	88 0f       	add	r24, r24
    1964:	96 95       	lsr	r25
    1966:	87 95       	ror	r24
    1968:	97 f9       	bld	r25, 7
    196a:	08 95       	ret

0000196c <__fp_inf>:
    196c:	97 f9       	bld	r25, 7
    196e:	9f 67       	ori	r25, 0x7F	; 127
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	08 95       	ret

00001978 <__fp_nan>:
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	80 ec       	ldi	r24, 0xC0	; 192
    197c:	08 95       	ret

0000197e <__fp_pscA>:
    197e:	00 24       	eor	r0, r0
    1980:	0a 94       	dec	r0
    1982:	16 16       	cp	r1, r22
    1984:	17 06       	cpc	r1, r23
    1986:	18 06       	cpc	r1, r24
    1988:	09 06       	cpc	r0, r25
    198a:	08 95       	ret

0000198c <__fp_pscB>:
    198c:	00 24       	eor	r0, r0
    198e:	0a 94       	dec	r0
    1990:	12 16       	cp	r1, r18
    1992:	13 06       	cpc	r1, r19
    1994:	14 06       	cpc	r1, r20
    1996:	05 06       	cpc	r0, r21
    1998:	08 95       	ret

0000199a <__fp_round>:
    199a:	09 2e       	mov	r0, r25
    199c:	03 94       	inc	r0
    199e:	00 0c       	add	r0, r0
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <__fp_round+0xc>
    19a2:	88 23       	and	r24, r24
    19a4:	52 f0       	brmi	.+20     	; 0x19ba <__fp_round+0x20>
    19a6:	bb 0f       	add	r27, r27
    19a8:	40 f4       	brcc	.+16     	; 0x19ba <__fp_round+0x20>
    19aa:	bf 2b       	or	r27, r31
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <__fp_round+0x18>
    19ae:	60 ff       	sbrs	r22, 0
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <__fp_round+0x20>
    19b2:	6f 5f       	subi	r22, 0xFF	; 255
    19b4:	7f 4f       	sbci	r23, 0xFF	; 255
    19b6:	8f 4f       	sbci	r24, 0xFF	; 255
    19b8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ba:	08 95       	ret

000019bc <__fp_split3>:
    19bc:	57 fd       	sbrc	r21, 7
    19be:	90 58       	subi	r25, 0x80	; 128
    19c0:	44 0f       	add	r20, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	59 f0       	breq	.+22     	; 0x19dc <__fp_splitA+0x10>
    19c6:	5f 3f       	cpi	r21, 0xFF	; 255
    19c8:	71 f0       	breq	.+28     	; 0x19e6 <__fp_splitA+0x1a>
    19ca:	47 95       	ror	r20

000019cc <__fp_splitA>:
    19cc:	88 0f       	add	r24, r24
    19ce:	97 fb       	bst	r25, 7
    19d0:	99 1f       	adc	r25, r25
    19d2:	61 f0       	breq	.+24     	; 0x19ec <__fp_splitA+0x20>
    19d4:	9f 3f       	cpi	r25, 0xFF	; 255
    19d6:	79 f0       	breq	.+30     	; 0x19f6 <__fp_splitA+0x2a>
    19d8:	87 95       	ror	r24
    19da:	08 95       	ret
    19dc:	12 16       	cp	r1, r18
    19de:	13 06       	cpc	r1, r19
    19e0:	14 06       	cpc	r1, r20
    19e2:	55 1f       	adc	r21, r21
    19e4:	f2 cf       	rjmp	.-28     	; 0x19ca <__fp_split3+0xe>
    19e6:	46 95       	lsr	r20
    19e8:	f1 df       	rcall	.-30     	; 0x19cc <__fp_splitA>
    19ea:	08 c0       	rjmp	.+16     	; 0x19fc <__fp_splitA+0x30>
    19ec:	16 16       	cp	r1, r22
    19ee:	17 06       	cpc	r1, r23
    19f0:	18 06       	cpc	r1, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	f1 cf       	rjmp	.-30     	; 0x19d8 <__fp_splitA+0xc>
    19f6:	86 95       	lsr	r24
    19f8:	71 05       	cpc	r23, r1
    19fa:	61 05       	cpc	r22, r1
    19fc:	08 94       	sec
    19fe:	08 95       	ret

00001a00 <__fp_zero>:
    1a00:	e8 94       	clt

00001a02 <__fp_szero>:
    1a02:	bb 27       	eor	r27, r27
    1a04:	66 27       	eor	r22, r22
    1a06:	77 27       	eor	r23, r23
    1a08:	cb 01       	movw	r24, r22
    1a0a:	97 f9       	bld	r25, 7
    1a0c:	08 95       	ret

00001a0e <__mulsf3>:
    1a0e:	0b d0       	rcall	.+22     	; 0x1a26 <__mulsf3x>
    1a10:	c4 cf       	rjmp	.-120    	; 0x199a <__fp_round>
    1a12:	b5 df       	rcall	.-150    	; 0x197e <__fp_pscA>
    1a14:	28 f0       	brcs	.+10     	; 0x1a20 <__mulsf3+0x12>
    1a16:	ba df       	rcall	.-140    	; 0x198c <__fp_pscB>
    1a18:	18 f0       	brcs	.+6      	; 0x1a20 <__mulsf3+0x12>
    1a1a:	95 23       	and	r25, r21
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__mulsf3+0x12>
    1a1e:	a6 cf       	rjmp	.-180    	; 0x196c <__fp_inf>
    1a20:	ab cf       	rjmp	.-170    	; 0x1978 <__fp_nan>
    1a22:	11 24       	eor	r1, r1
    1a24:	ee cf       	rjmp	.-36     	; 0x1a02 <__fp_szero>

00001a26 <__mulsf3x>:
    1a26:	ca df       	rcall	.-108    	; 0x19bc <__fp_split3>
    1a28:	a0 f3       	brcs	.-24     	; 0x1a12 <__mulsf3+0x4>

00001a2a <__mulsf3_pse>:
    1a2a:	95 9f       	mul	r25, r21
    1a2c:	d1 f3       	breq	.-12     	; 0x1a22 <__mulsf3+0x14>
    1a2e:	95 0f       	add	r25, r21
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	55 1f       	adc	r21, r21
    1a34:	62 9f       	mul	r22, r18
    1a36:	f0 01       	movw	r30, r0
    1a38:	72 9f       	mul	r23, r18
    1a3a:	bb 27       	eor	r27, r27
    1a3c:	f0 0d       	add	r31, r0
    1a3e:	b1 1d       	adc	r27, r1
    1a40:	63 9f       	mul	r22, r19
    1a42:	aa 27       	eor	r26, r26
    1a44:	f0 0d       	add	r31, r0
    1a46:	b1 1d       	adc	r27, r1
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	64 9f       	mul	r22, r20
    1a4c:	66 27       	eor	r22, r22
    1a4e:	b0 0d       	add	r27, r0
    1a50:	a1 1d       	adc	r26, r1
    1a52:	66 1f       	adc	r22, r22
    1a54:	82 9f       	mul	r24, r18
    1a56:	22 27       	eor	r18, r18
    1a58:	b0 0d       	add	r27, r0
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	62 1f       	adc	r22, r18
    1a5e:	73 9f       	mul	r23, r19
    1a60:	b0 0d       	add	r27, r0
    1a62:	a1 1d       	adc	r26, r1
    1a64:	62 1f       	adc	r22, r18
    1a66:	83 9f       	mul	r24, r19
    1a68:	a0 0d       	add	r26, r0
    1a6a:	61 1d       	adc	r22, r1
    1a6c:	22 1f       	adc	r18, r18
    1a6e:	74 9f       	mul	r23, r20
    1a70:	33 27       	eor	r19, r19
    1a72:	a0 0d       	add	r26, r0
    1a74:	61 1d       	adc	r22, r1
    1a76:	23 1f       	adc	r18, r19
    1a78:	84 9f       	mul	r24, r20
    1a7a:	60 0d       	add	r22, r0
    1a7c:	21 1d       	adc	r18, r1
    1a7e:	82 2f       	mov	r24, r18
    1a80:	76 2f       	mov	r23, r22
    1a82:	6a 2f       	mov	r22, r26
    1a84:	11 24       	eor	r1, r1
    1a86:	9f 57       	subi	r25, 0x7F	; 127
    1a88:	50 40       	sbci	r21, 0x00	; 0
    1a8a:	8a f0       	brmi	.+34     	; 0x1aae <__mulsf3_pse+0x84>
    1a8c:	e1 f0       	breq	.+56     	; 0x1ac6 <__mulsf3_pse+0x9c>
    1a8e:	88 23       	and	r24, r24
    1a90:	4a f0       	brmi	.+18     	; 0x1aa4 <__mulsf3_pse+0x7a>
    1a92:	ee 0f       	add	r30, r30
    1a94:	ff 1f       	adc	r31, r31
    1a96:	bb 1f       	adc	r27, r27
    1a98:	66 1f       	adc	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	91 50       	subi	r25, 0x01	; 1
    1aa0:	50 40       	sbci	r21, 0x00	; 0
    1aa2:	a9 f7       	brne	.-22     	; 0x1a8e <__mulsf3_pse+0x64>
    1aa4:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	70 f0       	brcs	.+28     	; 0x1ac6 <__mulsf3_pse+0x9c>
    1aaa:	60 cf       	rjmp	.-320    	; 0x196c <__fp_inf>
    1aac:	aa cf       	rjmp	.-172    	; 0x1a02 <__fp_szero>
    1aae:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab0:	ec f3       	brlt	.-6      	; 0x1aac <__mulsf3_pse+0x82>
    1ab2:	98 3e       	cpi	r25, 0xE8	; 232
    1ab4:	dc f3       	brlt	.-10     	; 0x1aac <__mulsf3_pse+0x82>
    1ab6:	86 95       	lsr	r24
    1ab8:	77 95       	ror	r23
    1aba:	67 95       	ror	r22
    1abc:	b7 95       	ror	r27
    1abe:	f7 95       	ror	r31
    1ac0:	e7 95       	ror	r30
    1ac2:	9f 5f       	subi	r25, 0xFF	; 255
    1ac4:	c1 f7       	brne	.-16     	; 0x1ab6 <__mulsf3_pse+0x8c>
    1ac6:	fe 2b       	or	r31, r30
    1ac8:	88 0f       	add	r24, r24
    1aca:	91 1d       	adc	r25, r1
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	97 f9       	bld	r25, 7
    1ad2:	08 95       	ret

00001ad4 <pow>:
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	30 96       	adiw	r30, 0x00	; 0
    1adc:	21 05       	cpc	r18, r1
    1ade:	31 05       	cpc	r19, r1
    1ae0:	99 f1       	breq	.+102    	; 0x1b48 <pow+0x74>
    1ae2:	61 15       	cp	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	61 f4       	brne	.+24     	; 0x1b00 <pow+0x2c>
    1ae8:	80 38       	cpi	r24, 0x80	; 128
    1aea:	bf e3       	ldi	r27, 0x3F	; 63
    1aec:	9b 07       	cpc	r25, r27
    1aee:	49 f1       	breq	.+82     	; 0x1b42 <pow+0x6e>
    1af0:	68 94       	set
    1af2:	90 38       	cpi	r25, 0x80	; 128
    1af4:	81 05       	cpc	r24, r1
    1af6:	61 f0       	breq	.+24     	; 0x1b10 <pow+0x3c>
    1af8:	80 38       	cpi	r24, 0x80	; 128
    1afa:	bf ef       	ldi	r27, 0xFF	; 255
    1afc:	9b 07       	cpc	r25, r27
    1afe:	41 f0       	breq	.+16     	; 0x1b10 <pow+0x3c>
    1b00:	99 23       	and	r25, r25
    1b02:	42 f5       	brpl	.+80     	; 0x1b54 <pow+0x80>
    1b04:	ff 3f       	cpi	r31, 0xFF	; 255
    1b06:	e1 05       	cpc	r30, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	21 05       	cpc	r18, r1
    1b0c:	11 f1       	breq	.+68     	; 0x1b52 <pow+0x7e>
    1b0e:	e8 94       	clt
    1b10:	08 94       	sec
    1b12:	e7 95       	ror	r30
    1b14:	d9 01       	movw	r26, r18
    1b16:	aa 23       	and	r26, r26
    1b18:	29 f4       	brne	.+10     	; 0x1b24 <pow+0x50>
    1b1a:	ab 2f       	mov	r26, r27
    1b1c:	be 2f       	mov	r27, r30
    1b1e:	f8 5f       	subi	r31, 0xF8	; 248
    1b20:	d0 f3       	brcs	.-12     	; 0x1b16 <pow+0x42>
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <pow+0x70>
    1b24:	ff 5f       	subi	r31, 0xFF	; 255
    1b26:	70 f4       	brcc	.+28     	; 0x1b44 <pow+0x70>
    1b28:	a6 95       	lsr	r26
    1b2a:	e0 f7       	brcc	.-8      	; 0x1b24 <pow+0x50>
    1b2c:	f7 39       	cpi	r31, 0x97	; 151
    1b2e:	50 f0       	brcs	.+20     	; 0x1b44 <pow+0x70>
    1b30:	19 f0       	breq	.+6      	; 0x1b38 <pow+0x64>
    1b32:	ff 3a       	cpi	r31, 0xAF	; 175
    1b34:	38 f4       	brcc	.+14     	; 0x1b44 <pow+0x70>
    1b36:	9f 77       	andi	r25, 0x7F	; 127
    1b38:	9f 93       	push	r25
    1b3a:	0c d0       	rcall	.+24     	; 0x1b54 <pow+0x80>
    1b3c:	0f 90       	pop	r0
    1b3e:	07 fc       	sbrc	r0, 7
    1b40:	90 58       	subi	r25, 0x80	; 128
    1b42:	08 95       	ret
    1b44:	3e f0       	brts	.+14     	; 0x1b54 <pow+0x80>
    1b46:	18 cf       	rjmp	.-464    	; 0x1978 <__fp_nan>
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	80 e8       	ldi	r24, 0x80	; 128
    1b4e:	9f e3       	ldi	r25, 0x3F	; 63
    1b50:	08 95       	ret
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	9f 77       	andi	r25, 0x7F	; 127
    1b56:	5f 93       	push	r21
    1b58:	4f 93       	push	r20
    1b5a:	3f 93       	push	r19
    1b5c:	2f 93       	push	r18
    1b5e:	f7 d0       	rcall	.+494    	; 0x1d4e <log>
    1b60:	2f 91       	pop	r18
    1b62:	3f 91       	pop	r19
    1b64:	4f 91       	pop	r20
    1b66:	5f 91       	pop	r21
    1b68:	52 df       	rcall	.-348    	; 0x1a0e <__mulsf3>
    1b6a:	25 c0       	rjmp	.+74     	; 0x1bb6 <exp>

00001b6c <tan>:
    1b6c:	df 93       	push	r29
    1b6e:	d9 2f       	mov	r29, r25
    1b70:	85 d0       	rcall	.+266    	; 0x1c7c <__fp_rempio2>
    1b72:	e6 95       	lsr	r30
    1b74:	d7 95       	ror	r29
    1b76:	2a ed       	ldi	r18, 0xDA	; 218
    1b78:	3f e0       	ldi	r19, 0x0F	; 15
    1b7a:	49 e4       	ldi	r20, 0x49	; 73
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	b3 3a       	cpi	r27, 0xA3	; 163
    1b80:	62 07       	cpc	r22, r18
    1b82:	73 07       	cpc	r23, r19
    1b84:	84 07       	cpc	r24, r20
    1b86:	95 07       	cpc	r25, r21
    1b88:	d7 95       	ror	r29
    1b8a:	2a f0       	brmi	.+10     	; 0x1b96 <tan+0x2a>
    1b8c:	a2 ea       	ldi	r26, 0xA2	; 162
    1b8e:	49 ec       	ldi	r20, 0xC9	; 201
    1b90:	90 68       	ori	r25, 0x80	; 128
    1b92:	c3 dd       	rcall	.-1146   	; 0x171a <__addsf3x>
    1b94:	02 df       	rcall	.-508    	; 0x199a <__fp_round>
    1b96:	ec e8       	ldi	r30, 0x8C	; 140
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	5e d0       	rcall	.+188    	; 0x1c58 <__fp_powsodd>
    1b9c:	dd 0f       	add	r29, r29
    1b9e:	0b f0       	brvs	.+2      	; 0x1ba2 <tan+0x36>
    1ba0:	94 d0       	rcall	.+296    	; 0x1cca <inverse>
    1ba2:	dd 0f       	add	r29, r29
    1ba4:	0b f4       	brvc	.+2      	; 0x1ba8 <tan+0x3c>
    1ba6:	90 58       	subi	r25, 0x80	; 128
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret
    1bac:	19 f4       	brne	.+6      	; 0x1bb4 <tan+0x48>
    1bae:	0e f0       	brts	.+2      	; 0x1bb2 <tan+0x46>
    1bb0:	dd ce       	rjmp	.-582    	; 0x196c <__fp_inf>
    1bb2:	26 cf       	rjmp	.-436    	; 0x1a00 <__fp_zero>
    1bb4:	e1 ce       	rjmp	.-574    	; 0x1978 <__fp_nan>

00001bb6 <exp>:
    1bb6:	0a df       	rcall	.-492    	; 0x19cc <__fp_splitA>
    1bb8:	c8 f3       	brcs	.-14     	; 0x1bac <tan+0x40>
    1bba:	96 38       	cpi	r25, 0x86	; 134
    1bbc:	c0 f7       	brcc	.-16     	; 0x1bae <tan+0x42>
    1bbe:	07 f8       	bld	r0, 7
    1bc0:	0f 92       	push	r0
    1bc2:	e8 94       	clt
    1bc4:	2b e3       	ldi	r18, 0x3B	; 59
    1bc6:	3a ea       	ldi	r19, 0xAA	; 170
    1bc8:	48 eb       	ldi	r20, 0xB8	; 184
    1bca:	5f e7       	ldi	r21, 0x7F	; 127
    1bcc:	2e df       	rcall	.-420    	; 0x1a2a <__mulsf3_pse>
    1bce:	0f 92       	push	r0
    1bd0:	0f 92       	push	r0
    1bd2:	0f 92       	push	r0
    1bd4:	4d b7       	in	r20, 0x3d	; 61
    1bd6:	5e b7       	in	r21, 0x3e	; 62
    1bd8:	0f 92       	push	r0
    1bda:	f9 d0       	rcall	.+498    	; 0x1dce <modf>
    1bdc:	ef ea       	ldi	r30, 0xAF	; 175
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	16 d0       	rcall	.+44     	; 0x1c0e <__fp_powser>
    1be2:	4f 91       	pop	r20
    1be4:	5f 91       	pop	r21
    1be6:	ef 91       	pop	r30
    1be8:	ff 91       	pop	r31
    1bea:	e5 95       	asr	r30
    1bec:	ee 1f       	adc	r30, r30
    1bee:	ff 1f       	adc	r31, r31
    1bf0:	49 f0       	breq	.+18     	; 0x1c04 <exp+0x4e>
    1bf2:	fe 57       	subi	r31, 0x7E	; 126
    1bf4:	e0 68       	ori	r30, 0x80	; 128
    1bf6:	44 27       	eor	r20, r20
    1bf8:	ee 0f       	add	r30, r30
    1bfa:	44 1f       	adc	r20, r20
    1bfc:	fa 95       	dec	r31
    1bfe:	e1 f7       	brne	.-8      	; 0x1bf8 <exp+0x42>
    1c00:	41 95       	neg	r20
    1c02:	55 0b       	sbc	r21, r21
    1c04:	6b d0       	rcall	.+214    	; 0x1cdc <ldexp>
    1c06:	0f 90       	pop	r0
    1c08:	07 fe       	sbrs	r0, 7
    1c0a:	5f c0       	rjmp	.+190    	; 0x1cca <inverse>
    1c0c:	08 95       	ret

00001c0e <__fp_powser>:
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	1f 93       	push	r17
    1c14:	0f 93       	push	r16
    1c16:	ff 92       	push	r15
    1c18:	ef 92       	push	r14
    1c1a:	df 92       	push	r13
    1c1c:	7b 01       	movw	r14, r22
    1c1e:	8c 01       	movw	r16, r24
    1c20:	68 94       	set
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <__fp_powser+0x20>
    1c24:	da 2e       	mov	r13, r26
    1c26:	ef 01       	movw	r28, r30
    1c28:	fe de       	rcall	.-516    	; 0x1a26 <__mulsf3x>
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e8 94       	clt
    1c2e:	a5 91       	lpm	r26, Z+
    1c30:	25 91       	lpm	r18, Z+
    1c32:	35 91       	lpm	r19, Z+
    1c34:	45 91       	lpm	r20, Z+
    1c36:	55 91       	lpm	r21, Z+
    1c38:	ae f3       	brts	.-22     	; 0x1c24 <__fp_powser+0x16>
    1c3a:	ef 01       	movw	r28, r30
    1c3c:	6e dd       	rcall	.-1316   	; 0x171a <__addsf3x>
    1c3e:	fe 01       	movw	r30, r28
    1c40:	97 01       	movw	r18, r14
    1c42:	a8 01       	movw	r20, r16
    1c44:	da 94       	dec	r13
    1c46:	79 f7       	brne	.-34     	; 0x1c26 <__fp_powser+0x18>
    1c48:	df 90       	pop	r13
    1c4a:	ef 90       	pop	r14
    1c4c:	ff 90       	pop	r15
    1c4e:	0f 91       	pop	r16
    1c50:	1f 91       	pop	r17
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <__fp_powsodd>:
    1c58:	9f 93       	push	r25
    1c5a:	8f 93       	push	r24
    1c5c:	7f 93       	push	r23
    1c5e:	6f 93       	push	r22
    1c60:	ff 93       	push	r31
    1c62:	ef 93       	push	r30
    1c64:	9b 01       	movw	r18, r22
    1c66:	ac 01       	movw	r20, r24
    1c68:	d2 de       	rcall	.-604    	; 0x1a0e <__mulsf3>
    1c6a:	ef 91       	pop	r30
    1c6c:	ff 91       	pop	r31
    1c6e:	cf df       	rcall	.-98     	; 0x1c0e <__fp_powser>
    1c70:	2f 91       	pop	r18
    1c72:	3f 91       	pop	r19
    1c74:	4f 91       	pop	r20
    1c76:	5f 91       	pop	r21
    1c78:	ca ce       	rjmp	.-620    	; 0x1a0e <__mulsf3>
    1c7a:	7e ce       	rjmp	.-772    	; 0x1978 <__fp_nan>

00001c7c <__fp_rempio2>:
    1c7c:	a7 de       	rcall	.-690    	; 0x19cc <__fp_splitA>
    1c7e:	e8 f3       	brcs	.-6      	; 0x1c7a <__fp_powsodd+0x22>
    1c80:	e8 94       	clt
    1c82:	e0 e0       	ldi	r30, 0x00	; 0
    1c84:	bb 27       	eor	r27, r27
    1c86:	9f 57       	subi	r25, 0x7F	; 127
    1c88:	f0 f0       	brcs	.+60     	; 0x1cc6 <__fp_rempio2+0x4a>
    1c8a:	2a ed       	ldi	r18, 0xDA	; 218
    1c8c:	3f e0       	ldi	r19, 0x0F	; 15
    1c8e:	49 ec       	ldi	r20, 0xC9	; 201
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <__fp_rempio2+0x22>
    1c92:	ee 0f       	add	r30, r30
    1c94:	bb 0f       	add	r27, r27
    1c96:	66 1f       	adc	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	28 f0       	brcs	.+10     	; 0x1ca8 <__fp_rempio2+0x2c>
    1c9e:	b2 3a       	cpi	r27, 0xA2	; 162
    1ca0:	62 07       	cpc	r22, r18
    1ca2:	73 07       	cpc	r23, r19
    1ca4:	84 07       	cpc	r24, r20
    1ca6:	28 f0       	brcs	.+10     	; 0x1cb2 <__fp_rempio2+0x36>
    1ca8:	b2 5a       	subi	r27, 0xA2	; 162
    1caa:	62 0b       	sbc	r22, r18
    1cac:	73 0b       	sbc	r23, r19
    1cae:	84 0b       	sbc	r24, r20
    1cb0:	e3 95       	inc	r30
    1cb2:	9a 95       	dec	r25
    1cb4:	72 f7       	brpl	.-36     	; 0x1c92 <__fp_rempio2+0x16>
    1cb6:	80 38       	cpi	r24, 0x80	; 128
    1cb8:	30 f4       	brcc	.+12     	; 0x1cc6 <__fp_rempio2+0x4a>
    1cba:	9a 95       	dec	r25
    1cbc:	bb 0f       	add	r27, r27
    1cbe:	66 1f       	adc	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	d2 f7       	brpl	.-12     	; 0x1cba <__fp_rempio2+0x3e>
    1cc6:	90 48       	sbci	r25, 0x80	; 128
    1cc8:	b7 c0       	rjmp	.+366    	; 0x1e38 <__fp_mpack_finite>

00001cca <inverse>:
    1cca:	9b 01       	movw	r18, r22
    1ccc:	ac 01       	movw	r20, r24
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	80 e8       	ldi	r24, 0x80	; 128
    1cd4:	9f e3       	ldi	r25, 0x3F	; 63
    1cd6:	74 cd       	rjmp	.-1304   	; 0x17c0 <__divsf3>
    1cd8:	49 ce       	rjmp	.-878    	; 0x196c <__fp_inf>
    1cda:	ac c0       	rjmp	.+344    	; 0x1e34 <__fp_mpack>

00001cdc <ldexp>:
    1cdc:	77 de       	rcall	.-786    	; 0x19cc <__fp_splitA>
    1cde:	e8 f3       	brcs	.-6      	; 0x1cda <inverse+0x10>
    1ce0:	99 23       	and	r25, r25
    1ce2:	d9 f3       	breq	.-10     	; 0x1cda <inverse+0x10>
    1ce4:	94 0f       	add	r25, r20
    1ce6:	51 1d       	adc	r21, r1
    1ce8:	bb f3       	brvs	.-18     	; 0x1cd8 <inverse+0xe>
    1cea:	91 50       	subi	r25, 0x01	; 1
    1cec:	50 40       	sbci	r21, 0x00	; 0
    1cee:	94 f0       	brlt	.+36     	; 0x1d14 <ldexp+0x38>
    1cf0:	59 f0       	breq	.+22     	; 0x1d08 <ldexp+0x2c>
    1cf2:	88 23       	and	r24, r24
    1cf4:	32 f0       	brmi	.+12     	; 0x1d02 <ldexp+0x26>
    1cf6:	66 0f       	add	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	91 50       	subi	r25, 0x01	; 1
    1cfe:	50 40       	sbci	r21, 0x00	; 0
    1d00:	c1 f7       	brne	.-16     	; 0x1cf2 <ldexp+0x16>
    1d02:	9e 3f       	cpi	r25, 0xFE	; 254
    1d04:	51 05       	cpc	r21, r1
    1d06:	44 f7       	brge	.-48     	; 0x1cd8 <inverse+0xe>
    1d08:	88 0f       	add	r24, r24
    1d0a:	91 1d       	adc	r25, r1
    1d0c:	96 95       	lsr	r25
    1d0e:	87 95       	ror	r24
    1d10:	97 f9       	bld	r25, 7
    1d12:	08 95       	ret
    1d14:	5f 3f       	cpi	r21, 0xFF	; 255
    1d16:	ac f0       	brlt	.+42     	; 0x1d42 <ldexp+0x66>
    1d18:	98 3e       	cpi	r25, 0xE8	; 232
    1d1a:	9c f0       	brlt	.+38     	; 0x1d42 <ldexp+0x66>
    1d1c:	bb 27       	eor	r27, r27
    1d1e:	86 95       	lsr	r24
    1d20:	77 95       	ror	r23
    1d22:	67 95       	ror	r22
    1d24:	b7 95       	ror	r27
    1d26:	08 f4       	brcc	.+2      	; 0x1d2a <ldexp+0x4e>
    1d28:	b1 60       	ori	r27, 0x01	; 1
    1d2a:	93 95       	inc	r25
    1d2c:	c1 f7       	brne	.-16     	; 0x1d1e <ldexp+0x42>
    1d2e:	bb 0f       	add	r27, r27
    1d30:	58 f7       	brcc	.-42     	; 0x1d08 <ldexp+0x2c>
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <ldexp+0x5c>
    1d34:	60 ff       	sbrs	r22, 0
    1d36:	e8 cf       	rjmp	.-48     	; 0x1d08 <ldexp+0x2c>
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	e3 cf       	rjmp	.-58     	; 0x1d08 <ldexp+0x2c>
    1d42:	5f ce       	rjmp	.-834    	; 0x1a02 <__fp_szero>
    1d44:	0e f0       	brts	.+2      	; 0x1d48 <ldexp+0x6c>
    1d46:	76 c0       	rjmp	.+236    	; 0x1e34 <__fp_mpack>
    1d48:	17 ce       	rjmp	.-978    	; 0x1978 <__fp_nan>
    1d4a:	68 94       	set
    1d4c:	0f ce       	rjmp	.-994    	; 0x196c <__fp_inf>

00001d4e <log>:
    1d4e:	3e de       	rcall	.-900    	; 0x19cc <__fp_splitA>
    1d50:	c8 f3       	brcs	.-14     	; 0x1d44 <ldexp+0x68>
    1d52:	99 23       	and	r25, r25
    1d54:	d1 f3       	breq	.-12     	; 0x1d4a <ldexp+0x6e>
    1d56:	c6 f3       	brts	.-16     	; 0x1d48 <ldexp+0x6c>
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	1f 93       	push	r17
    1d5e:	0f 93       	push	r16
    1d60:	ff 92       	push	r15
    1d62:	c9 2f       	mov	r28, r25
    1d64:	dd 27       	eor	r29, r29
    1d66:	88 23       	and	r24, r24
    1d68:	2a f0       	brmi	.+10     	; 0x1d74 <log+0x26>
    1d6a:	21 97       	sbiw	r28, 0x01	; 1
    1d6c:	66 0f       	add	r22, r22
    1d6e:	77 1f       	adc	r23, r23
    1d70:	88 1f       	adc	r24, r24
    1d72:	da f7       	brpl	.-10     	; 0x1d6a <log+0x1c>
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f eb       	ldi	r21, 0xBF	; 191
    1d7c:	9f e3       	ldi	r25, 0x3F	; 63
    1d7e:	88 39       	cpi	r24, 0x98	; 152
    1d80:	20 f0       	brcs	.+8      	; 0x1d8a <log+0x3c>
    1d82:	80 3e       	cpi	r24, 0xE0	; 224
    1d84:	30 f0       	brcs	.+12     	; 0x1d92 <log+0x44>
    1d86:	21 96       	adiw	r28, 0x01	; 1
    1d88:	8f 77       	andi	r24, 0x7F	; 127
    1d8a:	b6 dc       	rcall	.-1684   	; 0x16f8 <__addsf3>
    1d8c:	e7 ed       	ldi	r30, 0xD7	; 215
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <log+0x4a>
    1d92:	b2 dc       	rcall	.-1692   	; 0x16f8 <__addsf3>
    1d94:	e4 e0       	ldi	r30, 0x04	; 4
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	3a df       	rcall	.-396    	; 0x1c0e <__fp_powser>
    1d9a:	8b 01       	movw	r16, r22
    1d9c:	be 01       	movw	r22, r28
    1d9e:	ec 01       	movw	r28, r24
    1da0:	fb 2e       	mov	r15, r27
    1da2:	6f 57       	subi	r22, 0x7F	; 127
    1da4:	71 09       	sbc	r23, r1
    1da6:	75 95       	asr	r23
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 0b       	sbc	r24, r24
    1dac:	99 0b       	sbc	r25, r25
    1dae:	a3 dd       	rcall	.-1210   	; 0x18f6 <__floatsisf>
    1db0:	28 e1       	ldi	r18, 0x18	; 24
    1db2:	32 e7       	ldi	r19, 0x72	; 114
    1db4:	41 e3       	ldi	r20, 0x31	; 49
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	36 de       	rcall	.-916    	; 0x1a26 <__mulsf3x>
    1dba:	af 2d       	mov	r26, r15
    1dbc:	98 01       	movw	r18, r16
    1dbe:	ae 01       	movw	r20, r28
    1dc0:	ff 90       	pop	r15
    1dc2:	0f 91       	pop	r16
    1dc4:	1f 91       	pop	r17
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	a7 dc       	rcall	.-1714   	; 0x171a <__addsf3x>
    1dcc:	e6 cd       	rjmp	.-1076   	; 0x199a <__fp_round>

00001dce <modf>:
    1dce:	fa 01       	movw	r30, r20
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	aa 0f       	add	r26, r26
    1dd4:	bb 1f       	adc	r27, r27
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	bf 57       	subi	r27, 0x7F	; 127
    1ddc:	28 f4       	brcc	.+10     	; 0x1de8 <modf+0x1a>
    1dde:	22 27       	eor	r18, r18
    1de0:	33 27       	eor	r19, r19
    1de2:	44 27       	eor	r20, r20
    1de4:	50 78       	andi	r21, 0x80	; 128
    1de6:	1f c0       	rjmp	.+62     	; 0x1e26 <modf+0x58>
    1de8:	b7 51       	subi	r27, 0x17	; 23
    1dea:	88 f4       	brcc	.+34     	; 0x1e0e <modf+0x40>
    1dec:	ab 2f       	mov	r26, r27
    1dee:	00 24       	eor	r0, r0
    1df0:	46 95       	lsr	r20
    1df2:	37 95       	ror	r19
    1df4:	27 95       	ror	r18
    1df6:	01 1c       	adc	r0, r1
    1df8:	a3 95       	inc	r26
    1dfa:	d2 f3       	brmi	.-12     	; 0x1df0 <modf+0x22>
    1dfc:	00 20       	and	r0, r0
    1dfe:	69 f0       	breq	.+26     	; 0x1e1a <modf+0x4c>
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	44 1f       	adc	r20, r20
    1e06:	b3 95       	inc	r27
    1e08:	da f3       	brmi	.-10     	; 0x1e00 <modf+0x32>
    1e0a:	0d d0       	rcall	.+26     	; 0x1e26 <modf+0x58>
    1e0c:	74 cc       	rjmp	.-1816   	; 0x16f6 <__subsf3>
    1e0e:	61 30       	cpi	r22, 0x01	; 1
    1e10:	71 05       	cpc	r23, r1
    1e12:	a0 e8       	ldi	r26, 0x80	; 128
    1e14:	8a 07       	cpc	r24, r26
    1e16:	b9 46       	sbci	r27, 0x69	; 105
    1e18:	30 f4       	brcc	.+12     	; 0x1e26 <modf+0x58>
    1e1a:	9b 01       	movw	r18, r22
    1e1c:	ac 01       	movw	r20, r24
    1e1e:	66 27       	eor	r22, r22
    1e20:	77 27       	eor	r23, r23
    1e22:	88 27       	eor	r24, r24
    1e24:	90 78       	andi	r25, 0x80	; 128
    1e26:	30 96       	adiw	r30, 0x00	; 0
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <modf+0x64>
    1e2a:	20 83       	st	Z, r18
    1e2c:	31 83       	std	Z+1, r19	; 0x01
    1e2e:	42 83       	std	Z+2, r20	; 0x02
    1e30:	53 83       	std	Z+3, r21	; 0x03
    1e32:	08 95       	ret

00001e34 <__fp_mpack>:
    1e34:	9f 3f       	cpi	r25, 0xFF	; 255
    1e36:	31 f0       	breq	.+12     	; 0x1e44 <__fp_mpack_finite+0xc>

00001e38 <__fp_mpack_finite>:
    1e38:	91 50       	subi	r25, 0x01	; 1
    1e3a:	20 f4       	brcc	.+8      	; 0x1e44 <__fp_mpack_finite+0xc>
    1e3c:	87 95       	ror	r24
    1e3e:	77 95       	ror	r23
    1e40:	67 95       	ror	r22
    1e42:	b7 95       	ror	r27
    1e44:	88 0f       	add	r24, r24
    1e46:	91 1d       	adc	r25, r1
    1e48:	96 95       	lsr	r25
    1e4a:	87 95       	ror	r24
    1e4c:	97 f9       	bld	r25, 7
    1e4e:	08 95       	ret

00001e50 <vfprintf>:
    1e50:	2f 92       	push	r2
    1e52:	3f 92       	push	r3
    1e54:	4f 92       	push	r4
    1e56:	5f 92       	push	r5
    1e58:	6f 92       	push	r6
    1e5a:	7f 92       	push	r7
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	63 97       	sbiw	r28, 0x13	; 19
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	7c 01       	movw	r14, r24
    1e86:	1b 01       	movw	r2, r22
    1e88:	6a 01       	movw	r12, r20
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	17 82       	std	Z+7, r1	; 0x07
    1e8e:	16 82       	std	Z+6, r1	; 0x06
    1e90:	83 81       	ldd	r24, Z+3	; 0x03
    1e92:	81 ff       	sbrs	r24, 1
    1e94:	49 c3       	rjmp	.+1682   	; 0x2528 <vfprintf+0x6d8>
    1e96:	be 01       	movw	r22, r28
    1e98:	6f 5f       	subi	r22, 0xFF	; 255
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	4b 01       	movw	r8, r22
    1e9e:	f7 01       	movw	r30, r14
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	f1 01       	movw	r30, r2
    1ea4:	93 fd       	sbrc	r25, 3
    1ea6:	85 91       	lpm	r24, Z+
    1ea8:	93 ff       	sbrs	r25, 3
    1eaa:	81 91       	ld	r24, Z+
    1eac:	1f 01       	movw	r2, r30
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <vfprintf+0x64>
    1eb2:	36 c3       	rjmp	.+1644   	; 0x2520 <vfprintf+0x6d0>
    1eb4:	85 32       	cpi	r24, 0x25	; 37
    1eb6:	39 f4       	brne	.+14     	; 0x1ec6 <vfprintf+0x76>
    1eb8:	93 fd       	sbrc	r25, 3
    1eba:	85 91       	lpm	r24, Z+
    1ebc:	93 ff       	sbrs	r25, 3
    1ebe:	81 91       	ld	r24, Z+
    1ec0:	1f 01       	movw	r2, r30
    1ec2:	85 32       	cpi	r24, 0x25	; 37
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <vfprintf+0x82>
    1ec6:	b7 01       	movw	r22, r14
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	b6 d5       	rcall	.+2924   	; 0x2a38 <fputc>
    1ecc:	56 01       	movw	r10, r12
    1ece:	65 01       	movw	r12, r10
    1ed0:	e6 cf       	rjmp	.-52     	; 0x1e9e <vfprintf+0x4e>
    1ed2:	10 e0       	ldi	r17, 0x00	; 0
    1ed4:	51 2c       	mov	r5, r1
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	20 32       	cpi	r18, 0x20	; 32
    1eda:	a0 f4       	brcc	.+40     	; 0x1f04 <vfprintf+0xb4>
    1edc:	8b 32       	cpi	r24, 0x2B	; 43
    1ede:	69 f0       	breq	.+26     	; 0x1efa <vfprintf+0xaa>
    1ee0:	30 f4       	brcc	.+12     	; 0x1eee <vfprintf+0x9e>
    1ee2:	80 32       	cpi	r24, 0x20	; 32
    1ee4:	59 f0       	breq	.+22     	; 0x1efc <vfprintf+0xac>
    1ee6:	83 32       	cpi	r24, 0x23	; 35
    1ee8:	69 f4       	brne	.+26     	; 0x1f04 <vfprintf+0xb4>
    1eea:	20 61       	ori	r18, 0x10	; 16
    1eec:	2c c0       	rjmp	.+88     	; 0x1f46 <vfprintf+0xf6>
    1eee:	8d 32       	cpi	r24, 0x2D	; 45
    1ef0:	39 f0       	breq	.+14     	; 0x1f00 <vfprintf+0xb0>
    1ef2:	80 33       	cpi	r24, 0x30	; 48
    1ef4:	39 f4       	brne	.+14     	; 0x1f04 <vfprintf+0xb4>
    1ef6:	21 60       	ori	r18, 0x01	; 1
    1ef8:	26 c0       	rjmp	.+76     	; 0x1f46 <vfprintf+0xf6>
    1efa:	22 60       	ori	r18, 0x02	; 2
    1efc:	24 60       	ori	r18, 0x04	; 4
    1efe:	23 c0       	rjmp	.+70     	; 0x1f46 <vfprintf+0xf6>
    1f00:	28 60       	ori	r18, 0x08	; 8
    1f02:	21 c0       	rjmp	.+66     	; 0x1f46 <vfprintf+0xf6>
    1f04:	27 fd       	sbrc	r18, 7
    1f06:	27 c0       	rjmp	.+78     	; 0x1f56 <vfprintf+0x106>
    1f08:	30 ed       	ldi	r19, 0xD0	; 208
    1f0a:	38 0f       	add	r19, r24
    1f0c:	3a 30       	cpi	r19, 0x0A	; 10
    1f0e:	78 f4       	brcc	.+30     	; 0x1f2e <vfprintf+0xde>
    1f10:	26 ff       	sbrs	r18, 6
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0xd0>
    1f14:	fa e0       	ldi	r31, 0x0A	; 10
    1f16:	1f 9f       	mul	r17, r31
    1f18:	30 0d       	add	r19, r0
    1f1a:	11 24       	eor	r1, r1
    1f1c:	13 2f       	mov	r17, r19
    1f1e:	13 c0       	rjmp	.+38     	; 0x1f46 <vfprintf+0xf6>
    1f20:	6a e0       	ldi	r22, 0x0A	; 10
    1f22:	56 9e       	mul	r5, r22
    1f24:	30 0d       	add	r19, r0
    1f26:	11 24       	eor	r1, r1
    1f28:	53 2e       	mov	r5, r19
    1f2a:	20 62       	ori	r18, 0x20	; 32
    1f2c:	0c c0       	rjmp	.+24     	; 0x1f46 <vfprintf+0xf6>
    1f2e:	8e 32       	cpi	r24, 0x2E	; 46
    1f30:	21 f4       	brne	.+8      	; 0x1f3a <vfprintf+0xea>
    1f32:	26 fd       	sbrc	r18, 6
    1f34:	f5 c2       	rjmp	.+1514   	; 0x2520 <vfprintf+0x6d0>
    1f36:	20 64       	ori	r18, 0x40	; 64
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <vfprintf+0xf6>
    1f3a:	8c 36       	cpi	r24, 0x6C	; 108
    1f3c:	11 f4       	brne	.+4      	; 0x1f42 <vfprintf+0xf2>
    1f3e:	20 68       	ori	r18, 0x80	; 128
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <vfprintf+0xf6>
    1f42:	88 36       	cpi	r24, 0x68	; 104
    1f44:	41 f4       	brne	.+16     	; 0x1f56 <vfprintf+0x106>
    1f46:	f1 01       	movw	r30, r2
    1f48:	93 fd       	sbrc	r25, 3
    1f4a:	85 91       	lpm	r24, Z+
    1f4c:	93 ff       	sbrs	r25, 3
    1f4e:	81 91       	ld	r24, Z+
    1f50:	1f 01       	movw	r2, r30
    1f52:	81 11       	cpse	r24, r1
    1f54:	c1 cf       	rjmp	.-126    	; 0x1ed8 <vfprintf+0x88>
    1f56:	9b eb       	ldi	r25, 0xBB	; 187
    1f58:	98 0f       	add	r25, r24
    1f5a:	93 30       	cpi	r25, 0x03	; 3
    1f5c:	18 f4       	brcc	.+6      	; 0x1f64 <vfprintf+0x114>
    1f5e:	20 61       	ori	r18, 0x10	; 16
    1f60:	80 5e       	subi	r24, 0xE0	; 224
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <vfprintf+0x120>
    1f64:	9b e9       	ldi	r25, 0x9B	; 155
    1f66:	98 0f       	add	r25, r24
    1f68:	93 30       	cpi	r25, 0x03	; 3
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <vfprintf+0x11e>
    1f6c:	9a c1       	rjmp	.+820    	; 0x22a2 <vfprintf+0x452>
    1f6e:	2f 7e       	andi	r18, 0xEF	; 239
    1f70:	26 ff       	sbrs	r18, 6
    1f72:	16 e0       	ldi	r17, 0x06	; 6
    1f74:	2f 73       	andi	r18, 0x3F	; 63
    1f76:	72 2e       	mov	r7, r18
    1f78:	85 36       	cpi	r24, 0x65	; 101
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <vfprintf+0x134>
    1f7c:	f2 2f       	mov	r31, r18
    1f7e:	f0 64       	ori	r31, 0x40	; 64
    1f80:	7f 2e       	mov	r7, r31
    1f82:	08 c0       	rjmp	.+16     	; 0x1f94 <vfprintf+0x144>
    1f84:	86 36       	cpi	r24, 0x66	; 102
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <vfprintf+0x140>
    1f88:	62 2f       	mov	r22, r18
    1f8a:	60 68       	ori	r22, 0x80	; 128
    1f8c:	76 2e       	mov	r7, r22
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <vfprintf+0x144>
    1f90:	11 11       	cpse	r17, r1
    1f92:	11 50       	subi	r17, 0x01	; 1
    1f94:	77 fe       	sbrs	r7, 7
    1f96:	07 c0       	rjmp	.+14     	; 0x1fa6 <vfprintf+0x156>
    1f98:	1c 33       	cpi	r17, 0x3C	; 60
    1f9a:	48 f4       	brcc	.+18     	; 0x1fae <vfprintf+0x15e>
    1f9c:	44 24       	eor	r4, r4
    1f9e:	43 94       	inc	r4
    1fa0:	41 0e       	add	r4, r17
    1fa2:	27 e0       	ldi	r18, 0x07	; 7
    1fa4:	0b c0       	rjmp	.+22     	; 0x1fbc <vfprintf+0x16c>
    1fa6:	18 30       	cpi	r17, 0x08	; 8
    1fa8:	30 f4       	brcc	.+12     	; 0x1fb6 <vfprintf+0x166>
    1faa:	21 2f       	mov	r18, r17
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0x16a>
    1fae:	27 e0       	ldi	r18, 0x07	; 7
    1fb0:	4c e3       	ldi	r20, 0x3C	; 60
    1fb2:	44 2e       	mov	r4, r20
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <vfprintf+0x16c>
    1fb6:	27 e0       	ldi	r18, 0x07	; 7
    1fb8:	17 e0       	ldi	r17, 0x07	; 7
    1fba:	41 2c       	mov	r4, r1
    1fbc:	56 01       	movw	r10, r12
    1fbe:	74 e0       	ldi	r23, 0x04	; 4
    1fc0:	a7 0e       	add	r10, r23
    1fc2:	b1 1c       	adc	r11, r1
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	04 2d       	mov	r16, r4
    1fd0:	a4 01       	movw	r20, r8
    1fd2:	2d d4       	rcall	.+2138   	; 0x282e <__ftoa_engine>
    1fd4:	6c 01       	movw	r12, r24
    1fd6:	09 81       	ldd	r16, Y+1	; 0x01
    1fd8:	00 ff       	sbrs	r16, 0
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x190>
    1fdc:	03 ff       	sbrs	r16, 3
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <vfprintf+0x19c>
    1fe0:	71 fc       	sbrc	r7, 1
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <vfprintf+0x1a2>
    1fe4:	72 fc       	sbrc	r7, 2
    1fe6:	08 c0       	rjmp	.+16     	; 0x1ff8 <vfprintf+0x1a8>
    1fe8:	61 2c       	mov	r6, r1
    1fea:	08 c0       	rjmp	.+16     	; 0x1ffc <vfprintf+0x1ac>
    1fec:	3d e2       	ldi	r19, 0x2D	; 45
    1fee:	63 2e       	mov	r6, r19
    1ff0:	05 c0       	rjmp	.+10     	; 0x1ffc <vfprintf+0x1ac>
    1ff2:	2b e2       	ldi	r18, 0x2B	; 43
    1ff4:	62 2e       	mov	r6, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <vfprintf+0x1ac>
    1ff8:	90 e2       	ldi	r25, 0x20	; 32
    1ffa:	69 2e       	mov	r6, r25
    1ffc:	80 2f       	mov	r24, r16
    1ffe:	8c 70       	andi	r24, 0x0C	; 12
    2000:	81 f1       	breq	.+96     	; 0x2062 <vfprintf+0x212>
    2002:	66 20       	and	r6, r6
    2004:	11 f0       	breq	.+4      	; 0x200a <vfprintf+0x1ba>
    2006:	84 e0       	ldi	r24, 0x04	; 4
    2008:	01 c0       	rjmp	.+2      	; 0x200c <vfprintf+0x1bc>
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	85 15       	cp	r24, r5
    200e:	10 f0       	brcs	.+4      	; 0x2014 <vfprintf+0x1c4>
    2010:	51 2c       	mov	r5, r1
    2012:	0a c0       	rjmp	.+20     	; 0x2028 <vfprintf+0x1d8>
    2014:	58 1a       	sub	r5, r24
    2016:	73 fc       	sbrc	r7, 3
    2018:	07 c0       	rjmp	.+14     	; 0x2028 <vfprintf+0x1d8>
    201a:	b7 01       	movw	r22, r14
    201c:	80 e2       	ldi	r24, 0x20	; 32
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0b d5       	rcall	.+2582   	; 0x2a38 <fputc>
    2022:	5a 94       	dec	r5
    2024:	d1 f7       	brne	.-12     	; 0x201a <vfprintf+0x1ca>
    2026:	f4 cf       	rjmp	.-24     	; 0x2010 <vfprintf+0x1c0>
    2028:	66 20       	and	r6, r6
    202a:	21 f0       	breq	.+8      	; 0x2034 <vfprintf+0x1e4>
    202c:	b7 01       	movw	r22, r14
    202e:	86 2d       	mov	r24, r6
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 d5       	rcall	.+2564   	; 0x2a38 <fputc>
    2034:	03 fd       	sbrc	r16, 3
    2036:	03 c0       	rjmp	.+6      	; 0x203e <vfprintf+0x1ee>
    2038:	06 e3       	ldi	r16, 0x36	; 54
    203a:	11 e0       	ldi	r17, 0x01	; 1
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <vfprintf+0x1f2>
    203e:	02 e3       	ldi	r16, 0x32	; 50
    2040:	11 e0       	ldi	r17, 0x01	; 1
    2042:	f7 2d       	mov	r31, r7
    2044:	f0 71       	andi	r31, 0x10	; 16
    2046:	7f 2e       	mov	r7, r31
    2048:	f8 01       	movw	r30, r16
    204a:	84 91       	lpm	r24, Z
    204c:	88 23       	and	r24, r24
    204e:	09 f4       	brne	.+2      	; 0x2052 <vfprintf+0x202>
    2050:	5e c2       	rjmp	.+1212   	; 0x250e <vfprintf+0x6be>
    2052:	71 10       	cpse	r7, r1
    2054:	80 52       	subi	r24, 0x20	; 32
    2056:	b7 01       	movw	r22, r14
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	ee d4       	rcall	.+2524   	; 0x2a38 <fputc>
    205c:	0f 5f       	subi	r16, 0xFF	; 255
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	f3 cf       	rjmp	.-26     	; 0x2048 <vfprintf+0x1f8>
    2062:	77 fe       	sbrs	r7, 7
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <vfprintf+0x234>
    2066:	4c 0c       	add	r4, r12
    2068:	04 ff       	sbrs	r16, 4
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <vfprintf+0x224>
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	81 33       	cpi	r24, 0x31	; 49
    2070:	09 f4       	brne	.+2      	; 0x2074 <vfprintf+0x224>
    2072:	4a 94       	dec	r4
    2074:	14 14       	cp	r1, r4
    2076:	74 f5       	brge	.+92     	; 0x20d4 <vfprintf+0x284>
    2078:	f8 e0       	ldi	r31, 0x08	; 8
    207a:	f4 15       	cp	r31, r4
    207c:	78 f5       	brcc	.+94     	; 0x20dc <vfprintf+0x28c>
    207e:	88 e0       	ldi	r24, 0x08	; 8
    2080:	48 2e       	mov	r4, r24
    2082:	2c c0       	rjmp	.+88     	; 0x20dc <vfprintf+0x28c>
    2084:	76 fc       	sbrc	r7, 6
    2086:	2a c0       	rjmp	.+84     	; 0x20dc <vfprintf+0x28c>
    2088:	81 2f       	mov	r24, r17
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	8c 15       	cp	r24, r12
    208e:	9d 05       	cpc	r25, r13
    2090:	9c f0       	brlt	.+38     	; 0x20b8 <vfprintf+0x268>
    2092:	6c ef       	ldi	r22, 0xFC	; 252
    2094:	c6 16       	cp	r12, r22
    2096:	6f ef       	ldi	r22, 0xFF	; 255
    2098:	d6 06       	cpc	r13, r22
    209a:	74 f0       	brlt	.+28     	; 0x20b8 <vfprintf+0x268>
    209c:	77 2d       	mov	r23, r7
    209e:	70 68       	ori	r23, 0x80	; 128
    20a0:	77 2e       	mov	r7, r23
    20a2:	0a c0       	rjmp	.+20     	; 0x20b8 <vfprintf+0x268>
    20a4:	e2 e0       	ldi	r30, 0x02	; 2
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	ec 0f       	add	r30, r28
    20aa:	fd 1f       	adc	r31, r29
    20ac:	e1 0f       	add	r30, r17
    20ae:	f1 1d       	adc	r31, r1
    20b0:	80 81       	ld	r24, Z
    20b2:	80 33       	cpi	r24, 0x30	; 48
    20b4:	19 f4       	brne	.+6      	; 0x20bc <vfprintf+0x26c>
    20b6:	11 50       	subi	r17, 0x01	; 1
    20b8:	11 11       	cpse	r17, r1
    20ba:	f4 cf       	rjmp	.-24     	; 0x20a4 <vfprintf+0x254>
    20bc:	77 fe       	sbrs	r7, 7
    20be:	0e c0       	rjmp	.+28     	; 0x20dc <vfprintf+0x28c>
    20c0:	44 24       	eor	r4, r4
    20c2:	43 94       	inc	r4
    20c4:	41 0e       	add	r4, r17
    20c6:	81 2f       	mov	r24, r17
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	c8 16       	cp	r12, r24
    20cc:	d9 06       	cpc	r13, r25
    20ce:	2c f4       	brge	.+10     	; 0x20da <vfprintf+0x28a>
    20d0:	1c 19       	sub	r17, r12
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <vfprintf+0x28c>
    20d4:	44 24       	eor	r4, r4
    20d6:	43 94       	inc	r4
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <vfprintf+0x28c>
    20da:	10 e0       	ldi	r17, 0x00	; 0
    20dc:	77 fe       	sbrs	r7, 7
    20de:	07 c0       	rjmp	.+14     	; 0x20ee <vfprintf+0x29e>
    20e0:	1c 14       	cp	r1, r12
    20e2:	1d 04       	cpc	r1, r13
    20e4:	3c f4       	brge	.+14     	; 0x20f4 <vfprintf+0x2a4>
    20e6:	96 01       	movw	r18, r12
    20e8:	2f 5f       	subi	r18, 0xFF	; 255
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	05 c0       	rjmp	.+10     	; 0x20f8 <vfprintf+0x2a8>
    20ee:	25 e0       	ldi	r18, 0x05	; 5
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x2a8>
    20f4:	21 e0       	ldi	r18, 0x01	; 1
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	66 20       	and	r6, r6
    20fa:	11 f0       	breq	.+4      	; 0x2100 <vfprintf+0x2b0>
    20fc:	2f 5f       	subi	r18, 0xFF	; 255
    20fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2100:	11 23       	and	r17, r17
    2102:	31 f0       	breq	.+12     	; 0x2110 <vfprintf+0x2c0>
    2104:	41 2f       	mov	r20, r17
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	4f 5f       	subi	r20, 0xFF	; 255
    210a:	5f 4f       	sbci	r21, 0xFF	; 255
    210c:	24 0f       	add	r18, r20
    210e:	35 1f       	adc	r19, r21
    2110:	45 2d       	mov	r20, r5
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	24 17       	cp	r18, r20
    2116:	35 07       	cpc	r19, r21
    2118:	14 f4       	brge	.+4      	; 0x211e <vfprintf+0x2ce>
    211a:	52 1a       	sub	r5, r18
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <vfprintf+0x2d0>
    211e:	51 2c       	mov	r5, r1
    2120:	87 2d       	mov	r24, r7
    2122:	89 70       	andi	r24, 0x09	; 9
    2124:	41 f4       	brne	.+16     	; 0x2136 <vfprintf+0x2e6>
    2126:	55 20       	and	r5, r5
    2128:	31 f0       	breq	.+12     	; 0x2136 <vfprintf+0x2e6>
    212a:	b7 01       	movw	r22, r14
    212c:	80 e2       	ldi	r24, 0x20	; 32
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	83 d4       	rcall	.+2310   	; 0x2a38 <fputc>
    2132:	5a 94       	dec	r5
    2134:	f8 cf       	rjmp	.-16     	; 0x2126 <vfprintf+0x2d6>
    2136:	66 20       	and	r6, r6
    2138:	21 f0       	breq	.+8      	; 0x2142 <vfprintf+0x2f2>
    213a:	b7 01       	movw	r22, r14
    213c:	86 2d       	mov	r24, r6
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	7b d4       	rcall	.+2294   	; 0x2a38 <fputc>
    2142:	73 fc       	sbrc	r7, 3
    2144:	08 c0       	rjmp	.+16     	; 0x2156 <vfprintf+0x306>
    2146:	55 20       	and	r5, r5
    2148:	31 f0       	breq	.+12     	; 0x2156 <vfprintf+0x306>
    214a:	b7 01       	movw	r22, r14
    214c:	80 e3       	ldi	r24, 0x30	; 48
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	73 d4       	rcall	.+2278   	; 0x2a38 <fputc>
    2152:	5a 94       	dec	r5
    2154:	f8 cf       	rjmp	.-16     	; 0x2146 <vfprintf+0x2f6>
    2156:	77 fe       	sbrs	r7, 7
    2158:	5d c0       	rjmp	.+186    	; 0x2214 <vfprintf+0x3c4>
    215a:	9c 2d       	mov	r25, r12
    215c:	8d 2d       	mov	r24, r13
    215e:	d7 fe       	sbrs	r13, 7
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <vfprintf+0x316>
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	69 2e       	mov	r6, r25
    2168:	78 2e       	mov	r7, r24
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	50 e0       	ldi	r21, 0x00	; 0
    216e:	c6 01       	movw	r24, r12
    2170:	84 19       	sub	r24, r4
    2172:	91 09       	sbc	r25, r1
    2174:	9d 87       	std	Y+13, r25	; 0x0d
    2176:	8c 87       	std	Y+12, r24	; 0x0c
    2178:	96 01       	movw	r18, r12
    217a:	26 19       	sub	r18, r6
    217c:	37 09       	sbc	r19, r7
    217e:	28 0d       	add	r18, r8
    2180:	39 1d       	adc	r19, r9
    2182:	81 2f       	mov	r24, r17
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	ee 27       	eor	r30, r30
    2188:	ff 27       	eor	r31, r31
    218a:	e8 1b       	sub	r30, r24
    218c:	f9 0b       	sbc	r31, r25
    218e:	ff 87       	std	Y+15, r31	; 0x0f
    2190:	ee 87       	std	Y+14, r30	; 0x0e
    2192:	ff ef       	ldi	r31, 0xFF	; 255
    2194:	6f 16       	cp	r6, r31
    2196:	7f 06       	cpc	r7, r31
    2198:	61 f4       	brne	.+24     	; 0x21b2 <vfprintf+0x362>
    219a:	b7 01       	movw	r22, r14
    219c:	8e e2       	ldi	r24, 0x2E	; 46
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	2b 8b       	std	Y+19, r18	; 0x13
    21a2:	3a 8b       	std	Y+18, r19	; 0x12
    21a4:	48 8b       	std	Y+16, r20	; 0x10
    21a6:	59 8b       	std	Y+17, r21	; 0x11
    21a8:	47 d4       	rcall	.+2190   	; 0x2a38 <fputc>
    21aa:	59 89       	ldd	r21, Y+17	; 0x11
    21ac:	48 89       	ldd	r20, Y+16	; 0x10
    21ae:	3a 89       	ldd	r19, Y+18	; 0x12
    21b0:	2b 89       	ldd	r18, Y+19	; 0x13
    21b2:	c6 14       	cp	r12, r6
    21b4:	d7 04       	cpc	r13, r7
    21b6:	54 f0       	brlt	.+20     	; 0x21cc <vfprintf+0x37c>
    21b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    21bc:	66 15       	cp	r22, r6
    21be:	77 05       	cpc	r23, r7
    21c0:	2c f4       	brge	.+10     	; 0x21cc <vfprintf+0x37c>
    21c2:	f9 01       	movw	r30, r18
    21c4:	e4 0f       	add	r30, r20
    21c6:	f5 1f       	adc	r31, r21
    21c8:	81 81       	ldd	r24, Z+1	; 0x01
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <vfprintf+0x37e>
    21cc:	80 e3       	ldi	r24, 0x30	; 48
    21ce:	71 e0       	ldi	r23, 0x01	; 1
    21d0:	67 1a       	sub	r6, r23
    21d2:	71 08       	sbc	r7, r1
    21d4:	4f 5f       	subi	r20, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    21da:	ff 85       	ldd	r31, Y+15	; 0x0f
    21dc:	6e 16       	cp	r6, r30
    21de:	7f 06       	cpc	r7, r31
    21e0:	64 f0       	brlt	.+24     	; 0x21fa <vfprintf+0x3aa>
    21e2:	b7 01       	movw	r22, r14
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	2b 8b       	std	Y+19, r18	; 0x13
    21e8:	3a 8b       	std	Y+18, r19	; 0x12
    21ea:	48 8b       	std	Y+16, r20	; 0x10
    21ec:	59 8b       	std	Y+17, r21	; 0x11
    21ee:	24 d4       	rcall	.+2120   	; 0x2a38 <fputc>
    21f0:	2b 89       	ldd	r18, Y+19	; 0x13
    21f2:	3a 89       	ldd	r19, Y+18	; 0x12
    21f4:	48 89       	ldd	r20, Y+16	; 0x10
    21f6:	59 89       	ldd	r21, Y+17	; 0x11
    21f8:	cc cf       	rjmp	.-104    	; 0x2192 <vfprintf+0x342>
    21fa:	6c 14       	cp	r6, r12
    21fc:	7d 04       	cpc	r7, r13
    21fe:	39 f4       	brne	.+14     	; 0x220e <vfprintf+0x3be>
    2200:	9a 81       	ldd	r25, Y+2	; 0x02
    2202:	96 33       	cpi	r25, 0x36	; 54
    2204:	18 f4       	brcc	.+6      	; 0x220c <vfprintf+0x3bc>
    2206:	95 33       	cpi	r25, 0x35	; 53
    2208:	11 f4       	brne	.+4      	; 0x220e <vfprintf+0x3be>
    220a:	04 ff       	sbrs	r16, 4
    220c:	81 e3       	ldi	r24, 0x31	; 49
    220e:	b7 01       	movw	r22, r14
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	45 c0       	rjmp	.+138    	; 0x229e <vfprintf+0x44e>
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	81 33       	cpi	r24, 0x31	; 49
    2218:	09 f0       	breq	.+2      	; 0x221c <vfprintf+0x3cc>
    221a:	0f 7e       	andi	r16, 0xEF	; 239
    221c:	b7 01       	movw	r22, r14
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0b d4       	rcall	.+2070   	; 0x2a38 <fputc>
    2222:	11 11       	cpse	r17, r1
    2224:	05 c0       	rjmp	.+10     	; 0x2230 <vfprintf+0x3e0>
    2226:	74 fe       	sbrs	r7, 4
    2228:	16 c0       	rjmp	.+44     	; 0x2256 <vfprintf+0x406>
    222a:	85 e4       	ldi	r24, 0x45	; 69
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	15 c0       	rjmp	.+42     	; 0x225a <vfprintf+0x40a>
    2230:	b7 01       	movw	r22, r14
    2232:	8e e2       	ldi	r24, 0x2E	; 46
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	00 d4       	rcall	.+2048   	; 0x2a38 <fputc>
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	66 24       	eor	r6, r6
    223c:	63 94       	inc	r6
    223e:	68 0e       	add	r6, r24
    2240:	f4 01       	movw	r30, r8
    2242:	e8 0f       	add	r30, r24
    2244:	f1 1d       	adc	r31, r1
    2246:	80 81       	ld	r24, Z
    2248:	b7 01       	movw	r22, r14
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	f5 d3       	rcall	.+2026   	; 0x2a38 <fputc>
    224e:	11 50       	subi	r17, 0x01	; 1
    2250:	51 f3       	breq	.-44     	; 0x2226 <vfprintf+0x3d6>
    2252:	86 2d       	mov	r24, r6
    2254:	f2 cf       	rjmp	.-28     	; 0x223a <vfprintf+0x3ea>
    2256:	85 e6       	ldi	r24, 0x65	; 101
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	b7 01       	movw	r22, r14
    225c:	ed d3       	rcall	.+2010   	; 0x2a38 <fputc>
    225e:	d7 fc       	sbrc	r13, 7
    2260:	05 c0       	rjmp	.+10     	; 0x226c <vfprintf+0x41c>
    2262:	c1 14       	cp	r12, r1
    2264:	d1 04       	cpc	r13, r1
    2266:	39 f4       	brne	.+14     	; 0x2276 <vfprintf+0x426>
    2268:	04 ff       	sbrs	r16, 4
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <vfprintf+0x426>
    226c:	d1 94       	neg	r13
    226e:	c1 94       	neg	r12
    2270:	d1 08       	sbc	r13, r1
    2272:	8d e2       	ldi	r24, 0x2D	; 45
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <vfprintf+0x428>
    2276:	8b e2       	ldi	r24, 0x2B	; 43
    2278:	b7 01       	movw	r22, r14
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	dd d3       	rcall	.+1978   	; 0x2a38 <fputc>
    227e:	80 e3       	ldi	r24, 0x30	; 48
    2280:	6a e0       	ldi	r22, 0x0A	; 10
    2282:	c6 16       	cp	r12, r22
    2284:	d1 04       	cpc	r13, r1
    2286:	2c f0       	brlt	.+10     	; 0x2292 <vfprintf+0x442>
    2288:	8f 5f       	subi	r24, 0xFF	; 255
    228a:	fa e0       	ldi	r31, 0x0A	; 10
    228c:	cf 1a       	sub	r12, r31
    228e:	d1 08       	sbc	r13, r1
    2290:	f7 cf       	rjmp	.-18     	; 0x2280 <vfprintf+0x430>
    2292:	b7 01       	movw	r22, r14
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	d0 d3       	rcall	.+1952   	; 0x2a38 <fputc>
    2298:	b7 01       	movw	r22, r14
    229a:	c6 01       	movw	r24, r12
    229c:	c0 96       	adiw	r24, 0x30	; 48
    229e:	cc d3       	rcall	.+1944   	; 0x2a38 <fputc>
    22a0:	36 c1       	rjmp	.+620    	; 0x250e <vfprintf+0x6be>
    22a2:	83 36       	cpi	r24, 0x63	; 99
    22a4:	31 f0       	breq	.+12     	; 0x22b2 <vfprintf+0x462>
    22a6:	83 37       	cpi	r24, 0x73	; 115
    22a8:	79 f0       	breq	.+30     	; 0x22c8 <vfprintf+0x478>
    22aa:	83 35       	cpi	r24, 0x53	; 83
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <vfprintf+0x460>
    22ae:	54 c0       	rjmp	.+168    	; 0x2358 <vfprintf+0x508>
    22b0:	20 c0       	rjmp	.+64     	; 0x22f2 <vfprintf+0x4a2>
    22b2:	56 01       	movw	r10, r12
    22b4:	72 e0       	ldi	r23, 0x02	; 2
    22b6:	a7 0e       	add	r10, r23
    22b8:	b1 1c       	adc	r11, r1
    22ba:	f6 01       	movw	r30, r12
    22bc:	80 81       	ld	r24, Z
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	01 e0       	ldi	r16, 0x01	; 1
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	64 01       	movw	r12, r8
    22c6:	13 c0       	rjmp	.+38     	; 0x22ee <vfprintf+0x49e>
    22c8:	56 01       	movw	r10, r12
    22ca:	f2 e0       	ldi	r31, 0x02	; 2
    22cc:	af 0e       	add	r10, r31
    22ce:	b1 1c       	adc	r11, r1
    22d0:	f6 01       	movw	r30, r12
    22d2:	c0 80       	ld	r12, Z
    22d4:	d1 80       	ldd	r13, Z+1	; 0x01
    22d6:	26 ff       	sbrs	r18, 6
    22d8:	03 c0       	rjmp	.+6      	; 0x22e0 <vfprintf+0x490>
    22da:	61 2f       	mov	r22, r17
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	02 c0       	rjmp	.+4      	; 0x22e4 <vfprintf+0x494>
    22e0:	6f ef       	ldi	r22, 0xFF	; 255
    22e2:	7f ef       	ldi	r23, 0xFF	; 255
    22e4:	c6 01       	movw	r24, r12
    22e6:	2b 8b       	std	Y+19, r18	; 0x13
    22e8:	9c d3       	rcall	.+1848   	; 0x2a22 <strnlen>
    22ea:	8c 01       	movw	r16, r24
    22ec:	2b 89       	ldd	r18, Y+19	; 0x13
    22ee:	2f 77       	andi	r18, 0x7F	; 127
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <vfprintf+0x4ca>
    22f2:	56 01       	movw	r10, r12
    22f4:	f2 e0       	ldi	r31, 0x02	; 2
    22f6:	af 0e       	add	r10, r31
    22f8:	b1 1c       	adc	r11, r1
    22fa:	f6 01       	movw	r30, r12
    22fc:	c0 80       	ld	r12, Z
    22fe:	d1 80       	ldd	r13, Z+1	; 0x01
    2300:	26 ff       	sbrs	r18, 6
    2302:	03 c0       	rjmp	.+6      	; 0x230a <vfprintf+0x4ba>
    2304:	61 2f       	mov	r22, r17
    2306:	70 e0       	ldi	r23, 0x00	; 0
    2308:	02 c0       	rjmp	.+4      	; 0x230e <vfprintf+0x4be>
    230a:	6f ef       	ldi	r22, 0xFF	; 255
    230c:	7f ef       	ldi	r23, 0xFF	; 255
    230e:	c6 01       	movw	r24, r12
    2310:	2b 8b       	std	Y+19, r18	; 0x13
    2312:	65 d3       	rcall	.+1738   	; 0x29de <strnlen_P>
    2314:	8c 01       	movw	r16, r24
    2316:	2b 89       	ldd	r18, Y+19	; 0x13
    2318:	20 68       	ori	r18, 0x80	; 128
    231a:	72 2e       	mov	r7, r18
    231c:	23 fd       	sbrc	r18, 3
    231e:	18 c0       	rjmp	.+48     	; 0x2350 <vfprintf+0x500>
    2320:	85 2d       	mov	r24, r5
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	08 17       	cp	r16, r24
    2326:	19 07       	cpc	r17, r25
    2328:	98 f4       	brcc	.+38     	; 0x2350 <vfprintf+0x500>
    232a:	b7 01       	movw	r22, r14
    232c:	80 e2       	ldi	r24, 0x20	; 32
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	83 d3       	rcall	.+1798   	; 0x2a38 <fputc>
    2332:	5a 94       	dec	r5
    2334:	f5 cf       	rjmp	.-22     	; 0x2320 <vfprintf+0x4d0>
    2336:	f6 01       	movw	r30, r12
    2338:	77 fc       	sbrc	r7, 7
    233a:	85 91       	lpm	r24, Z+
    233c:	77 fe       	sbrs	r7, 7
    233e:	81 91       	ld	r24, Z+
    2340:	6f 01       	movw	r12, r30
    2342:	b7 01       	movw	r22, r14
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	78 d3       	rcall	.+1776   	; 0x2a38 <fputc>
    2348:	51 10       	cpse	r5, r1
    234a:	5a 94       	dec	r5
    234c:	01 50       	subi	r16, 0x01	; 1
    234e:	11 09       	sbc	r17, r1
    2350:	01 15       	cp	r16, r1
    2352:	11 05       	cpc	r17, r1
    2354:	81 f7       	brne	.-32     	; 0x2336 <vfprintf+0x4e6>
    2356:	db c0       	rjmp	.+438    	; 0x250e <vfprintf+0x6be>
    2358:	84 36       	cpi	r24, 0x64	; 100
    235a:	11 f0       	breq	.+4      	; 0x2360 <vfprintf+0x510>
    235c:	89 36       	cpi	r24, 0x69	; 105
    235e:	49 f5       	brne	.+82     	; 0x23b2 <vfprintf+0x562>
    2360:	56 01       	movw	r10, r12
    2362:	27 ff       	sbrs	r18, 7
    2364:	09 c0       	rjmp	.+18     	; 0x2378 <vfprintf+0x528>
    2366:	f4 e0       	ldi	r31, 0x04	; 4
    2368:	af 0e       	add	r10, r31
    236a:	b1 1c       	adc	r11, r1
    236c:	f6 01       	movw	r30, r12
    236e:	60 81       	ld	r22, Z
    2370:	71 81       	ldd	r23, Z+1	; 0x01
    2372:	82 81       	ldd	r24, Z+2	; 0x02
    2374:	93 81       	ldd	r25, Z+3	; 0x03
    2376:	0a c0       	rjmp	.+20     	; 0x238c <vfprintf+0x53c>
    2378:	f2 e0       	ldi	r31, 0x02	; 2
    237a:	af 0e       	add	r10, r31
    237c:	b1 1c       	adc	r11, r1
    237e:	f6 01       	movw	r30, r12
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	88 27       	eor	r24, r24
    2386:	77 fd       	sbrc	r23, 7
    2388:	80 95       	com	r24
    238a:	98 2f       	mov	r25, r24
    238c:	02 2f       	mov	r16, r18
    238e:	0f 76       	andi	r16, 0x6F	; 111
    2390:	97 ff       	sbrs	r25, 7
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <vfprintf+0x554>
    2394:	90 95       	com	r25
    2396:	80 95       	com	r24
    2398:	70 95       	com	r23
    239a:	61 95       	neg	r22
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	00 68       	ori	r16, 0x80	; 128
    23a4:	2a e0       	ldi	r18, 0x0A	; 10
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	a4 01       	movw	r20, r8
    23aa:	de d3       	rcall	.+1980   	; 0x2b68 <__ultoa_invert>
    23ac:	c8 2e       	mov	r12, r24
    23ae:	c8 18       	sub	r12, r8
    23b0:	3d c0       	rjmp	.+122    	; 0x242c <vfprintf+0x5dc>
    23b2:	02 2f       	mov	r16, r18
    23b4:	85 37       	cpi	r24, 0x75	; 117
    23b6:	21 f4       	brne	.+8      	; 0x23c0 <vfprintf+0x570>
    23b8:	0f 7e       	andi	r16, 0xEF	; 239
    23ba:	2a e0       	ldi	r18, 0x0A	; 10
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	1d c0       	rjmp	.+58     	; 0x23fa <vfprintf+0x5aa>
    23c0:	09 7f       	andi	r16, 0xF9	; 249
    23c2:	8f 36       	cpi	r24, 0x6F	; 111
    23c4:	91 f0       	breq	.+36     	; 0x23ea <vfprintf+0x59a>
    23c6:	18 f4       	brcc	.+6      	; 0x23ce <vfprintf+0x57e>
    23c8:	88 35       	cpi	r24, 0x58	; 88
    23ca:	59 f0       	breq	.+22     	; 0x23e2 <vfprintf+0x592>
    23cc:	a9 c0       	rjmp	.+338    	; 0x2520 <vfprintf+0x6d0>
    23ce:	80 37       	cpi	r24, 0x70	; 112
    23d0:	19 f0       	breq	.+6      	; 0x23d8 <vfprintf+0x588>
    23d2:	88 37       	cpi	r24, 0x78	; 120
    23d4:	11 f0       	breq	.+4      	; 0x23da <vfprintf+0x58a>
    23d6:	a4 c0       	rjmp	.+328    	; 0x2520 <vfprintf+0x6d0>
    23d8:	00 61       	ori	r16, 0x10	; 16
    23da:	04 ff       	sbrs	r16, 4
    23dc:	09 c0       	rjmp	.+18     	; 0x23f0 <vfprintf+0x5a0>
    23de:	04 60       	ori	r16, 0x04	; 4
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <vfprintf+0x5a0>
    23e2:	24 ff       	sbrs	r18, 4
    23e4:	08 c0       	rjmp	.+16     	; 0x23f6 <vfprintf+0x5a6>
    23e6:	06 60       	ori	r16, 0x06	; 6
    23e8:	06 c0       	rjmp	.+12     	; 0x23f6 <vfprintf+0x5a6>
    23ea:	28 e0       	ldi	r18, 0x08	; 8
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	05 c0       	rjmp	.+10     	; 0x23fa <vfprintf+0x5aa>
    23f0:	20 e1       	ldi	r18, 0x10	; 16
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <vfprintf+0x5aa>
    23f6:	20 e1       	ldi	r18, 0x10	; 16
    23f8:	32 e0       	ldi	r19, 0x02	; 2
    23fa:	56 01       	movw	r10, r12
    23fc:	07 ff       	sbrs	r16, 7
    23fe:	09 c0       	rjmp	.+18     	; 0x2412 <vfprintf+0x5c2>
    2400:	f4 e0       	ldi	r31, 0x04	; 4
    2402:	af 0e       	add	r10, r31
    2404:	b1 1c       	adc	r11, r1
    2406:	f6 01       	movw	r30, r12
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	08 c0       	rjmp	.+16     	; 0x2422 <vfprintf+0x5d2>
    2412:	f2 e0       	ldi	r31, 0x02	; 2
    2414:	af 0e       	add	r10, r31
    2416:	b1 1c       	adc	r11, r1
    2418:	f6 01       	movw	r30, r12
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	a4 01       	movw	r20, r8
    2424:	a1 d3       	rcall	.+1858   	; 0x2b68 <__ultoa_invert>
    2426:	c8 2e       	mov	r12, r24
    2428:	c8 18       	sub	r12, r8
    242a:	0f 77       	andi	r16, 0x7F	; 127
    242c:	06 ff       	sbrs	r16, 6
    242e:	0b c0       	rjmp	.+22     	; 0x2446 <vfprintf+0x5f6>
    2430:	20 2f       	mov	r18, r16
    2432:	2e 7f       	andi	r18, 0xFE	; 254
    2434:	c1 16       	cp	r12, r17
    2436:	50 f4       	brcc	.+20     	; 0x244c <vfprintf+0x5fc>
    2438:	04 ff       	sbrs	r16, 4
    243a:	0a c0       	rjmp	.+20     	; 0x2450 <vfprintf+0x600>
    243c:	02 fd       	sbrc	r16, 2
    243e:	08 c0       	rjmp	.+16     	; 0x2450 <vfprintf+0x600>
    2440:	20 2f       	mov	r18, r16
    2442:	2e 7e       	andi	r18, 0xEE	; 238
    2444:	05 c0       	rjmp	.+10     	; 0x2450 <vfprintf+0x600>
    2446:	dc 2c       	mov	r13, r12
    2448:	20 2f       	mov	r18, r16
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <vfprintf+0x602>
    244c:	dc 2c       	mov	r13, r12
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <vfprintf+0x602>
    2450:	d1 2e       	mov	r13, r17
    2452:	24 ff       	sbrs	r18, 4
    2454:	0d c0       	rjmp	.+26     	; 0x2470 <vfprintf+0x620>
    2456:	fe 01       	movw	r30, r28
    2458:	ec 0d       	add	r30, r12
    245a:	f1 1d       	adc	r31, r1
    245c:	80 81       	ld	r24, Z
    245e:	80 33       	cpi	r24, 0x30	; 48
    2460:	11 f4       	brne	.+4      	; 0x2466 <vfprintf+0x616>
    2462:	29 7e       	andi	r18, 0xE9	; 233
    2464:	09 c0       	rjmp	.+18     	; 0x2478 <vfprintf+0x628>
    2466:	22 ff       	sbrs	r18, 2
    2468:	06 c0       	rjmp	.+12     	; 0x2476 <vfprintf+0x626>
    246a:	d3 94       	inc	r13
    246c:	d3 94       	inc	r13
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <vfprintf+0x628>
    2470:	82 2f       	mov	r24, r18
    2472:	86 78       	andi	r24, 0x86	; 134
    2474:	09 f0       	breq	.+2      	; 0x2478 <vfprintf+0x628>
    2476:	d3 94       	inc	r13
    2478:	23 fd       	sbrc	r18, 3
    247a:	12 c0       	rjmp	.+36     	; 0x24a0 <vfprintf+0x650>
    247c:	20 ff       	sbrs	r18, 0
    247e:	06 c0       	rjmp	.+12     	; 0x248c <vfprintf+0x63c>
    2480:	1c 2d       	mov	r17, r12
    2482:	d5 14       	cp	r13, r5
    2484:	18 f4       	brcc	.+6      	; 0x248c <vfprintf+0x63c>
    2486:	15 0d       	add	r17, r5
    2488:	1d 19       	sub	r17, r13
    248a:	d5 2c       	mov	r13, r5
    248c:	d5 14       	cp	r13, r5
    248e:	60 f4       	brcc	.+24     	; 0x24a8 <vfprintf+0x658>
    2490:	b7 01       	movw	r22, r14
    2492:	80 e2       	ldi	r24, 0x20	; 32
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	2b 8b       	std	Y+19, r18	; 0x13
    2498:	cf d2       	rcall	.+1438   	; 0x2a38 <fputc>
    249a:	d3 94       	inc	r13
    249c:	2b 89       	ldd	r18, Y+19	; 0x13
    249e:	f6 cf       	rjmp	.-20     	; 0x248c <vfprintf+0x63c>
    24a0:	d5 14       	cp	r13, r5
    24a2:	10 f4       	brcc	.+4      	; 0x24a8 <vfprintf+0x658>
    24a4:	5d 18       	sub	r5, r13
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <vfprintf+0x65a>
    24a8:	51 2c       	mov	r5, r1
    24aa:	24 ff       	sbrs	r18, 4
    24ac:	11 c0       	rjmp	.+34     	; 0x24d0 <vfprintf+0x680>
    24ae:	b7 01       	movw	r22, r14
    24b0:	80 e3       	ldi	r24, 0x30	; 48
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	2b 8b       	std	Y+19, r18	; 0x13
    24b6:	c0 d2       	rcall	.+1408   	; 0x2a38 <fputc>
    24b8:	2b 89       	ldd	r18, Y+19	; 0x13
    24ba:	22 ff       	sbrs	r18, 2
    24bc:	16 c0       	rjmp	.+44     	; 0x24ea <vfprintf+0x69a>
    24be:	21 ff       	sbrs	r18, 1
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <vfprintf+0x678>
    24c2:	88 e5       	ldi	r24, 0x58	; 88
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	02 c0       	rjmp	.+4      	; 0x24cc <vfprintf+0x67c>
    24c8:	88 e7       	ldi	r24, 0x78	; 120
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	b7 01       	movw	r22, r14
    24ce:	0c c0       	rjmp	.+24     	; 0x24e8 <vfprintf+0x698>
    24d0:	82 2f       	mov	r24, r18
    24d2:	86 78       	andi	r24, 0x86	; 134
    24d4:	51 f0       	breq	.+20     	; 0x24ea <vfprintf+0x69a>
    24d6:	21 fd       	sbrc	r18, 1
    24d8:	02 c0       	rjmp	.+4      	; 0x24de <vfprintf+0x68e>
    24da:	80 e2       	ldi	r24, 0x20	; 32
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <vfprintf+0x690>
    24de:	8b e2       	ldi	r24, 0x2B	; 43
    24e0:	27 fd       	sbrc	r18, 7
    24e2:	8d e2       	ldi	r24, 0x2D	; 45
    24e4:	b7 01       	movw	r22, r14
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a7 d2       	rcall	.+1358   	; 0x2a38 <fputc>
    24ea:	c1 16       	cp	r12, r17
    24ec:	30 f4       	brcc	.+12     	; 0x24fa <vfprintf+0x6aa>
    24ee:	b7 01       	movw	r22, r14
    24f0:	80 e3       	ldi	r24, 0x30	; 48
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a1 d2       	rcall	.+1346   	; 0x2a38 <fputc>
    24f6:	11 50       	subi	r17, 0x01	; 1
    24f8:	f8 cf       	rjmp	.-16     	; 0x24ea <vfprintf+0x69a>
    24fa:	ca 94       	dec	r12
    24fc:	f4 01       	movw	r30, r8
    24fe:	ec 0d       	add	r30, r12
    2500:	f1 1d       	adc	r31, r1
    2502:	80 81       	ld	r24, Z
    2504:	b7 01       	movw	r22, r14
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	97 d2       	rcall	.+1326   	; 0x2a38 <fputc>
    250a:	c1 10       	cpse	r12, r1
    250c:	f6 cf       	rjmp	.-20     	; 0x24fa <vfprintf+0x6aa>
    250e:	55 20       	and	r5, r5
    2510:	09 f4       	brne	.+2      	; 0x2514 <vfprintf+0x6c4>
    2512:	dd cc       	rjmp	.-1606   	; 0x1ece <vfprintf+0x7e>
    2514:	b7 01       	movw	r22, r14
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	8e d2       	rcall	.+1308   	; 0x2a38 <fputc>
    251c:	5a 94       	dec	r5
    251e:	f7 cf       	rjmp	.-18     	; 0x250e <vfprintf+0x6be>
    2520:	f7 01       	movw	r30, r14
    2522:	86 81       	ldd	r24, Z+6	; 0x06
    2524:	97 81       	ldd	r25, Z+7	; 0x07
    2526:	02 c0       	rjmp	.+4      	; 0x252c <vfprintf+0x6dc>
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	9f ef       	ldi	r25, 0xFF	; 255
    252c:	63 96       	adiw	r28, 0x13	; 19
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	cf 90       	pop	r12
    2548:	bf 90       	pop	r11
    254a:	af 90       	pop	r10
    254c:	9f 90       	pop	r9
    254e:	8f 90       	pop	r8
    2550:	7f 90       	pop	r7
    2552:	6f 90       	pop	r6
    2554:	5f 90       	pop	r5
    2556:	4f 90       	pop	r4
    2558:	3f 90       	pop	r3
    255a:	2f 90       	pop	r2
    255c:	08 95       	ret

0000255e <__divmodhi4>:
    255e:	97 fb       	bst	r25, 7
    2560:	07 2e       	mov	r0, r23
    2562:	16 f4       	brtc	.+4      	; 0x2568 <__divmodhi4+0xa>
    2564:	00 94       	com	r0
    2566:	06 d0       	rcall	.+12     	; 0x2574 <__divmodhi4_neg1>
    2568:	77 fd       	sbrc	r23, 7
    256a:	08 d0       	rcall	.+16     	; 0x257c <__divmodhi4_neg2>
    256c:	0b d0       	rcall	.+22     	; 0x2584 <__udivmodhi4>
    256e:	07 fc       	sbrc	r0, 7
    2570:	05 d0       	rcall	.+10     	; 0x257c <__divmodhi4_neg2>
    2572:	3e f4       	brtc	.+14     	; 0x2582 <__divmodhi4_exit>

00002574 <__divmodhi4_neg1>:
    2574:	90 95       	com	r25
    2576:	81 95       	neg	r24
    2578:	9f 4f       	sbci	r25, 0xFF	; 255
    257a:	08 95       	ret

0000257c <__divmodhi4_neg2>:
    257c:	70 95       	com	r23
    257e:	61 95       	neg	r22
    2580:	7f 4f       	sbci	r23, 0xFF	; 255

00002582 <__divmodhi4_exit>:
    2582:	08 95       	ret

00002584 <__udivmodhi4>:
    2584:	aa 1b       	sub	r26, r26
    2586:	bb 1b       	sub	r27, r27
    2588:	51 e1       	ldi	r21, 0x11	; 17
    258a:	07 c0       	rjmp	.+14     	; 0x259a <__udivmodhi4_ep>

0000258c <__udivmodhi4_loop>:
    258c:	aa 1f       	adc	r26, r26
    258e:	bb 1f       	adc	r27, r27
    2590:	a6 17       	cp	r26, r22
    2592:	b7 07       	cpc	r27, r23
    2594:	10 f0       	brcs	.+4      	; 0x259a <__udivmodhi4_ep>
    2596:	a6 1b       	sub	r26, r22
    2598:	b7 0b       	sbc	r27, r23

0000259a <__udivmodhi4_ep>:
    259a:	88 1f       	adc	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	5a 95       	dec	r21
    25a0:	a9 f7       	brne	.-22     	; 0x258c <__udivmodhi4_loop>
    25a2:	80 95       	com	r24
    25a4:	90 95       	com	r25
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	08 95       	ret

000025ac <calloc>:
    25ac:	0f 93       	push	r16
    25ae:	1f 93       	push	r17
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	86 9f       	mul	r24, r22
    25b6:	80 01       	movw	r16, r0
    25b8:	87 9f       	mul	r24, r23
    25ba:	10 0d       	add	r17, r0
    25bc:	96 9f       	mul	r25, r22
    25be:	10 0d       	add	r17, r0
    25c0:	11 24       	eor	r1, r1
    25c2:	c8 01       	movw	r24, r16
    25c4:	0d d0       	rcall	.+26     	; 0x25e0 <malloc>
    25c6:	ec 01       	movw	r28, r24
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	21 f0       	breq	.+8      	; 0x25d4 <calloc+0x28>
    25cc:	a8 01       	movw	r20, r16
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	10 d2       	rcall	.+1056   	; 0x29f4 <memset>
    25d4:	ce 01       	movw	r24, r28
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	08 95       	ret

000025e0 <malloc>:
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	91 05       	cpc	r25, r1
    25e8:	10 f4       	brcc	.+4      	; 0x25ee <malloc+0xe>
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	e0 91 c3 0c 	lds	r30, 0x0CC3
    25f2:	f0 91 c4 0c 	lds	r31, 0x0CC4
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	a0 e0       	ldi	r26, 0x00	; 0
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	30 97       	sbiw	r30, 0x00	; 0
    2600:	39 f1       	breq	.+78     	; 0x2650 <malloc+0x70>
    2602:	40 81       	ld	r20, Z
    2604:	51 81       	ldd	r21, Z+1	; 0x01
    2606:	48 17       	cp	r20, r24
    2608:	59 07       	cpc	r21, r25
    260a:	b8 f0       	brcs	.+46     	; 0x263a <malloc+0x5a>
    260c:	48 17       	cp	r20, r24
    260e:	59 07       	cpc	r21, r25
    2610:	71 f4       	brne	.+28     	; 0x262e <malloc+0x4e>
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	10 97       	sbiw	r26, 0x00	; 0
    2618:	29 f0       	breq	.+10     	; 0x2624 <malloc+0x44>
    261a:	13 96       	adiw	r26, 0x03	; 3
    261c:	9c 93       	st	X, r25
    261e:	8e 93       	st	-X, r24
    2620:	12 97       	sbiw	r26, 0x02	; 2
    2622:	2c c0       	rjmp	.+88     	; 0x267c <malloc+0x9c>
    2624:	90 93 c4 0c 	sts	0x0CC4, r25
    2628:	80 93 c3 0c 	sts	0x0CC3, r24
    262c:	27 c0       	rjmp	.+78     	; 0x267c <malloc+0x9c>
    262e:	21 15       	cp	r18, r1
    2630:	31 05       	cpc	r19, r1
    2632:	31 f0       	breq	.+12     	; 0x2640 <malloc+0x60>
    2634:	42 17       	cp	r20, r18
    2636:	53 07       	cpc	r21, r19
    2638:	18 f0       	brcs	.+6      	; 0x2640 <malloc+0x60>
    263a:	a9 01       	movw	r20, r18
    263c:	db 01       	movw	r26, r22
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <malloc+0x62>
    2640:	ef 01       	movw	r28, r30
    2642:	9a 01       	movw	r18, r20
    2644:	bd 01       	movw	r22, r26
    2646:	df 01       	movw	r26, r30
    2648:	02 80       	ldd	r0, Z+2	; 0x02
    264a:	f3 81       	ldd	r31, Z+3	; 0x03
    264c:	e0 2d       	mov	r30, r0
    264e:	d7 cf       	rjmp	.-82     	; 0x25fe <malloc+0x1e>
    2650:	21 15       	cp	r18, r1
    2652:	31 05       	cpc	r19, r1
    2654:	f9 f0       	breq	.+62     	; 0x2694 <malloc+0xb4>
    2656:	28 1b       	sub	r18, r24
    2658:	39 0b       	sbc	r19, r25
    265a:	24 30       	cpi	r18, 0x04	; 4
    265c:	31 05       	cpc	r19, r1
    265e:	80 f4       	brcc	.+32     	; 0x2680 <malloc+0xa0>
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	9b 81       	ldd	r25, Y+3	; 0x03
    2664:	61 15       	cp	r22, r1
    2666:	71 05       	cpc	r23, r1
    2668:	21 f0       	breq	.+8      	; 0x2672 <malloc+0x92>
    266a:	fb 01       	movw	r30, r22
    266c:	93 83       	std	Z+3, r25	; 0x03
    266e:	82 83       	std	Z+2, r24	; 0x02
    2670:	04 c0       	rjmp	.+8      	; 0x267a <malloc+0x9a>
    2672:	90 93 c4 0c 	sts	0x0CC4, r25
    2676:	80 93 c3 0c 	sts	0x0CC3, r24
    267a:	fe 01       	movw	r30, r28
    267c:	32 96       	adiw	r30, 0x02	; 2
    267e:	44 c0       	rjmp	.+136    	; 0x2708 <malloc+0x128>
    2680:	fe 01       	movw	r30, r28
    2682:	e2 0f       	add	r30, r18
    2684:	f3 1f       	adc	r31, r19
    2686:	81 93       	st	Z+, r24
    2688:	91 93       	st	Z+, r25
    268a:	22 50       	subi	r18, 0x02	; 2
    268c:	31 09       	sbc	r19, r1
    268e:	39 83       	std	Y+1, r19	; 0x01
    2690:	28 83       	st	Y, r18
    2692:	3a c0       	rjmp	.+116    	; 0x2708 <malloc+0x128>
    2694:	20 91 c1 0c 	lds	r18, 0x0CC1
    2698:	30 91 c2 0c 	lds	r19, 0x0CC2
    269c:	23 2b       	or	r18, r19
    269e:	41 f4       	brne	.+16     	; 0x26b0 <malloc+0xd0>
    26a0:	20 91 02 01 	lds	r18, 0x0102
    26a4:	30 91 03 01 	lds	r19, 0x0103
    26a8:	30 93 c2 0c 	sts	0x0CC2, r19
    26ac:	20 93 c1 0c 	sts	0x0CC1, r18
    26b0:	20 91 00 01 	lds	r18, 0x0100
    26b4:	30 91 01 01 	lds	r19, 0x0101
    26b8:	21 15       	cp	r18, r1
    26ba:	31 05       	cpc	r19, r1
    26bc:	41 f4       	brne	.+16     	; 0x26ce <malloc+0xee>
    26be:	2d b7       	in	r18, 0x3d	; 61
    26c0:	3e b7       	in	r19, 0x3e	; 62
    26c2:	40 91 04 01 	lds	r20, 0x0104
    26c6:	50 91 05 01 	lds	r21, 0x0105
    26ca:	24 1b       	sub	r18, r20
    26cc:	35 0b       	sbc	r19, r21
    26ce:	e0 91 c1 0c 	lds	r30, 0x0CC1
    26d2:	f0 91 c2 0c 	lds	r31, 0x0CC2
    26d6:	e2 17       	cp	r30, r18
    26d8:	f3 07       	cpc	r31, r19
    26da:	a0 f4       	brcc	.+40     	; 0x2704 <malloc+0x124>
    26dc:	2e 1b       	sub	r18, r30
    26de:	3f 0b       	sbc	r19, r31
    26e0:	28 17       	cp	r18, r24
    26e2:	39 07       	cpc	r19, r25
    26e4:	78 f0       	brcs	.+30     	; 0x2704 <malloc+0x124>
    26e6:	ac 01       	movw	r20, r24
    26e8:	4e 5f       	subi	r20, 0xFE	; 254
    26ea:	5f 4f       	sbci	r21, 0xFF	; 255
    26ec:	24 17       	cp	r18, r20
    26ee:	35 07       	cpc	r19, r21
    26f0:	48 f0       	brcs	.+18     	; 0x2704 <malloc+0x124>
    26f2:	4e 0f       	add	r20, r30
    26f4:	5f 1f       	adc	r21, r31
    26f6:	50 93 c2 0c 	sts	0x0CC2, r21
    26fa:	40 93 c1 0c 	sts	0x0CC1, r20
    26fe:	81 93       	st	Z+, r24
    2700:	91 93       	st	Z+, r25
    2702:	02 c0       	rjmp	.+4      	; 0x2708 <malloc+0x128>
    2704:	e0 e0       	ldi	r30, 0x00	; 0
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	cf 01       	movw	r24, r30
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	08 95       	ret

00002710 <free>:
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	09 f4       	brne	.+2      	; 0x271a <free+0xa>
    2718:	87 c0       	rjmp	.+270    	; 0x2828 <free+0x118>
    271a:	fc 01       	movw	r30, r24
    271c:	32 97       	sbiw	r30, 0x02	; 2
    271e:	13 82       	std	Z+3, r1	; 0x03
    2720:	12 82       	std	Z+2, r1	; 0x02
    2722:	c0 91 c3 0c 	lds	r28, 0x0CC3
    2726:	d0 91 c4 0c 	lds	r29, 0x0CC4
    272a:	20 97       	sbiw	r28, 0x00	; 0
    272c:	81 f4       	brne	.+32     	; 0x274e <free+0x3e>
    272e:	20 81       	ld	r18, Z
    2730:	31 81       	ldd	r19, Z+1	; 0x01
    2732:	28 0f       	add	r18, r24
    2734:	39 1f       	adc	r19, r25
    2736:	80 91 c1 0c 	lds	r24, 0x0CC1
    273a:	90 91 c2 0c 	lds	r25, 0x0CC2
    273e:	82 17       	cp	r24, r18
    2740:	93 07       	cpc	r25, r19
    2742:	79 f5       	brne	.+94     	; 0x27a2 <free+0x92>
    2744:	f0 93 c2 0c 	sts	0x0CC2, r31
    2748:	e0 93 c1 0c 	sts	0x0CC1, r30
    274c:	6d c0       	rjmp	.+218    	; 0x2828 <free+0x118>
    274e:	de 01       	movw	r26, r28
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	ae 17       	cp	r26, r30
    2756:	bf 07       	cpc	r27, r31
    2758:	50 f4       	brcc	.+20     	; 0x276e <free+0x5e>
    275a:	12 96       	adiw	r26, 0x02	; 2
    275c:	4d 91       	ld	r20, X+
    275e:	5c 91       	ld	r21, X
    2760:	13 97       	sbiw	r26, 0x03	; 3
    2762:	9d 01       	movw	r18, r26
    2764:	41 15       	cp	r20, r1
    2766:	51 05       	cpc	r21, r1
    2768:	09 f1       	breq	.+66     	; 0x27ac <free+0x9c>
    276a:	da 01       	movw	r26, r20
    276c:	f3 cf       	rjmp	.-26     	; 0x2754 <free+0x44>
    276e:	b3 83       	std	Z+3, r27	; 0x03
    2770:	a2 83       	std	Z+2, r26	; 0x02
    2772:	40 81       	ld	r20, Z
    2774:	51 81       	ldd	r21, Z+1	; 0x01
    2776:	84 0f       	add	r24, r20
    2778:	95 1f       	adc	r25, r21
    277a:	8a 17       	cp	r24, r26
    277c:	9b 07       	cpc	r25, r27
    277e:	71 f4       	brne	.+28     	; 0x279c <free+0x8c>
    2780:	8d 91       	ld	r24, X+
    2782:	9c 91       	ld	r25, X
    2784:	11 97       	sbiw	r26, 0x01	; 1
    2786:	84 0f       	add	r24, r20
    2788:	95 1f       	adc	r25, r21
    278a:	02 96       	adiw	r24, 0x02	; 2
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
    2790:	12 96       	adiw	r26, 0x02	; 2
    2792:	8d 91       	ld	r24, X+
    2794:	9c 91       	ld	r25, X
    2796:	13 97       	sbiw	r26, 0x03	; 3
    2798:	93 83       	std	Z+3, r25	; 0x03
    279a:	82 83       	std	Z+2, r24	; 0x02
    279c:	21 15       	cp	r18, r1
    279e:	31 05       	cpc	r19, r1
    27a0:	29 f4       	brne	.+10     	; 0x27ac <free+0x9c>
    27a2:	f0 93 c4 0c 	sts	0x0CC4, r31
    27a6:	e0 93 c3 0c 	sts	0x0CC3, r30
    27aa:	3e c0       	rjmp	.+124    	; 0x2828 <free+0x118>
    27ac:	d9 01       	movw	r26, r18
    27ae:	13 96       	adiw	r26, 0x03	; 3
    27b0:	fc 93       	st	X, r31
    27b2:	ee 93       	st	-X, r30
    27b4:	12 97       	sbiw	r26, 0x02	; 2
    27b6:	4d 91       	ld	r20, X+
    27b8:	5d 91       	ld	r21, X+
    27ba:	a4 0f       	add	r26, r20
    27bc:	b5 1f       	adc	r27, r21
    27be:	ea 17       	cp	r30, r26
    27c0:	fb 07       	cpc	r31, r27
    27c2:	79 f4       	brne	.+30     	; 0x27e2 <free+0xd2>
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	84 0f       	add	r24, r20
    27ca:	95 1f       	adc	r25, r21
    27cc:	02 96       	adiw	r24, 0x02	; 2
    27ce:	d9 01       	movw	r26, r18
    27d0:	11 96       	adiw	r26, 0x01	; 1
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	13 96       	adiw	r26, 0x03	; 3
    27dc:	9c 93       	st	X, r25
    27de:	8e 93       	st	-X, r24
    27e0:	12 97       	sbiw	r26, 0x02	; 2
    27e2:	e0 e0       	ldi	r30, 0x00	; 0
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	8a 81       	ldd	r24, Y+2	; 0x02
    27e8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	19 f0       	breq	.+6      	; 0x27f4 <free+0xe4>
    27ee:	fe 01       	movw	r30, r28
    27f0:	ec 01       	movw	r28, r24
    27f2:	f9 cf       	rjmp	.-14     	; 0x27e6 <free+0xd6>
    27f4:	ce 01       	movw	r24, r28
    27f6:	02 96       	adiw	r24, 0x02	; 2
    27f8:	28 81       	ld	r18, Y
    27fa:	39 81       	ldd	r19, Y+1	; 0x01
    27fc:	82 0f       	add	r24, r18
    27fe:	93 1f       	adc	r25, r19
    2800:	20 91 c1 0c 	lds	r18, 0x0CC1
    2804:	30 91 c2 0c 	lds	r19, 0x0CC2
    2808:	28 17       	cp	r18, r24
    280a:	39 07       	cpc	r19, r25
    280c:	69 f4       	brne	.+26     	; 0x2828 <free+0x118>
    280e:	30 97       	sbiw	r30, 0x00	; 0
    2810:	29 f4       	brne	.+10     	; 0x281c <free+0x10c>
    2812:	10 92 c4 0c 	sts	0x0CC4, r1
    2816:	10 92 c3 0c 	sts	0x0CC3, r1
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <free+0x110>
    281c:	13 82       	std	Z+3, r1	; 0x03
    281e:	12 82       	std	Z+2, r1	; 0x02
    2820:	d0 93 c2 0c 	sts	0x0CC2, r29
    2824:	c0 93 c1 0c 	sts	0x0CC1, r28
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	08 95       	ret

0000282e <__ftoa_engine>:
    282e:	28 30       	cpi	r18, 0x08	; 8
    2830:	08 f0       	brcs	.+2      	; 0x2834 <__ftoa_engine+0x6>
    2832:	27 e0       	ldi	r18, 0x07	; 7
    2834:	33 27       	eor	r19, r19
    2836:	da 01       	movw	r26, r20
    2838:	99 0f       	add	r25, r25
    283a:	31 1d       	adc	r19, r1
    283c:	87 fd       	sbrc	r24, 7
    283e:	91 60       	ori	r25, 0x01	; 1
    2840:	00 96       	adiw	r24, 0x00	; 0
    2842:	61 05       	cpc	r22, r1
    2844:	71 05       	cpc	r23, r1
    2846:	39 f4       	brne	.+14     	; 0x2856 <__ftoa_engine+0x28>
    2848:	32 60       	ori	r19, 0x02	; 2
    284a:	2e 5f       	subi	r18, 0xFE	; 254
    284c:	3d 93       	st	X+, r19
    284e:	30 e3       	ldi	r19, 0x30	; 48
    2850:	2a 95       	dec	r18
    2852:	e1 f7       	brne	.-8      	; 0x284c <__ftoa_engine+0x1e>
    2854:	08 95       	ret
    2856:	9f 3f       	cpi	r25, 0xFF	; 255
    2858:	30 f0       	brcs	.+12     	; 0x2866 <__ftoa_engine+0x38>
    285a:	80 38       	cpi	r24, 0x80	; 128
    285c:	71 05       	cpc	r23, r1
    285e:	61 05       	cpc	r22, r1
    2860:	09 f0       	breq	.+2      	; 0x2864 <__ftoa_engine+0x36>
    2862:	3c 5f       	subi	r19, 0xFC	; 252
    2864:	3c 5f       	subi	r19, 0xFC	; 252
    2866:	3d 93       	st	X+, r19
    2868:	91 30       	cpi	r25, 0x01	; 1
    286a:	08 f0       	brcs	.+2      	; 0x286e <__ftoa_engine+0x40>
    286c:	80 68       	ori	r24, 0x80	; 128
    286e:	91 1d       	adc	r25, r1
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	1f 93       	push	r17
    2876:	0f 93       	push	r16
    2878:	ff 92       	push	r15
    287a:	ef 92       	push	r14
    287c:	19 2f       	mov	r17, r25
    287e:	98 7f       	andi	r25, 0xF8	; 248
    2880:	96 95       	lsr	r25
    2882:	e9 2f       	mov	r30, r25
    2884:	96 95       	lsr	r25
    2886:	96 95       	lsr	r25
    2888:	e9 0f       	add	r30, r25
    288a:	ff 27       	eor	r31, r31
    288c:	ec 56       	subi	r30, 0x6C	; 108
    288e:	fe 4f       	sbci	r31, 0xFE	; 254
    2890:	99 27       	eor	r25, r25
    2892:	33 27       	eor	r19, r19
    2894:	ee 24       	eor	r14, r14
    2896:	ff 24       	eor	r15, r15
    2898:	a7 01       	movw	r20, r14
    289a:	e7 01       	movw	r28, r14
    289c:	05 90       	lpm	r0, Z+
    289e:	08 94       	sec
    28a0:	07 94       	ror	r0
    28a2:	28 f4       	brcc	.+10     	; 0x28ae <__ftoa_engine+0x80>
    28a4:	36 0f       	add	r19, r22
    28a6:	e7 1e       	adc	r14, r23
    28a8:	f8 1e       	adc	r15, r24
    28aa:	49 1f       	adc	r20, r25
    28ac:	51 1d       	adc	r21, r1
    28ae:	66 0f       	add	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	06 94       	lsr	r0
    28b8:	a1 f7       	brne	.-24     	; 0x28a2 <__ftoa_engine+0x74>
    28ba:	05 90       	lpm	r0, Z+
    28bc:	07 94       	ror	r0
    28be:	28 f4       	brcc	.+10     	; 0x28ca <__ftoa_engine+0x9c>
    28c0:	e7 0e       	add	r14, r23
    28c2:	f8 1e       	adc	r15, r24
    28c4:	49 1f       	adc	r20, r25
    28c6:	56 1f       	adc	r21, r22
    28c8:	c1 1d       	adc	r28, r1
    28ca:	77 0f       	add	r23, r23
    28cc:	88 1f       	adc	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	66 1f       	adc	r22, r22
    28d2:	06 94       	lsr	r0
    28d4:	a1 f7       	brne	.-24     	; 0x28be <__ftoa_engine+0x90>
    28d6:	05 90       	lpm	r0, Z+
    28d8:	07 94       	ror	r0
    28da:	28 f4       	brcc	.+10     	; 0x28e6 <__ftoa_engine+0xb8>
    28dc:	f8 0e       	add	r15, r24
    28de:	49 1f       	adc	r20, r25
    28e0:	56 1f       	adc	r21, r22
    28e2:	c7 1f       	adc	r28, r23
    28e4:	d1 1d       	adc	r29, r1
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	66 1f       	adc	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	06 94       	lsr	r0
    28f0:	a1 f7       	brne	.-24     	; 0x28da <__ftoa_engine+0xac>
    28f2:	05 90       	lpm	r0, Z+
    28f4:	07 94       	ror	r0
    28f6:	20 f4       	brcc	.+8      	; 0x2900 <__ftoa_engine+0xd2>
    28f8:	49 0f       	add	r20, r25
    28fa:	56 1f       	adc	r21, r22
    28fc:	c7 1f       	adc	r28, r23
    28fe:	d8 1f       	adc	r29, r24
    2900:	99 0f       	add	r25, r25
    2902:	66 1f       	adc	r22, r22
    2904:	77 1f       	adc	r23, r23
    2906:	88 1f       	adc	r24, r24
    2908:	06 94       	lsr	r0
    290a:	a9 f7       	brne	.-22     	; 0x28f6 <__ftoa_engine+0xc8>
    290c:	84 91       	lpm	r24, Z
    290e:	10 95       	com	r17
    2910:	17 70       	andi	r17, 0x07	; 7
    2912:	41 f0       	breq	.+16     	; 0x2924 <__ftoa_engine+0xf6>
    2914:	d6 95       	lsr	r29
    2916:	c7 95       	ror	r28
    2918:	57 95       	ror	r21
    291a:	47 95       	ror	r20
    291c:	f7 94       	ror	r15
    291e:	e7 94       	ror	r14
    2920:	1a 95       	dec	r17
    2922:	c1 f7       	brne	.-16     	; 0x2914 <__ftoa_engine+0xe6>
    2924:	ea e3       	ldi	r30, 0x3A	; 58
    2926:	f1 e0       	ldi	r31, 0x01	; 1
    2928:	68 94       	set
    292a:	15 90       	lpm	r1, Z+
    292c:	15 91       	lpm	r17, Z+
    292e:	35 91       	lpm	r19, Z+
    2930:	65 91       	lpm	r22, Z+
    2932:	95 91       	lpm	r25, Z+
    2934:	05 90       	lpm	r0, Z+
    2936:	7f e2       	ldi	r23, 0x2F	; 47
    2938:	73 95       	inc	r23
    293a:	e1 18       	sub	r14, r1
    293c:	f1 0a       	sbc	r15, r17
    293e:	43 0b       	sbc	r20, r19
    2940:	56 0b       	sbc	r21, r22
    2942:	c9 0b       	sbc	r28, r25
    2944:	d0 09       	sbc	r29, r0
    2946:	c0 f7       	brcc	.-16     	; 0x2938 <__ftoa_engine+0x10a>
    2948:	e1 0c       	add	r14, r1
    294a:	f1 1e       	adc	r15, r17
    294c:	43 1f       	adc	r20, r19
    294e:	56 1f       	adc	r21, r22
    2950:	c9 1f       	adc	r28, r25
    2952:	d0 1d       	adc	r29, r0
    2954:	7e f4       	brtc	.+30     	; 0x2974 <__ftoa_engine+0x146>
    2956:	70 33       	cpi	r23, 0x30	; 48
    2958:	11 f4       	brne	.+4      	; 0x295e <__ftoa_engine+0x130>
    295a:	8a 95       	dec	r24
    295c:	e6 cf       	rjmp	.-52     	; 0x292a <__ftoa_engine+0xfc>
    295e:	e8 94       	clt
    2960:	01 50       	subi	r16, 0x01	; 1
    2962:	30 f0       	brcs	.+12     	; 0x2970 <__ftoa_engine+0x142>
    2964:	08 0f       	add	r16, r24
    2966:	0a f4       	brpl	.+2      	; 0x296a <__ftoa_engine+0x13c>
    2968:	00 27       	eor	r16, r16
    296a:	02 17       	cp	r16, r18
    296c:	08 f4       	brcc	.+2      	; 0x2970 <__ftoa_engine+0x142>
    296e:	20 2f       	mov	r18, r16
    2970:	23 95       	inc	r18
    2972:	02 2f       	mov	r16, r18
    2974:	7a 33       	cpi	r23, 0x3A	; 58
    2976:	28 f0       	brcs	.+10     	; 0x2982 <__ftoa_engine+0x154>
    2978:	79 e3       	ldi	r23, 0x39	; 57
    297a:	7d 93       	st	X+, r23
    297c:	2a 95       	dec	r18
    297e:	e9 f7       	brne	.-6      	; 0x297a <__ftoa_engine+0x14c>
    2980:	10 c0       	rjmp	.+32     	; 0x29a2 <__ftoa_engine+0x174>
    2982:	7d 93       	st	X+, r23
    2984:	2a 95       	dec	r18
    2986:	89 f6       	brne	.-94     	; 0x292a <__ftoa_engine+0xfc>
    2988:	06 94       	lsr	r0
    298a:	97 95       	ror	r25
    298c:	67 95       	ror	r22
    298e:	37 95       	ror	r19
    2990:	17 95       	ror	r17
    2992:	17 94       	ror	r1
    2994:	e1 18       	sub	r14, r1
    2996:	f1 0a       	sbc	r15, r17
    2998:	43 0b       	sbc	r20, r19
    299a:	56 0b       	sbc	r21, r22
    299c:	c9 0b       	sbc	r28, r25
    299e:	d0 09       	sbc	r29, r0
    29a0:	98 f0       	brcs	.+38     	; 0x29c8 <__ftoa_engine+0x19a>
    29a2:	23 95       	inc	r18
    29a4:	7e 91       	ld	r23, -X
    29a6:	73 95       	inc	r23
    29a8:	7a 33       	cpi	r23, 0x3A	; 58
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <__ftoa_engine+0x180>
    29ac:	70 e3       	ldi	r23, 0x30	; 48
    29ae:	7c 93       	st	X, r23
    29b0:	20 13       	cpse	r18, r16
    29b2:	b8 f7       	brcc	.-18     	; 0x29a2 <__ftoa_engine+0x174>
    29b4:	7e 91       	ld	r23, -X
    29b6:	70 61       	ori	r23, 0x10	; 16
    29b8:	7d 93       	st	X+, r23
    29ba:	30 f0       	brcs	.+12     	; 0x29c8 <__ftoa_engine+0x19a>
    29bc:	83 95       	inc	r24
    29be:	71 e3       	ldi	r23, 0x31	; 49
    29c0:	7d 93       	st	X+, r23
    29c2:	70 e3       	ldi	r23, 0x30	; 48
    29c4:	2a 95       	dec	r18
    29c6:	e1 f7       	brne	.-8      	; 0x29c0 <__ftoa_engine+0x192>
    29c8:	11 24       	eor	r1, r1
    29ca:	ef 90       	pop	r14
    29cc:	ff 90       	pop	r15
    29ce:	0f 91       	pop	r16
    29d0:	1f 91       	pop	r17
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	99 27       	eor	r25, r25
    29d8:	87 fd       	sbrc	r24, 7
    29da:	90 95       	com	r25
    29dc:	08 95       	ret

000029de <strnlen_P>:
    29de:	fc 01       	movw	r30, r24
    29e0:	05 90       	lpm	r0, Z+
    29e2:	61 50       	subi	r22, 0x01	; 1
    29e4:	70 40       	sbci	r23, 0x00	; 0
    29e6:	01 10       	cpse	r0, r1
    29e8:	d8 f7       	brcc	.-10     	; 0x29e0 <strnlen_P+0x2>
    29ea:	80 95       	com	r24
    29ec:	90 95       	com	r25
    29ee:	8e 0f       	add	r24, r30
    29f0:	9f 1f       	adc	r25, r31
    29f2:	08 95       	ret

000029f4 <memset>:
    29f4:	dc 01       	movw	r26, r24
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <memset+0x6>
    29f8:	6d 93       	st	X+, r22
    29fa:	41 50       	subi	r20, 0x01	; 1
    29fc:	50 40       	sbci	r21, 0x00	; 0
    29fe:	e0 f7       	brcc	.-8      	; 0x29f8 <memset+0x4>
    2a00:	08 95       	ret

00002a02 <strcmp>:
    2a02:	fb 01       	movw	r30, r22
    2a04:	dc 01       	movw	r26, r24
    2a06:	8d 91       	ld	r24, X+
    2a08:	01 90       	ld	r0, Z+
    2a0a:	80 19       	sub	r24, r0
    2a0c:	01 10       	cpse	r0, r1
    2a0e:	d9 f3       	breq	.-10     	; 0x2a06 <strcmp+0x4>
    2a10:	99 0b       	sbc	r25, r25
    2a12:	08 95       	ret

00002a14 <strcpy>:
    2a14:	fb 01       	movw	r30, r22
    2a16:	dc 01       	movw	r26, r24
    2a18:	01 90       	ld	r0, Z+
    2a1a:	0d 92       	st	X+, r0
    2a1c:	00 20       	and	r0, r0
    2a1e:	e1 f7       	brne	.-8      	; 0x2a18 <strcpy+0x4>
    2a20:	08 95       	ret

00002a22 <strnlen>:
    2a22:	fc 01       	movw	r30, r24
    2a24:	61 50       	subi	r22, 0x01	; 1
    2a26:	70 40       	sbci	r23, 0x00	; 0
    2a28:	01 90       	ld	r0, Z+
    2a2a:	01 10       	cpse	r0, r1
    2a2c:	d8 f7       	brcc	.-10     	; 0x2a24 <strnlen+0x2>
    2a2e:	80 95       	com	r24
    2a30:	90 95       	com	r25
    2a32:	8e 0f       	add	r24, r30
    2a34:	9f 1f       	adc	r25, r31
    2a36:	08 95       	ret

00002a38 <fputc>:
    2a38:	0f 93       	push	r16
    2a3a:	1f 93       	push	r17
    2a3c:	cf 93       	push	r28
    2a3e:	df 93       	push	r29
    2a40:	18 2f       	mov	r17, r24
    2a42:	09 2f       	mov	r16, r25
    2a44:	eb 01       	movw	r28, r22
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	81 fd       	sbrc	r24, 1
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <fputc+0x1a>
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	9f ef       	ldi	r25, 0xFF	; 255
    2a50:	20 c0       	rjmp	.+64     	; 0x2a92 <fputc+0x5a>
    2a52:	82 ff       	sbrs	r24, 2
    2a54:	10 c0       	rjmp	.+32     	; 0x2a76 <fputc+0x3e>
    2a56:	4e 81       	ldd	r20, Y+6	; 0x06
    2a58:	5f 81       	ldd	r21, Y+7	; 0x07
    2a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5e:	42 17       	cp	r20, r18
    2a60:	53 07       	cpc	r21, r19
    2a62:	7c f4       	brge	.+30     	; 0x2a82 <fputc+0x4a>
    2a64:	e8 81       	ld	r30, Y
    2a66:	f9 81       	ldd	r31, Y+1	; 0x01
    2a68:	9f 01       	movw	r18, r30
    2a6a:	2f 5f       	subi	r18, 0xFF	; 255
    2a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6e:	39 83       	std	Y+1, r19	; 0x01
    2a70:	28 83       	st	Y, r18
    2a72:	10 83       	st	Z, r17
    2a74:	06 c0       	rjmp	.+12     	; 0x2a82 <fputc+0x4a>
    2a76:	e8 85       	ldd	r30, Y+8	; 0x08
    2a78:	f9 85       	ldd	r31, Y+9	; 0x09
    2a7a:	81 2f       	mov	r24, r17
    2a7c:	09 95       	icall
    2a7e:	89 2b       	or	r24, r25
    2a80:	29 f7       	brne	.-54     	; 0x2a4c <fputc+0x14>
    2a82:	2e 81       	ldd	r18, Y+6	; 0x06
    2a84:	3f 81       	ldd	r19, Y+7	; 0x07
    2a86:	2f 5f       	subi	r18, 0xFF	; 255
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	3f 83       	std	Y+7, r19	; 0x07
    2a8c:	2e 83       	std	Y+6, r18	; 0x06
    2a8e:	81 2f       	mov	r24, r17
    2a90:	90 2f       	mov	r25, r16
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <sprintf>:
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	0d 89       	ldd	r16, Y+21	; 0x15
    2ab6:	1e 89       	ldd	r17, Y+22	; 0x16
    2ab8:	86 e0       	ldi	r24, 0x06	; 6
    2aba:	8c 83       	std	Y+4, r24	; 0x04
    2abc:	1a 83       	std	Y+2, r17	; 0x02
    2abe:	09 83       	std	Y+1, r16	; 0x01
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f e7       	ldi	r25, 0x7F	; 127
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	ae 01       	movw	r20, r28
    2aca:	47 5e       	subi	r20, 0xE7	; 231
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	6f 89       	ldd	r22, Y+23	; 0x17
    2ad0:	78 8d       	ldd	r23, Y+24	; 0x18
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	bc d9       	rcall	.-3208   	; 0x1e50 <vfprintf>
    2ad8:	ef 81       	ldd	r30, Y+7	; 0x07
    2ada:	f8 85       	ldd	r31, Y+8	; 0x08
    2adc:	e0 0f       	add	r30, r16
    2ade:	f1 1f       	adc	r31, r17
    2ae0:	10 82       	st	Z, r1
    2ae2:	2e 96       	adiw	r28, 0x0e	; 14
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	de bf       	out	0x3e, r29	; 62
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	cd bf       	out	0x3d, r28	; 61
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	08 95       	ret

00002af8 <vsnprintf>:
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	2e 97       	sbiw	r28, 0x0e	; 14
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	8c 01       	movw	r16, r24
    2b12:	ca 01       	movw	r24, r20
    2b14:	46 e0       	ldi	r20, 0x06	; 6
    2b16:	4c 83       	std	Y+4, r20	; 0x04
    2b18:	1a 83       	std	Y+2, r17	; 0x02
    2b1a:	09 83       	std	Y+1, r16	; 0x01
    2b1c:	77 ff       	sbrs	r23, 7
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <vsnprintf+0x2c>
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	70 e8       	ldi	r23, 0x80	; 128
    2b24:	61 50       	subi	r22, 0x01	; 1
    2b26:	71 09       	sbc	r23, r1
    2b28:	7e 83       	std	Y+6, r23	; 0x06
    2b2a:	6d 83       	std	Y+5, r22	; 0x05
    2b2c:	a9 01       	movw	r20, r18
    2b2e:	bc 01       	movw	r22, r24
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	8d d9       	rcall	.-3302   	; 0x1e50 <vfprintf>
    2b36:	4d 81       	ldd	r20, Y+5	; 0x05
    2b38:	5e 81       	ldd	r21, Y+6	; 0x06
    2b3a:	57 fd       	sbrc	r21, 7
    2b3c:	0a c0       	rjmp	.+20     	; 0x2b52 <vsnprintf+0x5a>
    2b3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2b40:	38 85       	ldd	r19, Y+8	; 0x08
    2b42:	42 17       	cp	r20, r18
    2b44:	53 07       	cpc	r21, r19
    2b46:	0c f4       	brge	.+2      	; 0x2b4a <vsnprintf+0x52>
    2b48:	9a 01       	movw	r18, r20
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	e2 0f       	add	r30, r18
    2b4e:	f3 1f       	adc	r31, r19
    2b50:	10 82       	st	Z, r1
    2b52:	2e 96       	adiw	r28, 0x0e	; 14
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	f8 94       	cli
    2b58:	de bf       	out	0x3e, r29	; 62
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	cd bf       	out	0x3d, r28	; 61
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	08 95       	ret

00002b68 <__ultoa_invert>:
    2b68:	fa 01       	movw	r30, r20
    2b6a:	aa 27       	eor	r26, r26
    2b6c:	28 30       	cpi	r18, 0x08	; 8
    2b6e:	51 f1       	breq	.+84     	; 0x2bc4 <__ultoa_invert+0x5c>
    2b70:	20 31       	cpi	r18, 0x10	; 16
    2b72:	81 f1       	breq	.+96     	; 0x2bd4 <__ultoa_invert+0x6c>
    2b74:	e8 94       	clt
    2b76:	6f 93       	push	r22
    2b78:	6e 7f       	andi	r22, 0xFE	; 254
    2b7a:	6e 5f       	subi	r22, 0xFE	; 254
    2b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b80:	9f 4f       	sbci	r25, 0xFF	; 255
    2b82:	af 4f       	sbci	r26, 0xFF	; 255
    2b84:	b1 e0       	ldi	r27, 0x01	; 1
    2b86:	3e d0       	rcall	.+124    	; 0x2c04 <__ultoa_invert+0x9c>
    2b88:	b4 e0       	ldi	r27, 0x04	; 4
    2b8a:	3c d0       	rcall	.+120    	; 0x2c04 <__ultoa_invert+0x9c>
    2b8c:	67 0f       	add	r22, r23
    2b8e:	78 1f       	adc	r23, r24
    2b90:	89 1f       	adc	r24, r25
    2b92:	9a 1f       	adc	r25, r26
    2b94:	a1 1d       	adc	r26, r1
    2b96:	68 0f       	add	r22, r24
    2b98:	79 1f       	adc	r23, r25
    2b9a:	8a 1f       	adc	r24, r26
    2b9c:	91 1d       	adc	r25, r1
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	6a 0f       	add	r22, r26
    2ba2:	71 1d       	adc	r23, r1
    2ba4:	81 1d       	adc	r24, r1
    2ba6:	91 1d       	adc	r25, r1
    2ba8:	a1 1d       	adc	r26, r1
    2baa:	20 d0       	rcall	.+64     	; 0x2bec <__ultoa_invert+0x84>
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <__ultoa_invert+0x48>
    2bae:	68 94       	set
    2bb0:	3f 91       	pop	r19
    2bb2:	2a e0       	ldi	r18, 0x0A	; 10
    2bb4:	26 9f       	mul	r18, r22
    2bb6:	11 24       	eor	r1, r1
    2bb8:	30 19       	sub	r19, r0
    2bba:	30 5d       	subi	r19, 0xD0	; 208
    2bbc:	31 93       	st	Z+, r19
    2bbe:	de f6       	brtc	.-74     	; 0x2b76 <__ultoa_invert+0xe>
    2bc0:	cf 01       	movw	r24, r30
    2bc2:	08 95       	ret
    2bc4:	46 2f       	mov	r20, r22
    2bc6:	47 70       	andi	r20, 0x07	; 7
    2bc8:	40 5d       	subi	r20, 0xD0	; 208
    2bca:	41 93       	st	Z+, r20
    2bcc:	b3 e0       	ldi	r27, 0x03	; 3
    2bce:	0f d0       	rcall	.+30     	; 0x2bee <__ultoa_invert+0x86>
    2bd0:	c9 f7       	brne	.-14     	; 0x2bc4 <__ultoa_invert+0x5c>
    2bd2:	f6 cf       	rjmp	.-20     	; 0x2bc0 <__ultoa_invert+0x58>
    2bd4:	46 2f       	mov	r20, r22
    2bd6:	4f 70       	andi	r20, 0x0F	; 15
    2bd8:	40 5d       	subi	r20, 0xD0	; 208
    2bda:	4a 33       	cpi	r20, 0x3A	; 58
    2bdc:	18 f0       	brcs	.+6      	; 0x2be4 <__ultoa_invert+0x7c>
    2bde:	49 5d       	subi	r20, 0xD9	; 217
    2be0:	31 fd       	sbrc	r19, 1
    2be2:	40 52       	subi	r20, 0x20	; 32
    2be4:	41 93       	st	Z+, r20
    2be6:	02 d0       	rcall	.+4      	; 0x2bec <__ultoa_invert+0x84>
    2be8:	a9 f7       	brne	.-22     	; 0x2bd4 <__ultoa_invert+0x6c>
    2bea:	ea cf       	rjmp	.-44     	; 0x2bc0 <__ultoa_invert+0x58>
    2bec:	b4 e0       	ldi	r27, 0x04	; 4
    2bee:	a6 95       	lsr	r26
    2bf0:	97 95       	ror	r25
    2bf2:	87 95       	ror	r24
    2bf4:	77 95       	ror	r23
    2bf6:	67 95       	ror	r22
    2bf8:	ba 95       	dec	r27
    2bfa:	c9 f7       	brne	.-14     	; 0x2bee <__ultoa_invert+0x86>
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	61 05       	cpc	r22, r1
    2c00:	71 05       	cpc	r23, r1
    2c02:	08 95       	ret
    2c04:	9b 01       	movw	r18, r22
    2c06:	ac 01       	movw	r20, r24
    2c08:	0a 2e       	mov	r0, r26
    2c0a:	06 94       	lsr	r0
    2c0c:	57 95       	ror	r21
    2c0e:	47 95       	ror	r20
    2c10:	37 95       	ror	r19
    2c12:	27 95       	ror	r18
    2c14:	ba 95       	dec	r27
    2c16:	c9 f7       	brne	.-14     	; 0x2c0a <__ultoa_invert+0xa2>
    2c18:	62 0f       	add	r22, r18
    2c1a:	73 1f       	adc	r23, r19
    2c1c:	84 1f       	adc	r24, r20
    2c1e:	95 1f       	adc	r25, r21
    2c20:	a0 1d       	adc	r26, r0
    2c22:	08 95       	ret

00002c24 <_exit>:
    2c24:	f8 94       	cli

00002c26 <__stop_program>:
    2c26:	ff cf       	rjmp	.-2      	; 0x2c26 <__stop_program>
