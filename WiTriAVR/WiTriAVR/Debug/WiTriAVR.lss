
WiTriAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800112  00800112  00000586  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000586  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001858  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b85  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3c  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00003564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f12  00000000  00000000  00003f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 31       	cpi	r26, 0x19	; 25
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  9e:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:

byte i2c_readACK() {
	TWCR = TW_ACK;
	while (!TW_READY);
	return TWDR;
}
  a6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  aa:	88 e9       	ldi	r24, 0x98	; 152
  ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  b0:	08 95       	ret

000000b2 <i2c_detect>:
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b8:	ec eb       	ldi	r30, 0xBC	; 188
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	90 81       	ld	r25, Z
  be:	99 23       	and	r25, r25
  c0:	ec f7       	brge	.-6      	; 0xbc <i2c_detect+0xa>
  c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_detect+0x1e>
  d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	98 31       	cpi	r25, 0x18	; 24
  e0:	09 f0       	breq	.+2      	; 0xe4 <i2c_detect+0x32>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret

000000e6 <i2c_start>:
  e6:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_detect>
  ea:	08 95       	ret

000000ec <i2c_write>:
  ec:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  f0:	84 e8       	ldi	r24, 0x84	; 132
  f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f6:	ec eb       	ldi	r30, 0xBC	; 188
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <i2c_write+0xe>
 100:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 104:	98 7f       	andi	r25, 0xF8	; 248
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	98 32       	cpi	r25, 0x28	; 40
 10a:	09 f4       	brne	.+2      	; 0x10e <i2c_write+0x22>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <i2c_writeReg>:
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	d6 2f       	mov	r29, r22
 116:	c4 2f       	mov	r28, r20
 118:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_detect>
 11c:	8d 2f       	mov	r24, r29
 11e:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
 128:	84 e9       	ldi	r24, 0x94	; 148
 12a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <i2c_readNACK>:

byte i2c_readNACK() {
	TWCR = TW_ACK;
 134:	84 ec       	ldi	r24, 0xC4	; 196
 136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY);
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_readNACK+0xa>
	return TWDR;
 144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 148:	08 95       	ret

0000014a <i2c_readReg>:

byte i2c_readReg(byte busAddr, byte deviceReg) {
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	c8 2f       	mov	r28, r24
 150:	d6 2f       	mov	r29, r22
	TWSR = 0; //set prescalar to 0
	TWBR = ((F_CPU/F_SCL) - 16)/2; //Set SCL frequency	
}

void i2c_start(byte slaveAddr) {
	i2c_detect(slaveAddr);
 152:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_detect>
}

byte i2c_readReg(byte busAddr, byte deviceReg) {
	byte data = 0;
	i2c_start(busAddr);
	i2c_write(deviceReg);
 156:	8d 2f       	mov	r24, r29
 158:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
	TWSR = 0; //set prescalar to 0
	TWBR = ((F_CPU/F_SCL) - 16)/2; //Set SCL frequency	
}

void i2c_start(byte slaveAddr) {
	i2c_detect(slaveAddr);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	8c 0f       	add	r24, r28
 160:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_detect>
byte i2c_readReg(byte busAddr, byte deviceReg) {
	byte data = 0;
	i2c_start(busAddr);
	i2c_write(deviceReg);
	i2c_start(busAddr + READ);
	data = i2c_readNACK();
 164:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_readNACK>
	i2c_Stop();
 168:	94 e9       	ldi	r25, 0x94	; 148
 16a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return data;
}
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <beep>:

    }//End while(1)

}//End Main

void beep(uint8_t delay) {
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
	PINB = (1<<PINB0);
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	93 b9       	out	0x03, r25	; 3
	PINB = (0<<PINB1);
 17c:	13 b8       	out	0x03, r1	; 3
	msDelay(delay);
 17e:	c8 2f       	mov	r28, r24
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	0e 94 5d 02 	call	0x4ba	; 0x4ba <msDelay>
	PINB = (0<<PINB0);
 188:	13 b8       	out	0x03, r1	; 3
	PINB = (1<<PINB1);
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	83 b9       	out	0x03, r24	; 3
	msDelay(delay);
 18e:	ce 01       	movw	r24, r28
 190:	0e 94 5d 02 	call	0x4ba	; 0x4ba <msDelay>
	PINB = (0<<PINB1);
 194:	13 b8       	out	0x03, r1	; 3
	//beep for alarm.
}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <avr_init>:

void avr_init() {
	DDRC &= ~((1 << DDC2) | (1 << DDC3)); //Clear PC2, PC3, set as inputs.
 19c:	87 b1       	in	r24, 0x07	; 7
 19e:	83 7f       	andi	r24, 0xF3	; 243
 1a0:	87 b9       	out	0x07, r24	; 7
	PORTC |= ((1<<PORTC2) | (PORTC3)); //Set internal pull-ups on PC2 and PC3
 1a2:	88 b1       	in	r24, 0x08	; 8
 1a4:	87 60       	ori	r24, 0x07	; 7
 1a6:	88 b9       	out	0x08, r24	; 8
	
	PCICR |= (1 << PCIE1);
 1a8:	e8 e6       	ldi	r30, 0x68	; 104
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT10);	//Pin Change Interrupt for Alarm_Cancel
 1b2:	ec e6       	ldi	r30, 0x6C	; 108
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11);	//Pin Change Interrupt for Alarm_Snooze
 1bc:	80 81       	ld	r24, Z
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 83       	st	Z, r24
	
	DDRB |= (1 << DDB0);		//Speaker Output pin 1
 1c2:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= (1 << DDB1);		//Speaker Output pin 2
 1c4:	21 9a       	sbi	0x04, 1	; 4
	
	DDRC |= (1 << DDC1);		//Alarm Indicator LED set as output
 1c6:	39 9a       	sbi	0x07, 1	; 7
	
	DDRD &= ~(1 << DDD1);		//DST toggle switch set as input
 1c8:	51 98       	cbi	0x0a, 1	; 10
	DDRC &= ~(1 << DDD2);		//Alarm toggle switch set as input
 1ca:	3a 98       	cbi	0x07, 2	; 7
	
	PORTD |= ((1 << PORTD1) | (1 << PORTD2)); //set internal pull ups on PD1 and PD2
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	86 60       	ori	r24, 0x06	; 6
 1d0:	8b b9       	out	0x0b, r24	; 11
	
	sei();
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <clock_init>:
	
}

void clock_init() {
 1d6:	ef 92       	push	r14
 1d8:	0f 93       	push	r16
	i2c_init();
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	rtc_init();
 1de:	0e 94 87 01 	call	0x30e	; 0x30e <rtc_init>
	if (Set_RTC) {
		//initialize the RTC values to the set time.
		rtc_set(MONTH_SET, DAY_SET, YEAR_SET, HOUR_SET, MIN_SET, 0);
 1e2:	e1 2c       	mov	r14, r1
 1e4:	09 e1       	ldi	r16, 0x19	; 25
 1e6:	2c e0       	ldi	r18, 0x0C	; 12
 1e8:	41 e1       	ldi	r20, 0x11	; 17
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 c8 01 	call	0x390	; 0x390 <rtc_set>
	}
}
 1f2:	0f 91       	pop	r16
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <main>:
void beep(uint8_t delay);
void avr_init(); //pin mapping done here
void clock_init(); //Misc. setup for clock done here

int main(void) {
	avr_init();
 1f8:	0e 94 ce 00 	call	0x19c	; 0x19c <avr_init>
	clock_init();
 1fc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <clock_init>
		if(!alarm && (gHour == Alarm_Hour) && (gMin == Alarm_Minute) && AlarmDays[gDay] && alarmSet) {
			alarm = true;
			//If alarm condition is met, set alarm variable.
		}
		if(snoozed && (gMin == snoozeMin)) {
			alarm = true;
 200:	c1 e0       	ldi	r28, 0x01	; 1
		
		if(PINB0 == 0) alarmSet = false;
		if(PINB1 == 0) dstSet = true;
		
		//Get time
		rtc_getTime(&gHour, &gMin, &gSec, &gDay);
 202:	28 e1       	ldi	r18, 0x18	; 24
 204:	31 e0       	ldi	r19, 0x01	; 1
 206:	46 e1       	ldi	r20, 0x16	; 22
 208:	51 e0       	ldi	r21, 0x01	; 1
 20a:	65 e1       	ldi	r22, 0x15	; 21
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	87 e1       	ldi	r24, 0x17	; 23
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 94 01 	call	0x328	; 0x328 <rtc_getTime>
		if(dstSet) gHour++; //add one hour if daylight savings time is toggled
		
		//Display time
		ssd_time(gHour, gMin, gSec, gDay);
 216:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <gDay>
 21a:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <gSec>
 21e:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <gMin>
 222:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <gHour>
 226:	0e 94 30 02 	call	0x460	; 0x460 <ssd_time>
		//Check/Ring/End alarm routine
		if(!alarm && (gHour == Alarm_Hour) && (gMin == Alarm_Minute) && AlarmDays[gDay] && alarmSet) {
			alarm = true;
			//If alarm condition is met, set alarm variable.
		}
		if(snoozed && (gMin == snoozeMin)) {
 22a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <snoozed>
 22e:	88 23       	and	r24, r24
 230:	59 f0       	breq	.+22     	; 0x248 <main+0x50>
 232:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <gMin>
 236:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 23a:	98 13       	cpse	r25, r24
 23c:	05 c0       	rjmp	.+10     	; 0x248 <main+0x50>
			alarm = true;
 23e:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <alarm>
			snoozed = false;
 242:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <snoozed>
 246:	04 c0       	rjmp	.+8      	; 0x250 <main+0x58>
		}
		if(alarm) {
 248:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <alarm>
 24c:	88 23       	and	r24, r24
 24e:	c9 f2       	breq	.-78     	; 0x202 <main+0xa>
			//If the alarm is ringing
			if(alarm && (gMin == alarmMinuteEnd)) {
 250:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <gMin>
 254:	88 32       	cpi	r24, 0x28	; 40
 256:	11 f4       	brne	.+4      	; 0x25c <main+0x64>
				alarm = false;
 258:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <alarm>
			}
			//If alarm variable is set, ring alarm. (Ring by alternating high signal across the speaker pins)
			beep(100);	
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	0e 94 ba 00 	call	0x174	; 0x174 <beep>
 262:	cf cf       	rjmp	.-98     	; 0x202 <main+0xa>

00000264 <__vector_4>:
		rtc_set(MONTH_SET, DAY_SET, YEAR_SET, HOUR_SET, MIN_SET, 0);
	}
}

//ISR for Port C, used for pins PC2, PC3
ISR (PCINT1_vect) {
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	cf 93       	push	r28
 284:	ef 93       	push	r30
 286:	ff 93       	push	r31
	uint8_t changedBits;
	
	changedBits = PINC ^ portchist;
 288:	c6 b1       	in	r28, 0x06	; 6
 28a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 28e:	c8 27       	eor	r28, r24
	portchist = PINC;
 290:	86 b1       	in	r24, 0x06	; 6
 292:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	rtc_getTime(&gHour, &gMin, &gSec, &gDay);
 296:	28 e1       	ldi	r18, 0x18	; 24
 298:	31 e0       	ldi	r19, 0x01	; 1
 29a:	46 e1       	ldi	r20, 0x16	; 22
 29c:	51 e0       	ldi	r21, 0x01	; 1
 29e:	65 e1       	ldi	r22, 0x15	; 21
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	87 e1       	ldi	r24, 0x17	; 23
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 94 01 	call	0x328	; 0x328 <rtc_getTime>
	
	if(changedBits & (1 << PINC2)) {
 2aa:	c2 ff       	sbrs	r28, 2
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__vector_4+0x58>
		//if PCINT10
		//alarmCancel routine
		alarm = !alarm;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <alarm>
 2b4:	91 11       	cpse	r25, r1
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <alarm>
	}
	if(changedBits & (1 << PINC3)) {
 2bc:	c3 ff       	sbrs	r28, 3
 2be:	15 c0       	rjmp	.+42     	; 0x2ea <__vector_4+0x86>
		//if PCINT11
		//alarmSnooze routine
		snoozed = true;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <snoozed>
		alarm = !alarm;
 2c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <alarm>
 2ca:	91 11       	cpse	r25, r1
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <alarm>
		snoozeMin = gMin + Snooze_Time;
 2d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <gMin>
 2d6:	9a e0       	ldi	r25, 0x0A	; 10
 2d8:	98 0f       	add	r25, r24
		if(snoozeMin >= 60) snoozeMin -= 60;
 2da:	9c 33       	cpi	r25, 0x3C	; 60
 2dc:	18 f4       	brcc	.+6      	; 0x2e4 <__vector_4+0x80>
	if(changedBits & (1 << PINC3)) {
		//if PCINT11
		//alarmSnooze routine
		snoozed = true;
		alarm = !alarm;
		snoozeMin = gMin + Snooze_Time;
 2de:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__data_end>
 2e2:	03 c0       	rjmp	.+6      	; 0x2ea <__vector_4+0x86>
		if(snoozeMin >= 60) snoozeMin -= 60;
 2e4:	82 53       	subi	r24, 0x32	; 50
 2e6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	}
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	cf 91       	pop	r28
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <rtc_init>:

void rtc_getDate(byte *months, byte *days, byte *years) {
	*months = i2c_readReg(RTC_READ,MONTHS_REG);
	*days = i2c_readReg(RTC_READ,DAYS_REG);
	*years = i2c_readReg(RTC_READ,YEARS_REG);
}
 30e:	80 ed       	ldi	r24, 0xD0	; 208
 310:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_start>
 314:	87 e0       	ldi	r24, 0x07	; 7
 316:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 76 00 	call	0xec	; 0xec <i2c_write>
 320:	84 e9       	ldi	r24, 0x94	; 148
 322:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 326:	08 95       	ret

00000328 <rtc_getTime>:
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	ec 01       	movw	r28, r24
 33a:	6b 01       	movw	r12, r22
 33c:	7a 01       	movw	r14, r20
 33e:	89 01       	movw	r16, r18
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	81 ed       	ldi	r24, 0xD1	; 209
 344:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_readReg>
 348:	88 83       	st	Y, r24
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 ed       	ldi	r24, 0xD1	; 209
 34e:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_readReg>
 352:	f6 01       	movw	r30, r12
 354:	80 83       	st	Z, r24
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	81 ed       	ldi	r24, 0xD1	; 209
 35a:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_readReg>
 35e:	f7 01       	movw	r30, r14
 360:	80 83       	st	Z, r24
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	81 ed       	ldi	r24, 0xD1	; 209
 366:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_readReg>
 36a:	f8 01       	movw	r30, r16
 36c:	80 83       	st	Z, r24
 36e:	88 81       	ld	r24, Y
 370:	86 ff       	sbrs	r24, 6
 372:	03 c0       	rjmp	.+6      	; 0x37a <rtc_getTime+0x52>
 374:	8f 71       	andi	r24, 0x1F	; 31
 376:	88 83       	st	Y, r24
 378:	02 c0       	rjmp	.+4      	; 0x37e <rtc_getTime+0x56>
 37a:	8f 73       	andi	r24, 0x3F	; 63
 37c:	88 83       	st	Y, r24
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	08 95       	ret

00000390 <rtc_set>:

void rtc_set(byte month, byte day, byte year, byte hour, byte min, byte sec) {
 390:	ef 92       	push	r14
 392:	0f 93       	push	r16
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	16 2f       	mov	r17, r22
 39c:	d4 2f       	mov	r29, r20
 39e:	c2 2f       	mov	r28, r18
	i2c_writeReg(RTC_WRITE,MONTHS_REG,month);
 3a0:	48 2f       	mov	r20, r24
 3a2:	65 e0       	ldi	r22, 0x05	; 5
 3a4:	80 ed       	ldi	r24, 0xD0	; 208
 3a6:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
	i2c_writeReg(RTC_WRITE,DAYS_REG,day);
 3aa:	41 2f       	mov	r20, r17
 3ac:	64 e0       	ldi	r22, 0x04	; 4
 3ae:	80 ed       	ldi	r24, 0xD0	; 208
 3b0:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
	i2c_writeReg(RTC_WRITE,YEARS_REG,year);
 3b4:	4d 2f       	mov	r20, r29
 3b6:	66 e0       	ldi	r22, 0x06	; 6
 3b8:	80 ed       	ldi	r24, 0xD0	; 208
 3ba:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
	i2c_writeReg(RTC_WRITE,HOURS_REG,hour);
 3be:	4c 2f       	mov	r20, r28
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	80 ed       	ldi	r24, 0xD0	; 208
 3c4:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
	i2c_writeReg(RTC_WRITE,MIN_REG,min);
 3c8:	40 2f       	mov	r20, r16
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 ed       	ldi	r24, 0xD0	; 208
 3ce:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
	i2c_writeReg(RTC_WRITE,SEC_REG,sec);
 3d2:	4e 2d       	mov	r20, r14
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	80 ed       	ldi	r24, 0xD0	; 208
 3d8:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <ssd_setDigRaw>:
			if(ch >= 'a') ch-=87;
			else ch-='0';
			ssd_setDig(digit,ch);
		}
	}
}
 3e8:	85 30       	cpi	r24, 0x05	; 5
 3ea:	48 f4       	brcc	.+18     	; 0x3fe <ssd_setDigRaw+0x16>
 3ec:	82 30       	cpi	r24, 0x02	; 2
 3ee:	08 f0       	brcs	.+2      	; 0x3f2 <ssd_setDigRaw+0xa>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	88 0f       	add	r24, r24
 3f4:	46 2f       	mov	r20, r22
 3f6:	68 2f       	mov	r22, r24
 3f8:	80 ee       	ldi	r24, 0xE0	; 224
 3fa:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
 3fe:	08 95       	ret

00000400 <ssd_setDig>:
 400:	61 31       	cpi	r22, 0x11	; 17
 402:	38 f4       	brcc	.+14     	; 0x412 <ssd_setDig+0x12>
 404:	e6 2f       	mov	r30, r22
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	ef 5f       	subi	r30, 0xFF	; 255
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	60 81       	ld	r22, Z
 40e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <ssd_setDigRaw>
 412:	08 95       	ret

00000414 <ssd_setColon>:
 414:	48 2f       	mov	r20, r24
 416:	44 0f       	add	r20, r20
 418:	64 e0       	ldi	r22, 0x04	; 4
 41a:	80 ee       	ldi	r24, 0xE0	; 224
 41c:	0e 94 88 00 	call	0x110	; 0x110 <i2c_writeReg>
 420:	08 95       	ret

00000422 <ssd_setDigits>:
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	16 2f       	mov	r17, r22
 42c:	d4 2f       	mov	r29, r20
 42e:	c2 2f       	mov	r28, r18
 430:	68 2f       	mov	r22, r24
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 00 02 	call	0x400	; 0x400 <ssd_setDig>
 438:	61 2f       	mov	r22, r17
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 00 02 	call	0x400	; 0x400 <ssd_setDig>
 440:	6d 2f       	mov	r22, r29
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 00 02 	call	0x400	; 0x400 <ssd_setDig>
 448:	6c 2f       	mov	r22, r28
 44a:	83 e0       	ldi	r24, 0x03	; 3
 44c:	0e 94 00 02 	call	0x400	; 0x400 <ssd_setDig>
 450:	80 2f       	mov	r24, r16
 452:	0e 94 0a 02 	call	0x414	; 0x414 <ssd_setColon>
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <ssd_time>:
			msDelay(100);
		}
	}
}

void ssd_time(byte hour, byte min, byte sec, byte dayOW) {
 460:	0f 93       	push	r16
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	00 d0       	rcall	.+0      	; 0x468 <ssd_time+0x8>
 468:	00 d0       	rcall	.+0      	; 0x46a <ssd_time+0xa>
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	6a 83       	std	Y+2, r22	; 0x02
 472:	4b 83       	std	Y+3, r20	; 0x03
 474:	2c 83       	std	Y+4, r18	; 0x04
	rtc_getTime(&hour, &min, &sec, &dayOW);
 476:	9e 01       	movw	r18, r28
 478:	2c 5f       	subi	r18, 0xFC	; 252
 47a:	3f 4f       	sbci	r19, 0xFF	; 255
 47c:	ae 01       	movw	r20, r28
 47e:	4d 5f       	subi	r20, 0xFD	; 253
 480:	5f 4f       	sbci	r21, 0xFF	; 255
 482:	be 01       	movw	r22, r28
 484:	6e 5f       	subi	r22, 0xFE	; 254
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 94 01 	call	0x328	; 0x328 <rtc_getTime>
	ssd_setDigits(hour>>4, hour & 0x0F, min>>4, min & 0x0F, 1);
 490:	4a 81       	ldd	r20, Y+2	; 0x02
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	24 2f       	mov	r18, r20
 496:	2f 70       	andi	r18, 0x0F	; 15
 498:	42 95       	swap	r20
 49a:	4f 70       	andi	r20, 0x0F	; 15
 49c:	68 2f       	mov	r22, r24
 49e:	6f 70       	andi	r22, 0x0F	; 15
 4a0:	01 e0       	ldi	r16, 0x01	; 1
 4a2:	82 95       	swap	r24
 4a4:	8f 70       	andi	r24, 0x0F	; 15
 4a6:	0e 94 11 02 	call	0x422	; 0x422 <ssd_setDigits>
}
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <msDelay>:

void msDelay(int delay) {
	for(int i = 0; i < delay; i++) {
 4ba:	18 16       	cp	r1, r24
 4bc:	19 06       	cpc	r1, r25
 4be:	6c f4       	brge	.+26     	; 0x4da <msDelay+0x20>
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c4:	ef e9       	ldi	r30, 0x9F	; 159
 4c6:	ff e0       	ldi	r31, 0x0F	; 15
 4c8:	31 97       	sbiw	r30, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <msDelay+0xe>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <msDelay+0x14>
 4ce:	00 00       	nop
 4d0:	2f 5f       	subi	r18, 0xFF	; 255
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	82 17       	cp	r24, r18
 4d6:	93 07       	cpc	r25, r19
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <msDelay+0xa>
 4da:	08 95       	ret

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
